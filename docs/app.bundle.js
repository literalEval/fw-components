/*! For license information please see app.bundle.js.LICENSE.txt */
(()=>{"use strict";const t=window,e=t.ShadowRoot&&(void 0===t.ShadyCSS||t.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,r=Symbol(),i=new WeakMap;class o{constructor(t,e,i){if(this._$cssResult$=!0,i!==r)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const r=this.t;if(e&&void 0===t){const e=void 0!==r&&1===r.length;e&&(t=i.get(r)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),e&&i.set(r,t))}return t}toString(){return this.cssText}}const s=e?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const r of t.cssRules)e+=r.cssText;return(t=>new o("string"==typeof t?t:t+"",void 0,r))(e)})(t):t;var n;const l=window,a=l.trustedTypes,h=a?a.emptyScript:"",c=l.reactiveElementPolyfillSupport,d={toAttribute(t,e){switch(e){case Boolean:t=t?h:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){let r=t;switch(e){case Boolean:r=null!==t;break;case Number:r=null===t?null:Number(t);break;case Object:case Array:try{r=JSON.parse(t)}catch(t){r=null}}return r}},u=(t,e)=>e!==t&&(e==e||t==t),p={attribute:!0,type:String,converter:d,reflect:!1,hasChanged:u},f="finalized";class v extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(t){var e;this.finalize(),(null!==(e=this.h)&&void 0!==e?e:this.h=[]).push(t)}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((e,r)=>{const i=this._$Ep(r,e);void 0!==i&&(this._$Ev.set(i,r),t.push(i))})),t}static createProperty(t,e=p){if(e.state&&(e.attribute=!1),this.finalize(),this.elementProperties.set(t,e),!e.noAccessor&&!this.prototype.hasOwnProperty(t)){const r="symbol"==typeof t?Symbol():"__"+t,i=this.getPropertyDescriptor(t,r,e);void 0!==i&&Object.defineProperty(this.prototype,t,i)}}static getPropertyDescriptor(t,e,r){return{get(){return this[e]},set(i){const o=this[t];this[e]=i,this.requestUpdate(t,o,r)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||p}static finalize(){if(this.hasOwnProperty(f))return!1;this[f]=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),void 0!==t.h&&(this.h=[...t.h]),this.elementProperties=new Map(t.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const t=this.properties,e=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const r of e)this.createProperty(r,t[r])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(t){const e=[];if(Array.isArray(t)){const r=new Set(t.flat(1/0).reverse());for(const t of r)e.unshift(s(t))}else void 0!==t&&e.push(s(t));return e}static _$Ep(t,e){const r=e.attribute;return!1===r?void 0:"string"==typeof r?r:"string"==typeof t?t.toLowerCase():void 0}u(){var t;this._$E_=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(t=this.constructor.h)||void 0===t||t.forEach((t=>t(this)))}addController(t){var e,r;(null!==(e=this._$ES)&&void 0!==e?e:this._$ES=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(r=t.hostConnected)||void 0===r||r.call(t))}removeController(t){var e;null===(e=this._$ES)||void 0===e||e.splice(this._$ES.indexOf(t)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((t,e)=>{this.hasOwnProperty(e)&&(this._$Ei.set(e,this[e]),delete this[e])}))}createRenderRoot(){var r;const i=null!==(r=this.shadowRoot)&&void 0!==r?r:this.attachShadow(this.constructor.shadowRootOptions);return((r,i)=>{e?r.adoptedStyleSheets=i.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):i.forEach((e=>{const i=document.createElement("style"),o=t.litNonce;void 0!==o&&i.setAttribute("nonce",o),i.textContent=e.cssText,r.appendChild(i)}))})(i,this.constructor.elementStyles),i}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostConnected)||void 0===e?void 0:e.call(t)}))}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostDisconnected)||void 0===e?void 0:e.call(t)}))}attributeChangedCallback(t,e,r){this._$AK(t,r)}_$EO(t,e,r=p){var i;const o=this.constructor._$Ep(t,r);if(void 0!==o&&!0===r.reflect){const s=(void 0!==(null===(i=r.converter)||void 0===i?void 0:i.toAttribute)?r.converter:d).toAttribute(e,r.type);this._$El=t,null==s?this.removeAttribute(o):this.setAttribute(o,s),this._$El=null}}_$AK(t,e){var r;const i=this.constructor,o=i._$Ev.get(t);if(void 0!==o&&this._$El!==o){const t=i.getPropertyOptions(o),s="function"==typeof t.converter?{fromAttribute:t.converter}:void 0!==(null===(r=t.converter)||void 0===r?void 0:r.fromAttribute)?t.converter:d;this._$El=o,this[o]=s.fromAttribute(e,t.type),this._$El=null}}requestUpdate(t,e,r){let i=!0;void 0!==t&&(((r=r||this.constructor.getPropertyOptions(t)).hasChanged||u)(this[t],e)?(this._$AL.has(t)||this._$AL.set(t,e),!0===r.reflect&&this._$El!==t&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(t,r))):i=!1),!this.isUpdatePending&&i&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((t,e)=>this[e]=t)),this._$Ei=void 0);let e=!1;const r=this._$AL;try{e=this.shouldUpdate(r),e?(this.willUpdate(r),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostUpdate)||void 0===e?void 0:e.call(t)})),this.update(r)):this._$Ek()}catch(t){throw e=!1,this._$Ek(),t}e&&this._$AE(r)}willUpdate(t){}_$AE(t){var e;null===(e=this._$ES)||void 0===e||e.forEach((t=>{var e;return null===(e=t.hostUpdated)||void 0===e?void 0:e.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(t){return!0}update(t){void 0!==this._$EC&&(this._$EC.forEach(((t,e)=>this._$EO(e,this[e],t))),this._$EC=void 0),this._$Ek()}updated(t){}firstUpdated(t){}}var g;v[f]=!0,v.elementProperties=new Map,v.elementStyles=[],v.shadowRootOptions={mode:"open"},null==c||c({ReactiveElement:v}),(null!==(n=l.reactiveElementVersions)&&void 0!==n?n:l.reactiveElementVersions=[]).push("1.6.2");const m=window,y=m.trustedTypes,_=y?y.createPolicy("lit-html",{createHTML:t=>t}):void 0,$="$lit$",b=`lit$${(Math.random()+"").slice(9)}$`,A="?"+b,w=`<${A}>`,x=document,E=()=>x.createComment(""),S=t=>null===t||"object"!=typeof t&&"function"!=typeof t,C=Array.isArray,P="[ \t\n\f\r]",R=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,k=/-->/g,U=/>/g,N=RegExp(`>|${P}(?:([^\\s"'>=/]+)(${P}*=${P}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),O=/'/g,z=/"/g,T=/^(?:script|style|textarea|title)$/i,H=t=>(e,...r)=>({_$litType$:t,strings:e,values:r}),M=H(1),j=(H(2),Symbol.for("lit-noChange")),D=Symbol.for("lit-nothing"),L=new WeakMap,I=x.createTreeWalker(x,129,null,!1),B=(t,e)=>{const r=t.length-1,i=[];let o,s=2===e?"<svg>":"",n=R;for(let e=0;e<r;e++){const r=t[e];let l,a,h=-1,c=0;for(;c<r.length&&(n.lastIndex=c,a=n.exec(r),null!==a);)c=n.lastIndex,n===R?"!--"===a[1]?n=k:void 0!==a[1]?n=U:void 0!==a[2]?(T.test(a[2])&&(o=RegExp("</"+a[2],"g")),n=N):void 0!==a[3]&&(n=N):n===N?">"===a[0]?(n=null!=o?o:R,h=-1):void 0===a[1]?h=-2:(h=n.lastIndex-a[2].length,l=a[1],n=void 0===a[3]?N:'"'===a[3]?z:O):n===z||n===O?n=N:n===k||n===U?n=R:(n=N,o=void 0);const d=n===N&&t[e+1].startsWith("/>")?" ":"";s+=n===R?r+w:h>=0?(i.push(l),r.slice(0,h)+$+r.slice(h)+b+d):r+b+(-2===h?(i.push(void 0),e):d)}const l=s+(t[r]||"<?>")+(2===e?"</svg>":"");if(!Array.isArray(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return[void 0!==_?_.createHTML(l):l,i]};class q{constructor({strings:t,_$litType$:e},r){let i;this.parts=[];let o=0,s=0;const n=t.length-1,l=this.parts,[a,h]=B(t,e);if(this.el=q.createElement(a,r),I.currentNode=this.el.content,2===e){const t=this.el.content,e=t.firstChild;e.remove(),t.append(...e.childNodes)}for(;null!==(i=I.nextNode())&&l.length<n;){if(1===i.nodeType){if(i.hasAttributes()){const t=[];for(const e of i.getAttributeNames())if(e.endsWith($)||e.startsWith(b)){const r=h[s++];if(t.push(e),void 0!==r){const t=i.getAttribute(r.toLowerCase()+$).split(b),e=/([.?@])?(.*)/.exec(r);l.push({type:1,index:o,name:e[2],strings:t,ctor:"."===e[1]?K:"?"===e[1]?G:"@"===e[1]?X:J})}else l.push({type:6,index:o})}for(const e of t)i.removeAttribute(e)}if(T.test(i.tagName)){const t=i.textContent.split(b),e=t.length-1;if(e>0){i.textContent=y?y.emptyScript:"";for(let r=0;r<e;r++)i.append(t[r],E()),I.nextNode(),l.push({type:2,index:++o});i.append(t[e],E())}}}else if(8===i.nodeType)if(i.data===A)l.push({type:2,index:o});else{let t=-1;for(;-1!==(t=i.data.indexOf(b,t+1));)l.push({type:7,index:o}),t+=b.length-1}o++}}static createElement(t,e){const r=x.createElement("template");return r.innerHTML=t,r}}function V(t,e,r=t,i){var o,s,n,l;if(e===j)return e;let a=void 0!==i?null===(o=r._$Co)||void 0===o?void 0:o[i]:r._$Cl;const h=S(e)?void 0:e._$litDirective$;return(null==a?void 0:a.constructor)!==h&&(null===(s=null==a?void 0:a._$AO)||void 0===s||s.call(a,!1),void 0===h?a=void 0:(a=new h(t),a._$AT(t,r,i)),void 0!==i?(null!==(n=(l=r)._$Co)&&void 0!==n?n:l._$Co=[])[i]=a:r._$Cl=a),void 0!==a&&(e=V(t,a._$AS(t,e.values),a,i)),e}class F{constructor(t,e){this._$AV=[],this._$AN=void 0,this._$AD=t,this._$AM=e}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(t){var e;const{el:{content:r},parts:i}=this._$AD,o=(null!==(e=null==t?void 0:t.creationScope)&&void 0!==e?e:x).importNode(r,!0);I.currentNode=o;let s=I.nextNode(),n=0,l=0,a=i[0];for(;void 0!==a;){if(n===a.index){let e;2===a.type?e=new W(s,s.nextSibling,this,t):1===a.type?e=new a.ctor(s,a.name,a.strings,this,t):6===a.type&&(e=new Y(s,this,t)),this._$AV.push(e),a=i[++l]}n!==(null==a?void 0:a.index)&&(s=I.nextNode(),n++)}return I.currentNode=x,o}v(t){let e=0;for(const r of this._$AV)void 0!==r&&(void 0!==r.strings?(r._$AI(t,r,e),e+=r.strings.length-2):r._$AI(t[e])),e++}}class W{constructor(t,e,r,i){var o;this.type=2,this._$AH=D,this._$AN=void 0,this._$AA=t,this._$AB=e,this._$AM=r,this.options=i,this._$Cp=null===(o=null==i?void 0:i.isConnected)||void 0===o||o}get _$AU(){var t,e;return null!==(e=null===(t=this._$AM)||void 0===t?void 0:t._$AU)&&void 0!==e?e:this._$Cp}get parentNode(){let t=this._$AA.parentNode;const e=this._$AM;return void 0!==e&&11===(null==t?void 0:t.nodeType)&&(t=e.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,e=this){t=V(this,t,e),S(t)?t===D||null==t||""===t?(this._$AH!==D&&this._$AR(),this._$AH=D):t!==this._$AH&&t!==j&&this._(t):void 0!==t._$litType$?this.g(t):void 0!==t.nodeType?this.$(t):(t=>C(t)||"function"==typeof(null==t?void 0:t[Symbol.iterator]))(t)?this.T(t):this._(t)}k(t){return this._$AA.parentNode.insertBefore(t,this._$AB)}$(t){this._$AH!==t&&(this._$AR(),this._$AH=this.k(t))}_(t){this._$AH!==D&&S(this._$AH)?this._$AA.nextSibling.data=t:this.$(x.createTextNode(t)),this._$AH=t}g(t){var e;const{values:r,_$litType$:i}=t,o="number"==typeof i?this._$AC(t):(void 0===i.el&&(i.el=q.createElement(i.h,this.options)),i);if((null===(e=this._$AH)||void 0===e?void 0:e._$AD)===o)this._$AH.v(r);else{const t=new F(o,this),e=t.u(this.options);t.v(r),this.$(e),this._$AH=t}}_$AC(t){let e=L.get(t.strings);return void 0===e&&L.set(t.strings,e=new q(t)),e}T(t){C(this._$AH)||(this._$AH=[],this._$AR());const e=this._$AH;let r,i=0;for(const o of t)i===e.length?e.push(r=new W(this.k(E()),this.k(E()),this,this.options)):r=e[i],r._$AI(o),i++;i<e.length&&(this._$AR(r&&r._$AB.nextSibling,i),e.length=i)}_$AR(t=this._$AA.nextSibling,e){var r;for(null===(r=this._$AP)||void 0===r||r.call(this,!1,!0,e);t&&t!==this._$AB;){const e=t.nextSibling;t.remove(),t=e}}setConnected(t){var e;void 0===this._$AM&&(this._$Cp=t,null===(e=this._$AP)||void 0===e||e.call(this,t))}}class J{constructor(t,e,r,i,o){this.type=1,this._$AH=D,this._$AN=void 0,this.element=t,this.name=e,this._$AM=i,this.options=o,r.length>2||""!==r[0]||""!==r[1]?(this._$AH=Array(r.length-1).fill(new String),this.strings=r):this._$AH=D}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(t,e=this,r,i){const o=this.strings;let s=!1;if(void 0===o)t=V(this,t,e,0),s=!S(t)||t!==this._$AH&&t!==j,s&&(this._$AH=t);else{const i=t;let n,l;for(t=o[0],n=0;n<o.length-1;n++)l=V(this,i[r+n],e,n),l===j&&(l=this._$AH[n]),s||(s=!S(l)||l!==this._$AH[n]),l===D?t=D:t!==D&&(t+=(null!=l?l:"")+o[n+1]),this._$AH[n]=l}s&&!i&&this.j(t)}j(t){t===D?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=t?t:"")}}class K extends J{constructor(){super(...arguments),this.type=3}j(t){this.element[this.name]=t===D?void 0:t}}const Z=y?y.emptyScript:"";class G extends J{constructor(){super(...arguments),this.type=4}j(t){t&&t!==D?this.element.setAttribute(this.name,Z):this.element.removeAttribute(this.name)}}class X extends J{constructor(t,e,r,i,o){super(t,e,r,i,o),this.type=5}_$AI(t,e=this){var r;if((t=null!==(r=V(this,t,e,0))&&void 0!==r?r:D)===j)return;const i=this._$AH,o=t===D&&i!==D||t.capture!==i.capture||t.once!==i.once||t.passive!==i.passive,s=t!==D&&(i===D||o);o&&this.element.removeEventListener(this.name,this,i),s&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){var e,r;"function"==typeof this._$AH?this._$AH.call(null!==(r=null===(e=this.options)||void 0===e?void 0:e.host)&&void 0!==r?r:this.element,t):this._$AH.handleEvent(t)}}class Y{constructor(t,e,r){this.element=t,this.type=6,this._$AN=void 0,this._$AM=e,this.options=r}get _$AU(){return this._$AM._$AU}_$AI(t){V(this,t)}}const Q=m.litHtmlPolyfillSupport;var tt,et;null==Q||Q(q,W),(null!==(g=m.litHtmlVersions)&&void 0!==g?g:m.litHtmlVersions=[]).push("2.7.4");class rt extends v{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var t,e;const r=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=r.firstChild),r}update(t){const e=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=((t,e,r)=>{var i,o;const s=null!==(i=null==r?void 0:r.renderBefore)&&void 0!==i?i:e;let n=s._$litPart$;if(void 0===n){const t=null!==(o=null==r?void 0:r.renderBefore)&&void 0!==o?o:null;s._$litPart$=n=new W(e.insertBefore(E(),t),t,void 0,null!=r?r:{})}return n._$AI(t),n})(e,this.renderRoot,this.renderOptions)}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!0)}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!1)}render(){return j}}rt.finalized=!0,rt._$litElement$=!0,null===(tt=globalThis.litElementHydrateSupport)||void 0===tt||tt.call(globalThis,{LitElement:rt});const it=globalThis.litElementPolyfillSupport;var ot;null==it||it({LitElement:rt}),(null!==(et=globalThis.litElementVersions)&&void 0!==et?et:globalThis.litElementVersions=[]).push("3.3.2"),null===(ot=window.HTMLSlotElement)||void 0===ot||ot.prototype.assignedElements,console.warn("The main 'lit-element' module entrypoint is deprecated. Please update your imports to use the 'lit' package: 'lit' and 'lit/decorators.ts' or import from 'lit-element/lit-element.ts'. See https://lit.dev/msg/deprecated-import-path for more information.");const st=window,nt=st.ShadowRoot&&(void 0===st.ShadyCSS||st.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,lt=Symbol(),at=new WeakMap;class ht{constructor(t,e,r){if(this._$cssResult$=!0,r!==lt)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const e=this.t;if(nt&&void 0===t){const r=void 0!==e&&1===e.length;r&&(t=at.get(e)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),r&&at.set(e,t))}return t}toString(){return this.cssText}}const ct=nt?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const r of t.cssRules)e+=r.cssText;return(t=>new ht("string"==typeof t?t:t+"",void 0,lt))(e)})(t):t;var dt;const ut=window,pt=ut.trustedTypes,ft=pt?pt.emptyScript:"",vt=ut.reactiveElementPolyfillSupport,gt={toAttribute(t,e){switch(e){case Boolean:t=t?ft:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){let r=t;switch(e){case Boolean:r=null!==t;break;case Number:r=null===t?null:Number(t);break;case Object:case Array:try{r=JSON.parse(t)}catch(t){r=null}}return r}},mt=(t,e)=>e!==t&&(e==e||t==t),yt={attribute:!0,type:String,converter:gt,reflect:!1,hasChanged:mt};class _t extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(t){var e;this.finalize(),(null!==(e=this.h)&&void 0!==e?e:this.h=[]).push(t)}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((e,r)=>{const i=this._$Ep(r,e);void 0!==i&&(this._$Ev.set(i,r),t.push(i))})),t}static createProperty(t,e=yt){if(e.state&&(e.attribute=!1),this.finalize(),this.elementProperties.set(t,e),!e.noAccessor&&!this.prototype.hasOwnProperty(t)){const r="symbol"==typeof t?Symbol():"__"+t,i=this.getPropertyDescriptor(t,r,e);void 0!==i&&Object.defineProperty(this.prototype,t,i)}}static getPropertyDescriptor(t,e,r){return{get(){return this[e]},set(i){const o=this[t];this[e]=i,this.requestUpdate(t,o,r)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||yt}static finalize(){if(this.hasOwnProperty("finalized"))return!1;this.finalized=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),void 0!==t.h&&(this.h=[...t.h]),this.elementProperties=new Map(t.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const t=this.properties,e=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const r of e)this.createProperty(r,t[r])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(t){const e=[];if(Array.isArray(t)){const r=new Set(t.flat(1/0).reverse());for(const t of r)e.unshift(ct(t))}else void 0!==t&&e.push(ct(t));return e}static _$Ep(t,e){const r=e.attribute;return!1===r?void 0:"string"==typeof r?r:"string"==typeof t?t.toLowerCase():void 0}u(){var t;this._$E_=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(t=this.constructor.h)||void 0===t||t.forEach((t=>t(this)))}addController(t){var e,r;(null!==(e=this._$ES)&&void 0!==e?e:this._$ES=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(r=t.hostConnected)||void 0===r||r.call(t))}removeController(t){var e;null===(e=this._$ES)||void 0===e||e.splice(this._$ES.indexOf(t)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((t,e)=>{this.hasOwnProperty(e)&&(this._$Ei.set(e,this[e]),delete this[e])}))}createRenderRoot(){var t;const e=null!==(t=this.shadowRoot)&&void 0!==t?t:this.attachShadow(this.constructor.shadowRootOptions);return((t,e)=>{nt?t.adoptedStyleSheets=e.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):e.forEach((e=>{const r=document.createElement("style"),i=st.litNonce;void 0!==i&&r.setAttribute("nonce",i),r.textContent=e.cssText,t.appendChild(r)}))})(e,this.constructor.elementStyles),e}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostConnected)||void 0===e?void 0:e.call(t)}))}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostDisconnected)||void 0===e?void 0:e.call(t)}))}attributeChangedCallback(t,e,r){this._$AK(t,r)}_$EO(t,e,r=yt){var i;const o=this.constructor._$Ep(t,r);if(void 0!==o&&!0===r.reflect){const s=(void 0!==(null===(i=r.converter)||void 0===i?void 0:i.toAttribute)?r.converter:gt).toAttribute(e,r.type);this._$El=t,null==s?this.removeAttribute(o):this.setAttribute(o,s),this._$El=null}}_$AK(t,e){var r;const i=this.constructor,o=i._$Ev.get(t);if(void 0!==o&&this._$El!==o){const t=i.getPropertyOptions(o),s="function"==typeof t.converter?{fromAttribute:t.converter}:void 0!==(null===(r=t.converter)||void 0===r?void 0:r.fromAttribute)?t.converter:gt;this._$El=o,this[o]=s.fromAttribute(e,t.type),this._$El=null}}requestUpdate(t,e,r){let i=!0;void 0!==t&&(((r=r||this.constructor.getPropertyOptions(t)).hasChanged||mt)(this[t],e)?(this._$AL.has(t)||this._$AL.set(t,e),!0===r.reflect&&this._$El!==t&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(t,r))):i=!1),!this.isUpdatePending&&i&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((t,e)=>this[e]=t)),this._$Ei=void 0);let e=!1;const r=this._$AL;try{e=this.shouldUpdate(r),e?(this.willUpdate(r),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostUpdate)||void 0===e?void 0:e.call(t)})),this.update(r)):this._$Ek()}catch(t){throw e=!1,this._$Ek(),t}e&&this._$AE(r)}willUpdate(t){}_$AE(t){var e;null===(e=this._$ES)||void 0===e||e.forEach((t=>{var e;return null===(e=t.hostUpdated)||void 0===e?void 0:e.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(t){return!0}update(t){void 0!==this._$EC&&(this._$EC.forEach(((t,e)=>this._$EO(e,this[e],t))),this._$EC=void 0),this._$Ek()}updated(t){}firstUpdated(t){}}var $t;_t.finalized=!0,_t.elementProperties=new Map,_t.elementStyles=[],_t.shadowRootOptions={mode:"open"},null==vt||vt({ReactiveElement:_t}),(null!==(dt=ut.reactiveElementVersions)&&void 0!==dt?dt:ut.reactiveElementVersions=[]).push("1.6.1");const bt=window,At=bt.trustedTypes,wt=At?At.createPolicy("lit-html",{createHTML:t=>t}):void 0,xt="$lit$",Et=`lit$${(Math.random()+"").slice(9)}$`,St="?"+Et,Ct=`<${St}>`,Pt=document,Rt=()=>Pt.createComment(""),kt=t=>null===t||"object"!=typeof t&&"function"!=typeof t,Ut=Array.isArray,Nt="[ \t\n\f\r]",Ot=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,zt=/-->/g,Tt=/>/g,Ht=RegExp(`>|${Nt}(?:([^\\s"'>=/]+)(${Nt}*=${Nt}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),Mt=/'/g,jt=/"/g,Dt=/^(?:script|style|textarea|title)$/i,Lt=t=>(e,...r)=>({_$litType$:t,strings:e,values:r}),It=Lt(1),Bt=(Lt(2),Symbol.for("lit-noChange")),qt=Symbol.for("lit-nothing"),Vt=new WeakMap,Ft=Pt.createTreeWalker(Pt,129,null,!1);class Wt{constructor({strings:t,_$litType$:e},r){let i;this.parts=[];let o=0,s=0;const n=t.length-1,l=this.parts,[a,h]=((t,e)=>{const r=t.length-1,i=[];let o,s=2===e?"<svg>":"",n=Ot;for(let e=0;e<r;e++){const r=t[e];let l,a,h=-1,c=0;for(;c<r.length&&(n.lastIndex=c,a=n.exec(r),null!==a);)c=n.lastIndex,n===Ot?"!--"===a[1]?n=zt:void 0!==a[1]?n=Tt:void 0!==a[2]?(Dt.test(a[2])&&(o=RegExp("</"+a[2],"g")),n=Ht):void 0!==a[3]&&(n=Ht):n===Ht?">"===a[0]?(n=null!=o?o:Ot,h=-1):void 0===a[1]?h=-2:(h=n.lastIndex-a[2].length,l=a[1],n=void 0===a[3]?Ht:'"'===a[3]?jt:Mt):n===jt||n===Mt?n=Ht:n===zt||n===Tt?n=Ot:(n=Ht,o=void 0);const d=n===Ht&&t[e+1].startsWith("/>")?" ":"";s+=n===Ot?r+Ct:h>=0?(i.push(l),r.slice(0,h)+xt+r.slice(h)+Et+d):r+Et+(-2===h?(i.push(void 0),e):d)}const l=s+(t[r]||"<?>")+(2===e?"</svg>":"");if(!Array.isArray(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return[void 0!==wt?wt.createHTML(l):l,i]})(t,e);if(this.el=Wt.createElement(a,r),Ft.currentNode=this.el.content,2===e){const t=this.el.content,e=t.firstChild;e.remove(),t.append(...e.childNodes)}for(;null!==(i=Ft.nextNode())&&l.length<n;){if(1===i.nodeType){if(i.hasAttributes()){const t=[];for(const e of i.getAttributeNames())if(e.endsWith(xt)||e.startsWith(Et)){const r=h[s++];if(t.push(e),void 0!==r){const t=i.getAttribute(r.toLowerCase()+xt).split(Et),e=/([.?@])?(.*)/.exec(r);l.push({type:1,index:o,name:e[2],strings:t,ctor:"."===e[1]?Xt:"?"===e[1]?Qt:"@"===e[1]?te:Gt})}else l.push({type:6,index:o})}for(const e of t)i.removeAttribute(e)}if(Dt.test(i.tagName)){const t=i.textContent.split(Et),e=t.length-1;if(e>0){i.textContent=At?At.emptyScript:"";for(let r=0;r<e;r++)i.append(t[r],Rt()),Ft.nextNode(),l.push({type:2,index:++o});i.append(t[e],Rt())}}}else if(8===i.nodeType)if(i.data===St)l.push({type:2,index:o});else{let t=-1;for(;-1!==(t=i.data.indexOf(Et,t+1));)l.push({type:7,index:o}),t+=Et.length-1}o++}}static createElement(t,e){const r=Pt.createElement("template");return r.innerHTML=t,r}}function Jt(t,e,r=t,i){var o,s,n,l;if(e===Bt)return e;let a=void 0!==i?null===(o=r._$Co)||void 0===o?void 0:o[i]:r._$Cl;const h=kt(e)?void 0:e._$litDirective$;return(null==a?void 0:a.constructor)!==h&&(null===(s=null==a?void 0:a._$AO)||void 0===s||s.call(a,!1),void 0===h?a=void 0:(a=new h(t),a._$AT(t,r,i)),void 0!==i?(null!==(n=(l=r)._$Co)&&void 0!==n?n:l._$Co=[])[i]=a:r._$Cl=a),void 0!==a&&(e=Jt(t,a._$AS(t,e.values),a,i)),e}class Kt{constructor(t,e){this._$AV=[],this._$AN=void 0,this._$AD=t,this._$AM=e}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(t){var e;const{el:{content:r},parts:i}=this._$AD,o=(null!==(e=null==t?void 0:t.creationScope)&&void 0!==e?e:Pt).importNode(r,!0);Ft.currentNode=o;let s=Ft.nextNode(),n=0,l=0,a=i[0];for(;void 0!==a;){if(n===a.index){let e;2===a.type?e=new Zt(s,s.nextSibling,this,t):1===a.type?e=new a.ctor(s,a.name,a.strings,this,t):6===a.type&&(e=new ee(s,this,t)),this._$AV.push(e),a=i[++l]}n!==(null==a?void 0:a.index)&&(s=Ft.nextNode(),n++)}return Ft.currentNode=Pt,o}v(t){let e=0;for(const r of this._$AV)void 0!==r&&(void 0!==r.strings?(r._$AI(t,r,e),e+=r.strings.length-2):r._$AI(t[e])),e++}}class Zt{constructor(t,e,r,i){var o;this.type=2,this._$AH=qt,this._$AN=void 0,this._$AA=t,this._$AB=e,this._$AM=r,this.options=i,this._$Cp=null===(o=null==i?void 0:i.isConnected)||void 0===o||o}get _$AU(){var t,e;return null!==(e=null===(t=this._$AM)||void 0===t?void 0:t._$AU)&&void 0!==e?e:this._$Cp}get parentNode(){let t=this._$AA.parentNode;const e=this._$AM;return void 0!==e&&11===(null==t?void 0:t.nodeType)&&(t=e.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,e=this){t=Jt(this,t,e),kt(t)?t===qt||null==t||""===t?(this._$AH!==qt&&this._$AR(),this._$AH=qt):t!==this._$AH&&t!==Bt&&this._(t):void 0!==t._$litType$?this.g(t):void 0!==t.nodeType?this.$(t):(t=>Ut(t)||"function"==typeof(null==t?void 0:t[Symbol.iterator]))(t)?this.T(t):this._(t)}k(t){return this._$AA.parentNode.insertBefore(t,this._$AB)}$(t){this._$AH!==t&&(this._$AR(),this._$AH=this.k(t))}_(t){this._$AH!==qt&&kt(this._$AH)?this._$AA.nextSibling.data=t:this.$(Pt.createTextNode(t)),this._$AH=t}g(t){var e;const{values:r,_$litType$:i}=t,o="number"==typeof i?this._$AC(t):(void 0===i.el&&(i.el=Wt.createElement(i.h,this.options)),i);if((null===(e=this._$AH)||void 0===e?void 0:e._$AD)===o)this._$AH.v(r);else{const t=new Kt(o,this),e=t.u(this.options);t.v(r),this.$(e),this._$AH=t}}_$AC(t){let e=Vt.get(t.strings);return void 0===e&&Vt.set(t.strings,e=new Wt(t)),e}T(t){Ut(this._$AH)||(this._$AH=[],this._$AR());const e=this._$AH;let r,i=0;for(const o of t)i===e.length?e.push(r=new Zt(this.k(Rt()),this.k(Rt()),this,this.options)):r=e[i],r._$AI(o),i++;i<e.length&&(this._$AR(r&&r._$AB.nextSibling,i),e.length=i)}_$AR(t=this._$AA.nextSibling,e){var r;for(null===(r=this._$AP)||void 0===r||r.call(this,!1,!0,e);t&&t!==this._$AB;){const e=t.nextSibling;t.remove(),t=e}}setConnected(t){var e;void 0===this._$AM&&(this._$Cp=t,null===(e=this._$AP)||void 0===e||e.call(this,t))}}class Gt{constructor(t,e,r,i,o){this.type=1,this._$AH=qt,this._$AN=void 0,this.element=t,this.name=e,this._$AM=i,this.options=o,r.length>2||""!==r[0]||""!==r[1]?(this._$AH=Array(r.length-1).fill(new String),this.strings=r):this._$AH=qt}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(t,e=this,r,i){const o=this.strings;let s=!1;if(void 0===o)t=Jt(this,t,e,0),s=!kt(t)||t!==this._$AH&&t!==Bt,s&&(this._$AH=t);else{const i=t;let n,l;for(t=o[0],n=0;n<o.length-1;n++)l=Jt(this,i[r+n],e,n),l===Bt&&(l=this._$AH[n]),s||(s=!kt(l)||l!==this._$AH[n]),l===qt?t=qt:t!==qt&&(t+=(null!=l?l:"")+o[n+1]),this._$AH[n]=l}s&&!i&&this.j(t)}j(t){t===qt?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=t?t:"")}}class Xt extends Gt{constructor(){super(...arguments),this.type=3}j(t){this.element[this.name]=t===qt?void 0:t}}const Yt=At?At.emptyScript:"";class Qt extends Gt{constructor(){super(...arguments),this.type=4}j(t){t&&t!==qt?this.element.setAttribute(this.name,Yt):this.element.removeAttribute(this.name)}}class te extends Gt{constructor(t,e,r,i,o){super(t,e,r,i,o),this.type=5}_$AI(t,e=this){var r;if((t=null!==(r=Jt(this,t,e,0))&&void 0!==r?r:qt)===Bt)return;const i=this._$AH,o=t===qt&&i!==qt||t.capture!==i.capture||t.once!==i.once||t.passive!==i.passive,s=t!==qt&&(i===qt||o);o&&this.element.removeEventListener(this.name,this,i),s&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){var e,r;"function"==typeof this._$AH?this._$AH.call(null!==(r=null===(e=this.options)||void 0===e?void 0:e.host)&&void 0!==r?r:this.element,t):this._$AH.handleEvent(t)}}class ee{constructor(t,e,r){this.element=t,this.type=6,this._$AN=void 0,this._$AM=e,this.options=r}get _$AU(){return this._$AM._$AU}_$AI(t){Jt(this,t)}}const re=bt.litHtmlPolyfillSupport;null==re||re(Wt,Zt),(null!==($t=bt.litHtmlVersions)&&void 0!==$t?$t:bt.litHtmlVersions=[]).push("2.7.4");const ie=window,oe=ie.ShadowRoot&&(void 0===ie.ShadyCSS||ie.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,se=Symbol(),ne=new WeakMap;class le{constructor(t,e,r){if(this._$cssResult$=!0,r!==se)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const e=this.t;if(oe&&void 0===t){const r=void 0!==e&&1===e.length;r&&(t=ne.get(e)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),r&&ne.set(e,t))}return t}toString(){return this.cssText}}const ae=(t,...e)=>{const r=1===t.length?t[0]:e.reduce(((e,r,i)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if("number"==typeof t)return t;throw Error("Value passed to 'css' function must be a 'css' function result: "+t+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(r)+t[i+1]),t[0]);return new le(r,t,se)},he=oe?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const r of t.cssRules)e+=r.cssText;return(t=>new le("string"==typeof t?t:t+"",void 0,se))(e)})(t):t;var ce;const de=window,ue=de.trustedTypes,pe=ue?ue.emptyScript:"",fe=de.reactiveElementPolyfillSupport,ve={toAttribute(t,e){switch(e){case Boolean:t=t?pe:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){let r=t;switch(e){case Boolean:r=null!==t;break;case Number:r=null===t?null:Number(t);break;case Object:case Array:try{r=JSON.parse(t)}catch(t){r=null}}return r}},ge=(t,e)=>e!==t&&(e==e||t==t),me={attribute:!0,type:String,converter:ve,reflect:!1,hasChanged:ge};class ye extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(t){var e;this.finalize(),(null!==(e=this.h)&&void 0!==e?e:this.h=[]).push(t)}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((e,r)=>{const i=this._$Ep(r,e);void 0!==i&&(this._$Ev.set(i,r),t.push(i))})),t}static createProperty(t,e=me){if(e.state&&(e.attribute=!1),this.finalize(),this.elementProperties.set(t,e),!e.noAccessor&&!this.prototype.hasOwnProperty(t)){const r="symbol"==typeof t?Symbol():"__"+t,i=this.getPropertyDescriptor(t,r,e);void 0!==i&&Object.defineProperty(this.prototype,t,i)}}static getPropertyDescriptor(t,e,r){return{get(){return this[e]},set(i){const o=this[t];this[e]=i,this.requestUpdate(t,o,r)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||me}static finalize(){if(this.hasOwnProperty("finalized"))return!1;this.finalized=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),void 0!==t.h&&(this.h=[...t.h]),this.elementProperties=new Map(t.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const t=this.properties,e=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const r of e)this.createProperty(r,t[r])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(t){const e=[];if(Array.isArray(t)){const r=new Set(t.flat(1/0).reverse());for(const t of r)e.unshift(he(t))}else void 0!==t&&e.push(he(t));return e}static _$Ep(t,e){const r=e.attribute;return!1===r?void 0:"string"==typeof r?r:"string"==typeof t?t.toLowerCase():void 0}u(){var t;this._$E_=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(t=this.constructor.h)||void 0===t||t.forEach((t=>t(this)))}addController(t){var e,r;(null!==(e=this._$ES)&&void 0!==e?e:this._$ES=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(r=t.hostConnected)||void 0===r||r.call(t))}removeController(t){var e;null===(e=this._$ES)||void 0===e||e.splice(this._$ES.indexOf(t)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((t,e)=>{this.hasOwnProperty(e)&&(this._$Ei.set(e,this[e]),delete this[e])}))}createRenderRoot(){var t;const e=null!==(t=this.shadowRoot)&&void 0!==t?t:this.attachShadow(this.constructor.shadowRootOptions);return((t,e)=>{oe?t.adoptedStyleSheets=e.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):e.forEach((e=>{const r=document.createElement("style"),i=ie.litNonce;void 0!==i&&r.setAttribute("nonce",i),r.textContent=e.cssText,t.appendChild(r)}))})(e,this.constructor.elementStyles),e}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostConnected)||void 0===e?void 0:e.call(t)}))}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostDisconnected)||void 0===e?void 0:e.call(t)}))}attributeChangedCallback(t,e,r){this._$AK(t,r)}_$EO(t,e,r=me){var i;const o=this.constructor._$Ep(t,r);if(void 0!==o&&!0===r.reflect){const s=(void 0!==(null===(i=r.converter)||void 0===i?void 0:i.toAttribute)?r.converter:ve).toAttribute(e,r.type);this._$El=t,null==s?this.removeAttribute(o):this.setAttribute(o,s),this._$El=null}}_$AK(t,e){var r;const i=this.constructor,o=i._$Ev.get(t);if(void 0!==o&&this._$El!==o){const t=i.getPropertyOptions(o),s="function"==typeof t.converter?{fromAttribute:t.converter}:void 0!==(null===(r=t.converter)||void 0===r?void 0:r.fromAttribute)?t.converter:ve;this._$El=o,this[o]=s.fromAttribute(e,t.type),this._$El=null}}requestUpdate(t,e,r){let i=!0;void 0!==t&&(((r=r||this.constructor.getPropertyOptions(t)).hasChanged||ge)(this[t],e)?(this._$AL.has(t)||this._$AL.set(t,e),!0===r.reflect&&this._$El!==t&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(t,r))):i=!1),!this.isUpdatePending&&i&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((t,e)=>this[e]=t)),this._$Ei=void 0);let e=!1;const r=this._$AL;try{e=this.shouldUpdate(r),e?(this.willUpdate(r),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostUpdate)||void 0===e?void 0:e.call(t)})),this.update(r)):this._$Ek()}catch(t){throw e=!1,this._$Ek(),t}e&&this._$AE(r)}willUpdate(t){}_$AE(t){var e;null===(e=this._$ES)||void 0===e||e.forEach((t=>{var e;return null===(e=t.hostUpdated)||void 0===e?void 0:e.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(t){return!0}update(t){void 0!==this._$EC&&(this._$EC.forEach(((t,e)=>this._$EO(e,this[e],t))),this._$EC=void 0),this._$Ek()}updated(t){}firstUpdated(t){}}var _e,$e;ye.finalized=!0,ye.elementProperties=new Map,ye.elementStyles=[],ye.shadowRootOptions={mode:"open"},null==fe||fe({ReactiveElement:ye}),(null!==(ce=de.reactiveElementVersions)&&void 0!==ce?ce:de.reactiveElementVersions=[]).push("1.6.1");class be extends ye{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var t,e;const r=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=r.firstChild),r}update(t){const e=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=((t,e,r)=>{var i,o;const s=null!==(i=null==r?void 0:r.renderBefore)&&void 0!==i?i:e;let n=s._$litPart$;if(void 0===n){const t=null!==(o=null==r?void 0:r.renderBefore)&&void 0!==o?o:null;s._$litPart$=n=new Zt(e.insertBefore(Rt(),t),t,void 0,null!=r?r:{})}return n._$AI(t),n})(e,this.renderRoot,this.renderOptions)}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!0)}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!1)}render(){return Bt}}be.finalized=!0,be._$litElement$=!0,null===(_e=globalThis.litElementHydrateSupport)||void 0===_e||_e.call(globalThis,{LitElement:be});const Ae=globalThis.litElementPolyfillSupport;null==Ae||Ae({LitElement:be}),(null!==($e=globalThis.litElementVersions)&&void 0!==$e?$e:globalThis.litElementVersions=[]).push("3.3.2");const we=t=>e=>"function"==typeof e?((t,e)=>(customElements.define(t,e),e))(t,e):((t,e)=>{const{kind:r,elements:i}=e;return{kind:r,elements:i,finisher(e){customElements.define(t,e)}}})(t,e),xe=(t,e)=>"method"===e.kind&&e.descriptor&&!("value"in e.descriptor)?{...e,finisher(r){r.createProperty(e.key,t)}}:{kind:"field",key:Symbol(),placement:"own",descriptor:{},originalKey:e.key,initializer(){"function"==typeof e.initializer&&(this[e.key]=e.initializer.call(this))},finisher(r){r.createProperty(e.key,t)}};function Ee(t){return(e,r)=>void 0!==r?((t,e,r)=>{e.constructor.createProperty(r,t)})(t,e,r):xe(t,e)}function Se(t){return Ee({...t,state:!0})}var Ce;null===(Ce=window.HTMLSlotElement)||void 0===Ce||Ce.prototype.assignedElements;const Pe=ae`
  #wysiwyg-editor {
    display: inline-block;
    border: none;
    padding: 4px;
    caret-color: var(--fe-caret-color, #fff);
    color: var(--fe-text-color, #f7f1ff);
    line-height: 1.1;
    width: 100%;
    height: 100%;
    border-radius: var(--fe-border-radius, 4px) var(--fe-border-radius, 4px) 0px
      0px;
    overflow: auto;
    border: 2px solid black;
    outline: 0px solid black;
    white-space: pre-wrap;
    background-color: var(--fe-background-color, #222222);
    margin: 0px;
  }

  #wysiwyg-err {
    width: 100%;
    border-radius: 0px 0px var(--fe-border-radius, 4px)
      var(--fe-border-radius, 4px);
    color: var(--fe-err-text-color, #fc514f);
    border: 2px solid black;
    /* border-top: 0px; */
    background-color: var(--fe-background-color, #222222);
    padding: 4px;
    margin: 0px 0px 8px 0px;
  }

  .wysiwyg-no-err {
    color: #098668 !important;
  }

  .wysiwygInternals.error {
    text-decoration: underline;
    -webkit-text-decoration-color: var(--fe-err-underline-color, #fc514f);
    text-decoration-color: var(--fe-err-underline-color, #fc514f);
    -webkit-text-decoration-style: wavy;
    text-decoration-style: wavy;
    text-decoration-thickness: 1px;
    text-decoration-color: var(--fe-err-underline-color, red);
  }

  .wysiwygInternals.bracket {
    color: var(--fe-bracket-color, #fc514f);
  }

  .wysiwygInternals.operator {
    font-weight: bold;
    color: var(--fe-operator-color, #fc618d);
  }

  .wysiwygInternals.variable {
    color: var(--fe-variable-color, #fc618d);
  }
`,Re=(It`
  <style>
    .primary-text-underlined {
      font-family: var(--theme-font);
      border: none;
      font-size: var(--secondary-font-size, 16px);
      color: var(--primary-color, #205081);
      padding: 0;
      margin: 0;
      border-radius: 0;
      min-width: max-content;
      text-transform: none;
      border-bottom: 1px solid rgba(var(--secondary-color-rgb), 0.3);
    }

    .secondary-text-underlined {
      font-family: var(--theme-font);
      border: none;
      font-size: var(--secondary-font-size, 16px);
      color: var(--secondary-color, #515151);
      margin: 0;
      padding: 0;
      border-radius: 0;
      min-width: max-content;
      text-transform: none;
      border-bottom: 1px solid rgba(var(--secondary-color-rgb), 0.3);
    }
  </style>
`,It`
  <style>
    .primary-text-button {
      font-family: var(--theme-font);
      border: none;
      font-size: var(--secondary-font-size, 16px);
      color: var(--primary-color, #205081);
      padding: 0 8px;
      min-width: 64px;
      height: var(--button-height, 36px);
      margin: 0;
      text-transform: none;
    }

    .secondary-text-button {
      font-family: var(--theme-font);
      border: none;
      font-size: var(--secondary-font-size, 16px);
      color: var(--secondary-color, #515151);
      padding: 0 8px;
      min-width: 64px;
      margin: 0;
      height: var(--button-height, 36px);
      text-transform: none;
    }

    .primary-text-button:hover {
      font-weight: bold;
    }

    .secondary-text-button:hover {
      font-weight: bold;
    }

    .primary-text-button[disabled], .secondary-text-button[disabled] {
        opacity: 0.5;
    }
  </style>
`);It`
  <style>
    .primary-outlined {
      font-family: var(--theme-font);
      border: 1px solid var(--primary-color, #205081);
      border-radius: 5px;
      font-size: var(--secondary-font-size, 16px);
      color: var(--secondary-color, #515151);
      padding: 0 var(--button-padding, 16px);
      min-width: 64px;
      margin: 0;
      height: var(--button-height, 36px);
      text-transform: none;
    }
    .primary-outlined:hover {
      background-color: var(--primary-color, #205081);
      color: var(--light-color, #fff);
    }
    .primary-colored {
      font-family: var(--theme-font);
      background-color: var(--primary-color, #205081);
      border-radius: 5px;
      font-size: var(--secondary-font-size, 16px);
      color: var(--light-color, #fff);
      margin: 0;
      padding: 0 var(--button-padding, 16px);
      min-width: 64px;
      height: var(--button-height, 36px);
      text-transform: none;
    }
    .primary-colored:hover {
      box-shadow: 0 1px 2px 1px var(--primary-color, #205081);
    }
    .primary-outlined[disabled], .primary-colored[disabled] {
        opacity: 0.5;
    }
  </style>
`,It`
  <style>
    .secondary-outlined {
      font-family: var(--theme-font);
      border: 1px solid rgba(var(--secondary-color-rgb), 0.3);
      border-radius: 5px;
      font-size: var(--secondary-font-size, 16px);
      color: var(--secondary-color, #515151);
      padding: 0 var(--button-padding, 16px);
      margin: 0;
      min-width: 64px;
      height: var(--button-height, 36px);
      text-transform: none;
    }

    .secondary-outlined:hover {
      background-color: var(--secondary-color, #515151);
      color: var(--light-color, #fff);
    }

    .secondary-colored {
      font-family: var(--theme-font);
      background-color: var(--secondary-color, #515151);
      border-radius: 5px;
      font-size: var(--secondary-font-size, 16px);
      color: var(--light-color, #fff);
      padding: 0 var(--button-padding, 16px);
      margin: 0;
      min-width: 64px;
      height: var(--button-height, 36px);
      text-transform: none;
    }

    .secondary-colored:hover {
      box-shadow: 0 1px 2px 1px var(--secondary-color, #515151);
    }

    .secondary-outlined[disabled], .secondary-colored[disabled] {
        opacity: 0.5;
    }
  </style>
`,It`
  <style>
    .alert-outlined {
      font-family: var(--theme-font);
      border: 1px solid var(--error-color);
      border-radius: 5px;
      font-size: var(--secondary-font-size, 16px);
      color: var(--error-color, #d50000);
      padding: 0 var(--button-padding, 16px);
      margin: 0;
      min-width: 64px;
      height: var(--button-height, 36px);
      text-transform: none;
    }

    .alert-outlined:hover {
      background-color: var(--error-color-l1, #db4437);
      color: var(--light-color, #fff);
    }

    .alert-colored {
      font-family: var(--theme-font);
      background-color: var(--error-color, #d50000);
      border-radius: 5px;
      font-size: var(--secondary-font-size, 16px);
      color: var(--light-color, #fff);
      padding: 0 var(--button-padding, 16px);
      margin: 0;
      min-width: 64px;
      height: var(--button-height, 36px);
      text-transform: none;
    }

    .alert-colored:hover {
      box-shadow: 0 1px 2px 1px var(--error-color, #d50000);
    }

    .alert-outlined[disabled], .alert-colored[disabled] {
        opacity: 0.5;
    }
  </style>
`,It`
  <style>
    .toggle-group {
      display: flex; justify-content: flex-end; align-items: center; flex-wrap: wrap;
    }

    .toggle-group .toggle:first-child{
      border-top-left-radius: 5px; border-bottom-left-radius: 5px;
    }
    .toggle-group .toggle:last-child{
      border-top-right-radius: 5px; border-bottom-right-radius: 5px;
    }

    .toggle {
      text-transform: none;
      margin: 0px;
      border-radius: 0px;
      background-color: transparent;
      border: 1px solid var(--secondary-color-l3);
      color: var(--secondary-color);
      font-size: var(--secondary-font-size, 16px);
      font-family: var(--theme-font);
      display: flex;
      justify-content: space-around;
      min-width: 64px;
      align-items: center;
    }

    .toggle.small {
      height: 30px;
      font-size: var(--tertiary-font-size, 14px);
    }

    .toggle:hover {
      box-shadow: 0 1px 2px 1px rgba(var(--secondary-color-rgb), 0.1);
    }

    .selected-toggle {
      background-color: var(--secondary-color);
      color: var(--light-color, #fff);
    }

    .toggle iron-icon{
      --iron-icon-height: var(--body-font-size, 16px);
      margin-right: 5px;
    }

    .toggle mwc-icon{
      --mdc-icon-size: var(--body-font-size, 16px);
      margin-right: 5px;
    }
  </style>
`,It`
  <style>
    paper-fab {
      position: fixed;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      bottom: 3%;
      right: 2%;
    }

    paper-fab[disabled], .fab[disabled] {
        opacity: 0.5;
    }

    .fab {
      font-size: var(--secondary-font-size, 16px);
      position: fixed;
      display: flex;
      justify-content: center;
      align-items: center;
      bottom: 3%;
      right: 2%;
      box-shadow: var(--paper-material-elevation-2_-_box-shadow);
      font-family: var(--theme-font);
    }

    .colored-fab {
      background-color: var(--secondary-color, #515151);
      --iron-icon-height: var(--h2-font-size, 26px);
      --iron-icon-width: var(--h2-font-size, 26px);
      color: var(--light-color, #fff);
    }

    .light-colored-fab {
      background-color: var(--light-color, #fff);
      --iron-icon-height: var(--h2-font-size, 20px);
      --iron-icon-width: var(--h2-font-size, 20px);
      color: var(--secondary-color);
      /* --iron-icon-stroke-color: var(--secondary-color); */
    }

    .light-colored-fab:hover,
    .colored-fab:hover {
      box-shadow: var(--paper-material-elevation-3_-_box-shadow);
      font-weight: bold;
    }

    .rectangular-fab {
      height:  var(--rectangular-fab-height, 50px);
      width: var(--rectangular-fab-width, 120px);
      border-radius:  var(--rectangular-fab-height, 50px);
      padding: var(--rectangular-fab-padding, 0px);
      max-height: var(--rectangular-fab-max-height, 50px);
      z-index:  var(--rectangular-fab-z-index, 1);
    }
    .small-fab {
      height: 50px;
      width: 50px;
      padding: 5px;
    }
    @media all and (max-width: 767px) {
      .rectangular-fab {
        height: var(--rectangular-fab-height, 40px);
        width: var(--rectangular-fab-width, 120px);
        border-radius: 50px;
        padding: 0;
        --fab-icon-height: 40px;
      }
    }
  </style>
`,It`
  <style>
    .colored-bt-spinner {
      width: 18px;
      height: 18px;
      --paper-spinner-color: var(--light-color, #fff);
      --paper-spinner-stroke-width: 3px;
      margin-right: 8px;
    }

    .secondary-outlined-bt-spinner {
      width: 18px;
      height: 18px;
      --paper-spinner-color: var(--secondary-color, #fff);
      --paper-spinner-stroke-width: 3px;
      margin-right: 8px;
    }

    .primary-outlined-bt-spinner {
      width: 18px;
      height: 18px;
      --paper-spinner-color: var(--primary-color, #fff);
      --paper-spinner-stroke-width: 3px;
      margin-right: 8px;
    }

    .button-prefix-icon {
      --iron-icon-height: var(--body-font-size, 16px);
      --mdc-icon-size: var(--body-font-size, 16px);
      margin-right: 5px;
    }
  </style>
`,It`
  <style>
    .small-button {
      height: 25px !important;
      width: auto !important;
      padding: 0px !important;
      font-size: var(--tertiary-font-size) !important;
    }
    @media all and (max-width: 767px) {
      .small-button{
        height: 20px !important;
      }
    }
  </style>
`,It`
  <custom-style>
    <style>
      paper-toggle-button {
        font-family: var(--theme-font);
        cursor: pointer;
        --paper-toggle-button-checked-button: {
          height: 15px;
          width: 50%;
          border-radius: 0;
          bottom: 2px;
          box-shadow: none;
          border-bottom-right-radius : 8px;
          border-top-right-radius: 8px;
        }
        --paper-toggle-button-unchecked-button: {
          height: 15px;
          width: 50%;
          border-radius: 0;
          bottom: 2px;
          box-shadow: none;
          border-bottom-left-radius : 8px;
          border-top-left-radius: 8px;
        }
        --paper-toggle-button-unchecked-bar: {
          height: 15px;
          bottom: 2px;
          box-shadow: none;
        }
        --paper-toggle-button-checked-bar: {
          height: 15px;
          bottom: 2px;
          box-shadow: none;
        }
        --paper-toggle-button-label-color: var(--secondary-color);
        align-items: flex-start;
      }

      paper-toggle-button.primary-colored {
        --paper-toggle-button-unchecked-bar-color: var(--secondary-color-l1);
        --paper-toggle-button-unchecked-button-color:  var(--secondary-color-l1);
        --paper-toggle-button-checked-bar-color:  var(--primary-color-l1);
        --paper-toggle-button-checked-button-color:  var(--primary-color);
      }

      paper-toggle-button.secondary-colored {
        --paper-toggle-button-unchecked-bar-color: var(--secondary-color-l2);
        --paper-toggle-button-unchecked-button-color:  var(--secondary-color-l2);
        --paper-toggle-button-checked-bar-color:  var(--secondary-color-l1);
        --paper-toggle-button-checked-button-color:  var(--secondary-color);
      }
    </style>
  </custom-style>
`;var ke=1e6,Ue="[big.js] ",Ne=Ue+"Invalid ",Oe=Ne+"decimal places",ze=Ne+"rounding mode",Te=Ue+"Division by zero",He={},Me=void 0,je=/^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;function De(t,e,r,i){var o=t.c;if(r===Me&&(r=t.constructor.RM),0!==r&&1!==r&&2!==r&&3!==r)throw Error(ze);if(e<1)i=3===r&&(i||!!o[0])||0===e&&(1===r&&o[0]>=5||2===r&&(o[0]>5||5===o[0]&&(i||o[1]!==Me))),o.length=1,i?(t.e=t.e-e+1,o[0]=1):o[0]=t.e=0;else if(e<o.length){if(i=1===r&&o[e]>=5||2===r&&(o[e]>5||5===o[e]&&(i||o[e+1]!==Me||1&o[e-1]))||3===r&&(i||!!o[0]),o.length=e,i)for(;++o[--e]>9;)if(o[e]=0,0===e){++t.e,o.unshift(1);break}for(e=o.length;!o[--e];)o.pop()}return t}function Le(t,e,r){var i=t.e,o=t.c.join(""),s=o.length;if(e)o=o.charAt(0)+(s>1?"."+o.slice(1):"")+(i<0?"e":"e+")+i;else if(i<0){for(;++i;)o="0"+o;o="0."+o}else if(i>0)if(++i>s)for(i-=s;i--;)o+="0";else i<s&&(o=o.slice(0,i)+"."+o.slice(i));else s>1&&(o=o.charAt(0)+"."+o.slice(1));return t.s<0&&r?"-"+o:o}He.abs=function(){var t=new this.constructor(this);return t.s=1,t},He.cmp=function(t){var e,r=this,i=r.c,o=(t=new r.constructor(t)).c,s=r.s,n=t.s,l=r.e,a=t.e;if(!i[0]||!o[0])return i[0]?s:o[0]?-n:0;if(s!=n)return s;if(e=s<0,l!=a)return l>a^e?1:-1;for(n=(l=i.length)<(a=o.length)?l:a,s=-1;++s<n;)if(i[s]!=o[s])return i[s]>o[s]^e?1:-1;return l==a?0:l>a^e?1:-1},He.div=function(t){var e=this,r=e.constructor,i=e.c,o=(t=new r(t)).c,s=e.s==t.s?1:-1,n=r.DP;if(n!==~~n||n<0||n>ke)throw Error(Oe);if(!o[0])throw Error(Te);if(!i[0])return t.s=s,t.c=[t.e=0],t;var l,a,h,c,d,u=o.slice(),p=l=o.length,f=i.length,v=i.slice(0,l),g=v.length,m=t,y=m.c=[],_=0,$=n+(m.e=e.e-t.e)+1;for(m.s=s,s=$<0?0:$,u.unshift(0);g++<l;)v.push(0);do{for(h=0;h<10;h++){if(l!=(g=v.length))c=l>g?1:-1;else for(d=-1,c=0;++d<l;)if(o[d]!=v[d]){c=o[d]>v[d]?1:-1;break}if(!(c<0))break;for(a=g==l?o:u;g;){if(v[--g]<a[g]){for(d=g;d&&!v[--d];)v[d]=9;--v[d],v[g]+=10}v[g]-=a[g]}for(;!v[0];)v.shift()}y[_++]=c?h:++h,v[0]&&c?v[g]=i[p]||0:v=[i[p]]}while((p++<f||v[0]!==Me)&&s--);return y[0]||1==_||(y.shift(),m.e--,$--),_>$&&De(m,$,r.RM,v[0]!==Me),m},He.eq=function(t){return 0===this.cmp(t)},He.gt=function(t){return this.cmp(t)>0},He.gte=function(t){return this.cmp(t)>-1},He.lt=function(t){return this.cmp(t)<0},He.lte=function(t){return this.cmp(t)<1},He.minus=He.sub=function(t){var e,r,i,o,s=this,n=s.constructor,l=s.s,a=(t=new n(t)).s;if(l!=a)return t.s=-a,s.plus(t);var h=s.c.slice(),c=s.e,d=t.c,u=t.e;if(!h[0]||!d[0])return d[0]?t.s=-a:h[0]?t=new n(s):t.s=1,t;if(l=c-u){for((o=l<0)?(l=-l,i=h):(u=c,i=d),i.reverse(),a=l;a--;)i.push(0);i.reverse()}else for(r=((o=h.length<d.length)?h:d).length,l=a=0;a<r;a++)if(h[a]!=d[a]){o=h[a]<d[a];break}if(o&&(i=h,h=d,d=i,t.s=-t.s),(a=(r=d.length)-(e=h.length))>0)for(;a--;)h[e++]=0;for(a=e;r>l;){if(h[--r]<d[r]){for(e=r;e&&!h[--e];)h[e]=9;--h[e],h[r]+=10}h[r]-=d[r]}for(;0===h[--a];)h.pop();for(;0===h[0];)h.shift(),--u;return h[0]||(t.s=1,h=[u=0]),t.c=h,t.e=u,t},He.mod=function(t){var e,r=this,i=r.constructor,o=r.s,s=(t=new i(t)).s;if(!t.c[0])throw Error(Te);return r.s=t.s=1,e=1==t.cmp(r),r.s=o,t.s=s,e?new i(r):(o=i.DP,s=i.RM,i.DP=i.RM=0,r=r.div(t),i.DP=o,i.RM=s,this.minus(r.times(t)))},He.neg=function(){var t=new this.constructor(this);return t.s=-t.s,t},He.plus=He.add=function(t){var e,r,i,o=this,s=o.constructor;if(t=new s(t),o.s!=t.s)return t.s=-t.s,o.minus(t);var n=o.e,l=o.c,a=t.e,h=t.c;if(!l[0]||!h[0])return h[0]||(l[0]?t=new s(o):t.s=o.s),t;if(l=l.slice(),e=n-a){for(e>0?(a=n,i=h):(e=-e,i=l),i.reverse();e--;)i.push(0);i.reverse()}for(l.length-h.length<0&&(i=h,h=l,l=i),e=h.length,r=0;e;l[e]%=10)r=(l[--e]=l[e]+h[e]+r)/10|0;for(r&&(l.unshift(r),++a),e=l.length;0===l[--e];)l.pop();return t.c=l,t.e=a,t},He.pow=function(t){var e=this,r=new e.constructor("1"),i=r,o=t<0;if(t!==~~t||t<-1e6||t>1e6)throw Error(Ne+"exponent");for(o&&(t=-t);1&t&&(i=i.times(e)),t>>=1;)e=e.times(e);return o?r.div(i):i},He.prec=function(t,e){if(t!==~~t||t<1||t>ke)throw Error(Ne+"precision");return De(new this.constructor(this),t,e)},He.round=function(t,e){if(t===Me)t=0;else if(t!==~~t||t<-ke||t>ke)throw Error(Oe);return De(new this.constructor(this),t+this.e+1,e)},He.sqrt=function(){var t,e,r,i=this,o=i.constructor,s=i.s,n=i.e,l=new o("0.5");if(!i.c[0])return new o(i);if(s<0)throw Error(Ue+"No square root");0===(s=Math.sqrt(i+""))||s===1/0?((e=i.c.join("")).length+n&1||(e+="0"),n=((n+1)/2|0)-(n<0||1&n),t=new o(((s=Math.sqrt(e))==1/0?"5e":(s=s.toExponential()).slice(0,s.indexOf("e")+1))+n)):t=new o(s+""),n=t.e+(o.DP+=4);do{r=t,t=l.times(r.plus(i.div(r)))}while(r.c.slice(0,n).join("")!==t.c.slice(0,n).join(""));return De(t,(o.DP-=4)+t.e+1,o.RM)},He.times=He.mul=function(t){var e,r=this,i=r.constructor,o=r.c,s=(t=new i(t)).c,n=o.length,l=s.length,a=r.e,h=t.e;if(t.s=r.s==t.s?1:-1,!o[0]||!s[0])return t.c=[t.e=0],t;for(t.e=a+h,n<l&&(e=o,o=s,s=e,h=n,n=l,l=h),e=new Array(h=n+l);h--;)e[h]=0;for(a=l;a--;){for(l=0,h=n+a;h>a;)l=e[h]+s[a]*o[h-a-1]+l,e[h--]=l%10,l=l/10|0;e[h]=l}for(l?++t.e:e.shift(),a=e.length;!e[--a];)e.pop();return t.c=e,t},He.toExponential=function(t,e){var r=this,i=r.c[0];if(t!==Me){if(t!==~~t||t<0||t>ke)throw Error(Oe);for(r=De(new r.constructor(r),++t,e);r.c.length<t;)r.c.push(0)}return Le(r,!0,!!i)},He.toFixed=function(t,e){var r=this,i=r.c[0];if(t!==Me){if(t!==~~t||t<0||t>ke)throw Error(Oe);for(t=t+(r=De(new r.constructor(r),t+r.e+1,e)).e+1;r.c.length<t;)r.c.push(0)}return Le(r,!1,!!i)},He[Symbol.for("nodejs.util.inspect.custom")]=He.toJSON=He.toString=function(){var t=this,e=t.constructor;return Le(t,t.e<=e.NE||t.e>=e.PE,!!t.c[0])},He.toNumber=function(){var t=Number(Le(this,!0,!0));if(!0===this.constructor.strict&&!this.eq(t.toString()))throw Error(Ue+"Imprecise conversion");return t},He.toPrecision=function(t,e){var r=this,i=r.constructor,o=r.c[0];if(t!==Me){if(t!==~~t||t<1||t>ke)throw Error(Ne+"precision");for(r=De(new i(r),t,e);r.c.length<t;)r.c.push(0)}return Le(r,t<=r.e||r.e<=i.NE||r.e>=i.PE,!!o)},He.valueOf=function(){var t=this,e=t.constructor;if(!0===e.strict)throw Error(Ue+"valueOf disallowed");return Le(t,t.e<=e.NE||t.e>=e.PE,!0)};var Ie=function t(){function e(r){var i=this;if(!(i instanceof e))return r===Me?t():new e(r);if(r instanceof e)i.s=r.s,i.e=r.e,i.c=r.c.slice();else{if("string"!=typeof r){if(!0===e.strict&&"bigint"!=typeof r)throw TypeError(Ne+"value");r=0===r&&1/r<0?"-0":String(r)}!function(t,e){var r,i,o;if(!je.test(e))throw Error(Ne+"number");for(t.s="-"==e.charAt(0)?(e=e.slice(1),-1):1,(r=e.indexOf("."))>-1&&(e=e.replace(".","")),(i=e.search(/e/i))>0?(r<0&&(r=i),r+=+e.slice(i+1),e=e.substring(0,i)):r<0&&(r=e.length),o=e.length,i=0;i<o&&"0"==e.charAt(i);)++i;if(i==o)t.c=[t.e=0];else{for(;o>0&&"0"==e.charAt(--o););for(t.e=r-i-1,t.c=[],r=0;i<=o;)t.c[r++]=+e.charAt(i++)}}(i,r)}i.constructor=e}return e.prototype=He,e.DP=20,e.RM=1,e.NE=-7,e.PE=21,e.strict=!1,e.roundDown=0,e.roundHalfUp=1,e.roundHalfEven=2,e.roundUp=3,e}();const Be=Ie;class qe{constructor(){this._inner=[]}push(t){this._inner.push(t)}pop(){return this._inner.pop()}top(){return this._inner.at(-1)}empty(){return 0==this._inner.length}print(){console.log(this._inner)}}class Ve{constructor(){this._inner={},this._head=0,this._tail=0}enqueue(t){this._inner[this._tail]=t,this._tail++}dequeue(){if(this._tail===this._head)return;const t=this._inner[this._head];return delete this._inner[this._head],this._head++,t}peek(){return this._inner[this._head]}empty(){return this._head==this._tail}print(){console.log(this._inner)}}var Fe,We;!function(t){t[t.VARIABLE=0]="VARIABLE",t[t.OPERATOR=1]="OPERATOR",t[t.UNDEF=2]="UNDEF"}(Fe||(Fe={}));class Je{constructor(t,e){this._minSuggestionLen=e>0?e:1,this._trie=new Ke,this._trie.insertAll();for(let e of t)this.insert(e[0])}insert(t,e=-1,r=void 0){-1!=e?e!=t.length?(r.getChild(t[e])||null==r||r.addChild(t[e]),this.insert(t,e+1,r.getChild(t[e]))):null==r||r.addChild("\0"):this.insert(t,0,this._trie)}getRecommendation(t){if(t.length<this._minSuggestionLen)return null;let e=[],r=0,i=this._trie;for(;i&&r<t.length;)i=i.getChild(t[r]),r++;return i?(this._traverseAndGet(e,i,t,r),0==e.length||1==e.length&&e[0]==t?null:e):null}_traverseAndGet(t,e,r,i,o=""){for(let s of e.children)"\0"==s[0]&&t.push(r+o),this._traverseAndGet(t,s[1],r,i,o+s[0])}}class Ke{constructor(){this._children=new Map}get children(){return this._children}insertAll(){for(let t=0;t<26;t++)this._children.set(String.fromCharCode(t+97),new Ke)}getChild(t){return this._children.get(t)}addChild(t){this._children.set(t,new Ke)}}class Ze{constructor(t,e){this.mathematicalOperators=new Set(["+","-","*","/"]),this.operatorPrecedence={"^":3,"/":2,"*":2,"+":1,"-":1},this.variables=t,this._recommender=new Je(this.variables,e)}parseInput(t,e=null,r=null){let i=t.split(/([-+(),*/:?\s])/g),o=new qe,s="",n=Fe.VARIABLE,l=0,a=0,h="",c={recommendations:null,formattedContent:null,formattedString:null,newCursorPosition:null!=e?e:-1,errorStr:null};i.forEach((i=>{let d=this.variables.has(i)||r&&this.variables.has(r)||!Number.isNaN(Number(i)),u=this.mathematicalOperators.has(i),p=""==i.trim(),f="("==i||")"==i;if(p)return s=`${s}${i}`,a+=i.length,void console.log("isSpace",i.length);a<=e&&a+i.length>=e&&!c.recommendations&&(r&&(c.newCursorPosition=Math.min(c.newCursorPosition+r.length-i.length,t.length+r.length-i.length),i=r,r=null),c.recommendations=this._recommender.getRecommendation(i));let v="";"("==i?(l++,o.push(a),v+=" bracket"):")"==i?(o.pop(),l--,v+=" bracket"):u&&(v+=" operator"),(n==Fe.UNDEF||n==Fe.VARIABLE&&!d&&!f||n==Fe.OPERATOR&&!u||")"==i&&"("==h||!(d||u||f)||d&&"/"==h&&(0==this.variables.get(i)||0==Number(i)))&&(v+=" error"),c.errorStr||(l<0?(c.errorStr=`Unexpected ')' at pos: ${a}`,n=Fe.UNDEF):n!=Fe.VARIABLE||d||f?n!=Fe.OPERATOR||u||")"==i?d||u||f?!d||"/"!=h||0!=this.variables.get(i)&&0!=Number(i)?"("==h&&")"==i&&(c.errorStr=`Empty brackets at position ${a}`,n=Fe.UNDEF):(c.errorStr=`Division by zero at pos: ${a}`,n=Fe.UNDEF):(c.errorStr=`Unknown word at pos: ${a}`,n=Fe.UNDEF):(c.errorStr=`Expected mathematical operator at pos: ${a}`,n=Fe.UNDEF):(c.errorStr=`Expected variable/number at pos: ${a}`,n=Fe.UNDEF)),n!=Fe.UNDEF&&("("==i||u?n=Fe.VARIABLE:(")"==i||d)&&(n=Fe.OPERATOR)),s=`${s}<span class="wysiwygInternals ${v}">${i}</span>`,a+=i.length,h=i})),this.mathematicalOperators.has(h)&&(c.errorStr="Unexpected ending of formula.");const d=(new DOMParser).parseFromString(s,"text/html");return c.formattedContent=d.querySelector("body"),c.formattedString=s,o.empty()||(c.errorStr=`Unclosed '(' at position: ${o.top()}`),c}buildRPN(t){if(this.parseInput(t).errorStr)return null;let e=t.split(/([-+(),*/:?\s])/g).filter((t=>!/\s+/.test(t)&&""!==t));const r=new qe,i=new Ve;for(let t of e)if("("==t)r.push("(");else if(")"==t){for(;"("!=r.top();)i.enqueue(r.pop());r.pop()}else if(this.mathematicalOperators.has(t)){for(;this.mathematicalOperators.has(r.top())&&this.operatorPrecedence[t]<=this.operatorPrecedence[r.top()];)i.enqueue(r.pop());r.push(t)}else Number.isNaN(t)||""==t||i.enqueue(t);for(;r.top();)i.enqueue(r.pop());return i}addParens(t){const e=this.buildRPN(t);if(!e)return null;let r="";for(;!e.empty();)r+=e.dequeue()+" ";let i=r.split(/\s+/g).filter((t=>!/\s+/.test(t)&&""!==t)),o=new qe,s=new qe;if(i.forEach((t=>{let e,r;if(this.variables.has(t)||!isNaN(parseFloat(t))&&isFinite(parseFloat(t)))s.push(t),o.push(null);else{if(!Object.keys(this.operatorPrecedence).includes(t))throw`${t} is not a recognized symbol`;{let[i,n,l,a]=[s.pop(),s.pop(),o.pop(),o.pop()];r=this.operatorPrecedence[a]<=this.operatorPrecedence[t]||this.operatorPrecedence[a]===this.operatorPrecedence[t]&&["/","-"].includes(t)?`(${n})`:`${n}`,e=this.operatorPrecedence[l]<=this.operatorPrecedence[t]||this.operatorPrecedence[l]===this.operatorPrecedence[t]&&["/","-"].includes(t)?`(${i})`:`${i}`,s.push(`${r} ${t} ${e}`),o.push(t)}}})),s.empty())throw`${r} is not a correct RPN`;return s.pop()}calculate(t){var e,r,i;let o=this.buildRPN(t);if(!o)return;let s=new qe;for(;!o.empty();){const t=o.dequeue();if(this.mathematicalOperators.has(t)){let e=t,r=s.pop(),i=s.pop();try{switch(e){case"+":s.push(Be(i).add(Be(r)));break;case"-":s.push(Be(i).sub(Be(r)));break;case"*":s.push(Be(i).mul(Be(r)));break;case"/":s.push(Be(i).div(Be(r)))}}catch(t){return}}else s.push(Be(Number.parseFloat(null!==(r=null===(e=this.variables.get(t))||void 0===e?void 0:e.toString())&&void 0!==r?r:t)))}return null===(i=s.top())||void 0===i?void 0:i.toNumber()}}class Ge{static getCurrentCursorPosition(t){var e,r;let i,o=window.getSelection(),s=-1;if((null==o?void 0:o.focusNode)&&Ge._isChildOf(o.focusNode,t))for(i=o.focusNode,s=o.focusOffset;i&&i!==t;)if(i.previousSibling)i=i.previousSibling,s+=null!==(r=null===(e=i.textContent)||void 0===e?void 0:e.length)&&void 0!==r?r:0;else if(i=i.parentNode,null===i)break;return s}static setCurrentCursorPosition(t,e){if(t>=0){var r=window.getSelection();let i=Ge._createRange(e,{count:t},void 0);i&&(i.collapse(!1),null==r||r.removeAllRanges(),null==r||r.addRange(i))}}static _createRange(t,e,r){if(r||((r=document.createRange()).selectNode(t),r.setStart(t,0)),0===e.count)r.setEnd(t,e.count);else if(t&&e.count>0)if(t.nodeType===Node.TEXT_NODE)t.textContent.length<e.count?e.count-=t.textContent.length:(r.setEnd(t,e.count),e.count=0);else for(var i=0;i<t.childNodes.length&&(r=Ge._createRange(t.childNodes[i],e,r),0!==e.count);i++);return r}static _isChildOf(t,e){for(;null!==t;){if(t===e)return!0;t=t.parentNode}return!1}static getCursorRect(){var t,e;return null===(e=null===(t=window.getSelection())||void 0===t?void 0:t.getRangeAt(0))||void 0===e?void 0:e.getClientRects()[0]}}We=Ge,Ge.getCaret=t=>{const e=window.getSelection().getRangeAt(0),r=e.cloneRange();return r.selectNodeContents(t),r.setEnd(e.endContainer,e.endOffset),r.toString().length},Ge.setCaret=(t,e)=>{for(const r of e.childNodes)if(r.nodeType==Node.TEXT_NODE){if(r.length>=t){const e=document.createRange(),i=window.getSelection();return e.setStart(r,t),e.collapse(!0),i.removeAllRanges(),i.addRange(e),-1}t-=r.length}else if((t=We.setCaret(t,r))<0)return t;return t};var Xe=function(t,e,r,i){var o,s=arguments.length,n=s<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(t,e,r,i);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(n=(s<3?o(n):s>3?o(e,r,n):o(e,r))||n);return s>3&&n&&Object.defineProperty(e,r,n),n};let Ye=class extends be{constructor(){super(...arguments),this.recommendations=[],this.onClickRecommendation=t=>{}}handleKeydown(t,e){"Enter"==t.code&&(t.preventDefault(),t.stopPropagation(),this.onClickRecommendation(e))}render(){return It`
      <ul class="wysiwyg-suggestion-menu">
        ${this.recommendations.map((t=>It`<li
            tabindex="0"
            @click=${e=>this.onClickRecommendation(t)}
            @keydown=${e=>this.handleKeydown(e,t)}
          >
            ${t}
          </li>`))}
      </ul>
    `}};Ye.styles=ae`
    ul {
      border: 1px solid var(--fe-suggestion-color, white);
      color: var(--fe-suggestion-color, #bab6c0);
      background-color: var(--fe-suggestion-background-color, #363537);
      box-sizing: border-box;
      width: fit-content;
      list-style-type: none;
      padding: 4px 0px;
      margin: 2px;
    }

    li {
      margin: 0px;
      padding: 2px 6px;
      cursor: pointer;
    }

    li:focus-visible {
      /* outline: 1px solid red; */
      outline: 0px;
      color: var(--fe-suggestion-focus-color, #fce566);
      background-color: var(--fe-suggestion-focus-background-color, #69676c);
    }
  `,Xe([Ee()],Ye.prototype,"recommendations",void 0),Xe([Ee()],Ye.prototype,"onClickRecommendation",void 0),Ye=Xe([we("suggestion-menu")],Ye);var Qe=function(t,e,r,i){var o,s=arguments.length,n=s<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(t,e,r,i);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(n=(s<3?o(n):s>3?o(e,r,n):o(e,r))||n);return s>3&&n&&Object.defineProperty(e,r,n),n};let tr=class extends be{constructor(){super(),this._content="",this._formattedContent=null,this._recommendations=null,this._errorStr=null,this._calculatedResult=null,this.currentCursorPosition=null,this.currentCursorRect=void 0,this.variables=new Map,this.minSuggestionLen=2,this._parser=new Ze(this.variables,this.minSuggestionLen)}firstUpdated(t){this._parser=new Ze(this.variables,this.minSuggestionLen)}handleChange(t){console.log(t),t.preventDefault(),this._content=t.target.innerText,this.parseInput(),t.target.focus()}onClickRecommendation(t){document.getElementById("wysiwyg-editor")&&(this.parseInput(t),this.currentCursorPosition=null)}parseInput(t=null){let e=document.getElementById("wysiwyg-editor");if(!e)return;this.currentCursorPosition=t?this.currentCursorPosition:Ge.getCaret(e);const r=this._parser.parseInput(this._content,this.currentCursorPosition,t);this._recommendations=r.recommendations,this._formattedContent=r.formattedContent,this._errorStr=r.errorStr,e.innerHTML=r.formattedString,this._content=e.innerText,t&&(this._recommendations=null,this.currentCursorPosition=r.newCursorPosition),Ge.setCaret(this.currentCursorPosition,e),null==e||e.focus(),this.currentCursorRect=Ge.getCursorRect(),this.requestUpdate()}requestCalculate(){var t;if(this._parser.parseInput(this._content).errorStr)return;const e=this._parser.calculate(this._content);this._content=null!==(t=this._parser.addParens(this._content))&&void 0!==t?t:this._content,this.parseInput(),this._calculatedResult=null!=e?e:NaN,this._errorStr=null==e?"Division by zero encountered":this._errorStr,this._recommendations=null,this.requestUpdate()}requestFormat(){var t;this._content=null!==(t=this._parser.addParens(this._content))&&void 0!==t?t:this._content,this.parseInput(),this._recommendations=null,this.requestUpdate()}createRenderRoot(){return this}render(){var t,e,r,i,o;return It`
      <style>
        ${Pe}
        ${Re}
      </style>
      <div
        contenteditable
        id="wysiwyg-editor"
        spellcheck="false"
        @input=${this.handleChange}
      ></div>
      ${this._recommendations?It`<div
            style="
              position: absolute; 
              left: ${(null===(t=this.currentCursorRect)||void 0===t?void 0:t.left)+"px"}; 
              top: ${(null!==(r=null===(e=this.currentCursorRect)||void 0===e?void 0:e.top)&&void 0!==r?r:0)+window.scrollY+"px"};
            "
          >
            <suggestion-menu
              .recommendations=${this._recommendations}
              .onClickRecommendation=${t=>this.onClickRecommendation(t)}
            ></suggestion-menu>
          </div>`:It``}
      <div id="wysiwyg-err" class="${null!==(i=this._errorStr)&&void 0!==i?i:"wysiwyg-no-err"}">
        ${null!==(o=this._errorStr)&&void 0!==o?o:"No Errors"}
      </div>
      <button class="primary-text-button" @click=${this.requestCalculate}>
        Calculate
      </button>
      <button class="primary-text-button" @click=${this.requestFormat}>
        Format
      </button>
      <p>${this._calculatedResult}</p>
    `}};Qe([Se()],tr.prototype,"_content",void 0),Qe([Se()],tr.prototype,"_formattedContent",void 0),Qe([Se()],tr.prototype,"_recommendations",void 0),Qe([Se()],tr.prototype,"_errorStr",void 0),Qe([Se()],tr.prototype,"_calculatedResult",void 0),Qe([Se()],tr.prototype,"currentCursorPosition",void 0),Qe([Se()],tr.prototype,"currentCursorRect",void 0),Qe([Ee({type:Map,converter:{fromAttribute:t=>{if(t)return new Map(JSON.parse(t))},toAttribute:t=>JSON.stringify(Array.from(t.entries()))}})],tr.prototype,"variables",void 0),Qe([Ee()],tr.prototype,"minSuggestionLen",void 0),tr=Qe([we("formula-editor")],tr);let er=class extends rt{constructor(){super(...arguments),this.fm=new tr}render(){M` <formula-editor></formula-editor> `}};var rr;er=function(t,e,r,i){var o,s=arguments.length,n=s<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(t,e,r,i);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(n=(s<3?o(n):s>3?o(e,r,n):o(e,r))||n);return s>3&&n&&Object.defineProperty(e,r,n),n}([(rr="showcase-gallery",t=>"function"==typeof t?((t,e)=>(customElements.define(t,e),e))(rr,t):((t,e)=>{const{kind:r,elements:i}=e;return{kind:r,elements:i,finisher(e){customElements.define(t,e)}}})(rr,t))],er)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Qyw4Q0EvRFUxQixHQUFhLElBRHpCLEdBQWMsbUJBQ0ZBLElDSmIsSUFBTTJCLEdBQU4sY0FBOEIsR0FBOUIsa0NBQ0UsS0FBQUMsR0FBSyxJQUFJNUIsRUFLWCxDQUhFdlAsU0FDRSxDQUFJLHFDQUNOLEdDTE05TyxPREFGZ2dCLHNVQUFlLEdDQWJoZ0IsR0RETyxtQkNDSkosR0FBRyxtQkFBbUJBLEVBQUUsRUFBRUksRUFBRUosS0FBS2dRLGVBQWVDLE9BQU83UCxFQUFFSixHQUFHQSxHQUFwQyxDQUF3Q0ksR0FBRUosR0FBRyxFQUFFSSxFQUFFSixLQUFLLE1BQU1rUSxLQUFLL1AsRUFBRWdRLFNBQVNyUSxHQUFHRSxFQUFFLE1BQU0sQ0FBQ2tRLEtBQUsvUCxFQUFFZ1EsU0FBU3JRLEVBQUVzUSxTQUFTcFEsR0FBR2dRLGVBQWVDLE9BQU83UCxFQUFFSixFQUFFLEVBQUcsRUFBdEcsQ0FBd0dJLEdBQUVKLEtEQXBMb2dCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZ3LWNvbXBvbmVudHMvZm9ybXVsYS1lZGl0b3IvLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2Nzcy10YWcuanMiLCJ3ZWJwYWNrOi8vQGZ3LWNvbXBvbmVudHMvZm9ybXVsYS1lZGl0b3IvLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L3JlYWN0aXZlLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vQGZ3LWNvbXBvbmVudHMvZm9ybXVsYS1lZGl0b3IvLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGl0LWh0bWwuanMiLCJ3ZWJwYWNrOi8vQGZ3LWNvbXBvbmVudHMvZm9ybXVsYS1lZGl0b3IvLi9ub2RlX21vZHVsZXMvbGl0LWVsZW1lbnQvbGl0LWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vQGZ3LWNvbXBvbmVudHMvZm9ybXVsYS1lZGl0b3IvLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvcXVlcnktYXNzaWduZWQtZWxlbWVudHMuanMiLCJ3ZWJwYWNrOi8vQGZ3LWNvbXBvbmVudHMvZm9ybXVsYS1lZGl0b3IvLi9ub2RlX21vZHVsZXMvbGl0LWVsZW1lbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQGZ3LWNvbXBvbmVudHMvZm9ybXVsYS1lZGl0b3IvLi4vbm9kZV9tb2R1bGVzL2xpdC9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2Nzcy10YWcuanMiLCJ3ZWJwYWNrOi8vQGZ3LWNvbXBvbmVudHMvZm9ybXVsYS1lZGl0b3IvLi4vbm9kZV9tb2R1bGVzL2xpdC9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L3JlYWN0aXZlLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vQGZ3LWNvbXBvbmVudHMvZm9ybXVsYS1lZGl0b3IvLi4vbm9kZV9tb2R1bGVzL2xpdC1odG1sL2xpdC1odG1sLmpzIiwid2VicGFjazovL0Bmdy1jb21wb25lbnRzL2Zvcm11bGEtZWRpdG9yLy4uL25vZGVfbW9kdWxlcy9saXQtZWxlbWVudC9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2Nzcy10YWcuanMiLCJ3ZWJwYWNrOi8vQGZ3LWNvbXBvbmVudHMvZm9ybXVsYS1lZGl0b3IvLi4vbm9kZV9tb2R1bGVzL2xpdC1lbGVtZW50L25vZGVfbW9kdWxlcy9AbGl0L3JlYWN0aXZlLWVsZW1lbnQvcmVhY3RpdmUtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9AZnctY29tcG9uZW50cy9mb3JtdWxhLWVkaXRvci8uLi9ub2RlX21vZHVsZXMvbGl0LWVsZW1lbnQvbGl0LWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vQGZ3LWNvbXBvbmVudHMvZm9ybXVsYS1lZGl0b3IvLi4vbm9kZV9tb2R1bGVzL2xpdC9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvY3VzdG9tLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vQGZ3LWNvbXBvbmVudHMvZm9ybXVsYS1lZGl0b3IvLi4vbm9kZV9tb2R1bGVzL2xpdC9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vQGZ3LWNvbXBvbmVudHMvZm9ybXVsYS1lZGl0b3IvLi4vbm9kZV9tb2R1bGVzL2xpdC9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvc3RhdGUuanMiLCJ3ZWJwYWNrOi8vQGZ3LWNvbXBvbmVudHMvZm9ybXVsYS1lZGl0b3IvLi4vbm9kZV9tb2R1bGVzL2xpdC9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvcXVlcnktYXNzaWduZWQtZWxlbWVudHMuanMiLCJ3ZWJwYWNrOi8vQGZ3LWNvbXBvbmVudHMvZm9ybXVsYS1lZGl0b3IvLi4vcGFja2FnZXMvZm9ybXVsYS1lZGl0b3Ivc3JjL3N0eWxlcy9mb3JtdWxhLWVkaXRvci1zdHlsZXMuanMudHMiLCJ3ZWJwYWNrOi8vQGZ3LWNvbXBvbmVudHMvZm9ybXVsYS1lZGl0b3IvLi4vcGFja2FnZXMvc3R5bGVzL3NyYy9idXR0b24tc3R5bGVzLmpzLnRzIiwid2VicGFjazovL0Bmdy1jb21wb25lbnRzL2Zvcm11bGEtZWRpdG9yLy4uL25vZGVfbW9kdWxlcy9iaWcuanMvYmlnLm1qcyIsIndlYnBhY2s6Ly9AZnctY29tcG9uZW50cy9mb3JtdWxhLWVkaXRvci8uLi9wYWNrYWdlcy9mb3JtdWxhLWVkaXRvci9zcmMvaGVscGVycy5qcy50cyIsIndlYnBhY2s6Ly9AZnctY29tcG9uZW50cy9mb3JtdWxhLWVkaXRvci8uLi9wYWNrYWdlcy9mb3JtdWxhLWVkaXRvci9zcmMvcmVjb21tZW5kb3IuanMudHMiLCJ3ZWJwYWNrOi8vQGZ3LWNvbXBvbmVudHMvZm9ybXVsYS1lZGl0b3IvLi4vcGFja2FnZXMvZm9ybXVsYS1lZGl0b3Ivc3JjL3BhcnNlci5qcy50cyIsIndlYnBhY2s6Ly9AZnctY29tcG9uZW50cy9mb3JtdWxhLWVkaXRvci8uLi9wYWNrYWdlcy9mb3JtdWxhLWVkaXRvci9zcmMvY3Vyc29yLmpzLnRzIiwid2VicGFjazovL0Bmdy1jb21wb25lbnRzL2Zvcm11bGEtZWRpdG9yLy4uL3BhY2thZ2VzL2Zvcm11bGEtZWRpdG9yL3NyYy9zdWdnZXN0aW9uLW1lbnUuanMudHMiLCJ3ZWJwYWNrOi8vQGZ3LWNvbXBvbmVudHMvZm9ybXVsYS1lZGl0b3IvLi4vcGFja2FnZXMvZm9ybXVsYS1lZGl0b3Ivc3JjL2Zvcm11bGEtZWRpdG9yLnRzIiwid2VicGFjazovL0Bmdy1jb21wb25lbnRzL2Zvcm11bGEtZWRpdG9yLy4vc3JjL3Nob3djYXNlLnRzIiwid2VicGFjazovL0Bmdy1jb21wb25lbnRzL2Zvcm11bGEtZWRpdG9yLy4vbm9kZV9tb2R1bGVzL0BsaXQvcmVhY3RpdmUtZWxlbWVudC9kZWNvcmF0b3JzL2N1c3RvbS1lbGVtZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuY29uc3QgdD13aW5kb3csZT10LlNoYWRvd1Jvb3QmJih2b2lkIDA9PT10LlNoYWR5Q1NTfHx0LlNoYWR5Q1NTLm5hdGl2ZVNoYWRvdykmJlwiYWRvcHRlZFN0eWxlU2hlZXRzXCJpbiBEb2N1bWVudC5wcm90b3R5cGUmJlwicmVwbGFjZVwiaW4gQ1NTU3R5bGVTaGVldC5wcm90b3R5cGUscz1TeW1ib2woKSxuPW5ldyBXZWFrTWFwO2NsYXNzIG97Y29uc3RydWN0b3IodCxlLG4pe2lmKHRoaXMuXyRjc3NSZXN1bHQkPSEwLG4hPT1zKXRocm93IEVycm9yKFwiQ1NTUmVzdWx0IGlzIG5vdCBjb25zdHJ1Y3RhYmxlLiBVc2UgYHVuc2FmZUNTU2Agb3IgYGNzc2AgaW5zdGVhZC5cIik7dGhpcy5jc3NUZXh0PXQsdGhpcy50PWV9Z2V0IHN0eWxlU2hlZXQoKXtsZXQgdD10aGlzLm87Y29uc3Qgcz10aGlzLnQ7aWYoZSYmdm9pZCAwPT09dCl7Y29uc3QgZT12b2lkIDAhPT1zJiYxPT09cy5sZW5ndGg7ZSYmKHQ9bi5nZXQocykpLHZvaWQgMD09PXQmJigodGhpcy5vPXQ9bmV3IENTU1N0eWxlU2hlZXQpLnJlcGxhY2VTeW5jKHRoaXMuY3NzVGV4dCksZSYmbi5zZXQocyx0KSl9cmV0dXJuIHR9dG9TdHJpbmcoKXtyZXR1cm4gdGhpcy5jc3NUZXh0fX1jb25zdCByPXQ9Pm5ldyBvKFwic3RyaW5nXCI9PXR5cGVvZiB0P3Q6dCtcIlwiLHZvaWQgMCxzKSxpPSh0LC4uLmUpPT57Y29uc3Qgbj0xPT09dC5sZW5ndGg/dFswXTplLnJlZHVjZSgoKGUscyxuKT0+ZSsodD0+e2lmKCEwPT09dC5fJGNzc1Jlc3VsdCQpcmV0dXJuIHQuY3NzVGV4dDtpZihcIm51bWJlclwiPT10eXBlb2YgdClyZXR1cm4gdDt0aHJvdyBFcnJvcihcIlZhbHVlIHBhc3NlZCB0byAnY3NzJyBmdW5jdGlvbiBtdXN0IGJlIGEgJ2NzcycgZnVuY3Rpb24gcmVzdWx0OiBcIit0K1wiLiBVc2UgJ3Vuc2FmZUNTUycgdG8gcGFzcyBub24tbGl0ZXJhbCB2YWx1ZXMsIGJ1dCB0YWtlIGNhcmUgdG8gZW5zdXJlIHBhZ2Ugc2VjdXJpdHkuXCIpfSkocykrdFtuKzFdKSx0WzBdKTtyZXR1cm4gbmV3IG8obix0LHMpfSxTPShzLG4pPT57ZT9zLmFkb3B0ZWRTdHlsZVNoZWV0cz1uLm1hcCgodD0+dCBpbnN0YW5jZW9mIENTU1N0eWxlU2hlZXQ/dDp0LnN0eWxlU2hlZXQpKTpuLmZvckVhY2goKGU9Pntjb25zdCBuPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKSxvPXQubGl0Tm9uY2U7dm9pZCAwIT09byYmbi5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLG8pLG4udGV4dENvbnRlbnQ9ZS5jc3NUZXh0LHMuYXBwZW5kQ2hpbGQobil9KSl9LGM9ZT90PT50OnQ9PnQgaW5zdGFuY2VvZiBDU1NTdHlsZVNoZWV0Pyh0PT57bGV0IGU9XCJcIjtmb3IoY29uc3QgcyBvZiB0LmNzc1J1bGVzKWUrPXMuY3NzVGV4dDtyZXR1cm4gcihlKX0pKHQpOnQ7ZXhwb3J0e28gYXMgQ1NTUmVzdWx0LFMgYXMgYWRvcHRTdHlsZXMsaSBhcyBjc3MsYyBhcyBnZXRDb21wYXRpYmxlU3R5bGUsZSBhcyBzdXBwb3J0c0Fkb3B0aW5nU3R5bGVTaGVldHMsciBhcyB1bnNhZmVDU1N9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3NzLXRhZy5qcy5tYXBcbiIsImltcG9ydHtnZXRDb21wYXRpYmxlU3R5bGUgYXMgdCxhZG9wdFN0eWxlcyBhcyBpfWZyb21cIi4vY3NzLXRhZy5qc1wiO2V4cG9ydHtDU1NSZXN1bHQsYWRvcHRTdHlsZXMsY3NzLGdldENvbXBhdGlibGVTdHlsZSxzdXBwb3J0c0Fkb3B0aW5nU3R5bGVTaGVldHMsdW5zYWZlQ1NTfWZyb21cIi4vY3NzLXRhZy5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovdmFyIHM7Y29uc3QgZT13aW5kb3cscj1lLnRydXN0ZWRUeXBlcyxoPXI/ci5lbXB0eVNjcmlwdDpcIlwiLG89ZS5yZWFjdGl2ZUVsZW1lbnRQb2x5ZmlsbFN1cHBvcnQsbj17dG9BdHRyaWJ1dGUodCxpKXtzd2l0Y2goaSl7Y2FzZSBCb29sZWFuOnQ9dD9oOm51bGw7YnJlYWs7Y2FzZSBPYmplY3Q6Y2FzZSBBcnJheTp0PW51bGw9PXQ/dDpKU09OLnN0cmluZ2lmeSh0KX1yZXR1cm4gdH0sZnJvbUF0dHJpYnV0ZSh0LGkpe2xldCBzPXQ7c3dpdGNoKGkpe2Nhc2UgQm9vbGVhbjpzPW51bGwhPT10O2JyZWFrO2Nhc2UgTnVtYmVyOnM9bnVsbD09PXQ/bnVsbDpOdW1iZXIodCk7YnJlYWs7Y2FzZSBPYmplY3Q6Y2FzZSBBcnJheTp0cnl7cz1KU09OLnBhcnNlKHQpfWNhdGNoKHQpe3M9bnVsbH19cmV0dXJuIHN9fSxhPSh0LGkpPT5pIT09dCYmKGk9PWl8fHQ9PXQpLGw9e2F0dHJpYnV0ZTohMCx0eXBlOlN0cmluZyxjb252ZXJ0ZXI6bixyZWZsZWN0OiExLGhhc0NoYW5nZWQ6YX0sZD1cImZpbmFsaXplZFwiO2NsYXNzIHUgZXh0ZW5kcyBIVE1MRWxlbWVudHtjb25zdHJ1Y3Rvcigpe3N1cGVyKCksdGhpcy5fJEVpPW5ldyBNYXAsdGhpcy5pc1VwZGF0ZVBlbmRpbmc9ITEsdGhpcy5oYXNVcGRhdGVkPSExLHRoaXMuXyRFbD1udWxsLHRoaXMudSgpfXN0YXRpYyBhZGRJbml0aWFsaXplcih0KXt2YXIgaTt0aGlzLmZpbmFsaXplKCksKG51bGwhPT0oaT10aGlzLmgpJiZ2b2lkIDAhPT1pP2k6dGhpcy5oPVtdKS5wdXNoKHQpfXN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCl7dGhpcy5maW5hbGl6ZSgpO2NvbnN0IHQ9W107cmV0dXJuIHRoaXMuZWxlbWVudFByb3BlcnRpZXMuZm9yRWFjaCgoKGkscyk9Pntjb25zdCBlPXRoaXMuXyRFcChzLGkpO3ZvaWQgMCE9PWUmJih0aGlzLl8kRXYuc2V0KGUscyksdC5wdXNoKGUpKX0pKSx0fXN0YXRpYyBjcmVhdGVQcm9wZXJ0eSh0LGk9bCl7aWYoaS5zdGF0ZSYmKGkuYXR0cmlidXRlPSExKSx0aGlzLmZpbmFsaXplKCksdGhpcy5lbGVtZW50UHJvcGVydGllcy5zZXQodCxpKSwhaS5ub0FjY2Vzc29yJiYhdGhpcy5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkodCkpe2NvbnN0IHM9XCJzeW1ib2xcIj09dHlwZW9mIHQ/U3ltYm9sKCk6XCJfX1wiK3QsZT10aGlzLmdldFByb3BlcnR5RGVzY3JpcHRvcih0LHMsaSk7dm9pZCAwIT09ZSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMucHJvdG90eXBlLHQsZSl9fXN0YXRpYyBnZXRQcm9wZXJ0eURlc2NyaXB0b3IodCxpLHMpe3JldHVybntnZXQoKXtyZXR1cm4gdGhpc1tpXX0sc2V0KGUpe2NvbnN0IHI9dGhpc1t0XTt0aGlzW2ldPWUsdGhpcy5yZXF1ZXN0VXBkYXRlKHQscixzKX0sY29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITB9fXN0YXRpYyBnZXRQcm9wZXJ0eU9wdGlvbnModCl7cmV0dXJuIHRoaXMuZWxlbWVudFByb3BlcnRpZXMuZ2V0KHQpfHxsfXN0YXRpYyBmaW5hbGl6ZSgpe2lmKHRoaXMuaGFzT3duUHJvcGVydHkoZCkpcmV0dXJuITE7dGhpc1tkXT0hMDtjb25zdCB0PU9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKTtpZih0LmZpbmFsaXplKCksdm9pZCAwIT09dC5oJiYodGhpcy5oPVsuLi50LmhdKSx0aGlzLmVsZW1lbnRQcm9wZXJ0aWVzPW5ldyBNYXAodC5lbGVtZW50UHJvcGVydGllcyksdGhpcy5fJEV2PW5ldyBNYXAsdGhpcy5oYXNPd25Qcm9wZXJ0eShcInByb3BlcnRpZXNcIikpe2NvbnN0IHQ9dGhpcy5wcm9wZXJ0aWVzLGk9Wy4uLk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHQpLC4uLk9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModCldO2Zvcihjb25zdCBzIG9mIGkpdGhpcy5jcmVhdGVQcm9wZXJ0eShzLHRbc10pfXJldHVybiB0aGlzLmVsZW1lbnRTdHlsZXM9dGhpcy5maW5hbGl6ZVN0eWxlcyh0aGlzLnN0eWxlcyksITB9c3RhdGljIGZpbmFsaXplU3R5bGVzKGkpe2NvbnN0IHM9W107aWYoQXJyYXkuaXNBcnJheShpKSl7Y29uc3QgZT1uZXcgU2V0KGkuZmxhdCgxLzApLnJldmVyc2UoKSk7Zm9yKGNvbnN0IGkgb2YgZSlzLnVuc2hpZnQodChpKSl9ZWxzZSB2b2lkIDAhPT1pJiZzLnB1c2godChpKSk7cmV0dXJuIHN9c3RhdGljIF8kRXAodCxpKXtjb25zdCBzPWkuYXR0cmlidXRlO3JldHVybiExPT09cz92b2lkIDA6XCJzdHJpbmdcIj09dHlwZW9mIHM/czpcInN0cmluZ1wiPT10eXBlb2YgdD90LnRvTG93ZXJDYXNlKCk6dm9pZCAwfXUoKXt2YXIgdDt0aGlzLl8kRV89bmV3IFByb21pc2UoKHQ9PnRoaXMuZW5hYmxlVXBkYXRpbmc9dCkpLHRoaXMuXyRBTD1uZXcgTWFwLHRoaXMuXyRFZygpLHRoaXMucmVxdWVzdFVwZGF0ZSgpLG51bGw9PT0odD10aGlzLmNvbnN0cnVjdG9yLmgpfHx2b2lkIDA9PT10fHx0LmZvckVhY2goKHQ9PnQodGhpcykpKX1hZGRDb250cm9sbGVyKHQpe3ZhciBpLHM7KG51bGwhPT0oaT10aGlzLl8kRVMpJiZ2b2lkIDAhPT1pP2k6dGhpcy5fJEVTPVtdKS5wdXNoKHQpLHZvaWQgMCE9PXRoaXMucmVuZGVyUm9vdCYmdGhpcy5pc0Nvbm5lY3RlZCYmKG51bGw9PT0ocz10Lmhvc3RDb25uZWN0ZWQpfHx2b2lkIDA9PT1zfHxzLmNhbGwodCkpfXJlbW92ZUNvbnRyb2xsZXIodCl7dmFyIGk7bnVsbD09PShpPXRoaXMuXyRFUyl8fHZvaWQgMD09PWl8fGkuc3BsaWNlKHRoaXMuXyRFUy5pbmRleE9mKHQpPj4+MCwxKX1fJEVnKCl7dGhpcy5jb25zdHJ1Y3Rvci5lbGVtZW50UHJvcGVydGllcy5mb3JFYWNoKCgodCxpKT0+e3RoaXMuaGFzT3duUHJvcGVydHkoaSkmJih0aGlzLl8kRWkuc2V0KGksdGhpc1tpXSksZGVsZXRlIHRoaXNbaV0pfSkpfWNyZWF0ZVJlbmRlclJvb3QoKXt2YXIgdDtjb25zdCBzPW51bGwhPT0odD10aGlzLnNoYWRvd1Jvb3QpJiZ2b2lkIDAhPT10P3Q6dGhpcy5hdHRhY2hTaGFkb3codGhpcy5jb25zdHJ1Y3Rvci5zaGFkb3dSb290T3B0aW9ucyk7cmV0dXJuIGkocyx0aGlzLmNvbnN0cnVjdG9yLmVsZW1lbnRTdHlsZXMpLHN9Y29ubmVjdGVkQ2FsbGJhY2soKXt2YXIgdDt2b2lkIDA9PT10aGlzLnJlbmRlclJvb3QmJih0aGlzLnJlbmRlclJvb3Q9dGhpcy5jcmVhdGVSZW5kZXJSb290KCkpLHRoaXMuZW5hYmxlVXBkYXRpbmcoITApLG51bGw9PT0odD10aGlzLl8kRVMpfHx2b2lkIDA9PT10fHx0LmZvckVhY2goKHQ9Pnt2YXIgaTtyZXR1cm4gbnVsbD09PShpPXQuaG9zdENvbm5lY3RlZCl8fHZvaWQgMD09PWk/dm9pZCAwOmkuY2FsbCh0KX0pKX1lbmFibGVVcGRhdGluZyh0KXt9ZGlzY29ubmVjdGVkQ2FsbGJhY2soKXt2YXIgdDtudWxsPT09KHQ9dGhpcy5fJEVTKXx8dm9pZCAwPT09dHx8dC5mb3JFYWNoKCh0PT57dmFyIGk7cmV0dXJuIG51bGw9PT0oaT10Lmhvc3REaXNjb25uZWN0ZWQpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLmNhbGwodCl9KSl9YXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKHQsaSxzKXt0aGlzLl8kQUsodCxzKX1fJEVPKHQsaSxzPWwpe3ZhciBlO2NvbnN0IHI9dGhpcy5jb25zdHJ1Y3Rvci5fJEVwKHQscyk7aWYodm9pZCAwIT09ciYmITA9PT1zLnJlZmxlY3Qpe2NvbnN0IGg9KHZvaWQgMCE9PShudWxsPT09KGU9cy5jb252ZXJ0ZXIpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLnRvQXR0cmlidXRlKT9zLmNvbnZlcnRlcjpuKS50b0F0dHJpYnV0ZShpLHMudHlwZSk7dGhpcy5fJEVsPXQsbnVsbD09aD90aGlzLnJlbW92ZUF0dHJpYnV0ZShyKTp0aGlzLnNldEF0dHJpYnV0ZShyLGgpLHRoaXMuXyRFbD1udWxsfX1fJEFLKHQsaSl7dmFyIHM7Y29uc3QgZT10aGlzLmNvbnN0cnVjdG9yLHI9ZS5fJEV2LmdldCh0KTtpZih2b2lkIDAhPT1yJiZ0aGlzLl8kRWwhPT1yKXtjb25zdCB0PWUuZ2V0UHJvcGVydHlPcHRpb25zKHIpLGg9XCJmdW5jdGlvblwiPT10eXBlb2YgdC5jb252ZXJ0ZXI/e2Zyb21BdHRyaWJ1dGU6dC5jb252ZXJ0ZXJ9OnZvaWQgMCE9PShudWxsPT09KHM9dC5jb252ZXJ0ZXIpfHx2b2lkIDA9PT1zP3ZvaWQgMDpzLmZyb21BdHRyaWJ1dGUpP3QuY29udmVydGVyOm47dGhpcy5fJEVsPXIsdGhpc1tyXT1oLmZyb21BdHRyaWJ1dGUoaSx0LnR5cGUpLHRoaXMuXyRFbD1udWxsfX1yZXF1ZXN0VXBkYXRlKHQsaSxzKXtsZXQgZT0hMDt2b2lkIDAhPT10JiYoKChzPXN8fHRoaXMuY29uc3RydWN0b3IuZ2V0UHJvcGVydHlPcHRpb25zKHQpKS5oYXNDaGFuZ2VkfHxhKSh0aGlzW3RdLGkpPyh0aGlzLl8kQUwuaGFzKHQpfHx0aGlzLl8kQUwuc2V0KHQsaSksITA9PT1zLnJlZmxlY3QmJnRoaXMuXyRFbCE9PXQmJih2b2lkIDA9PT10aGlzLl8kRUMmJih0aGlzLl8kRUM9bmV3IE1hcCksdGhpcy5fJEVDLnNldCh0LHMpKSk6ZT0hMSksIXRoaXMuaXNVcGRhdGVQZW5kaW5nJiZlJiYodGhpcy5fJEVfPXRoaXMuXyRFaigpKX1hc3luYyBfJEVqKCl7dGhpcy5pc1VwZGF0ZVBlbmRpbmc9ITA7dHJ5e2F3YWl0IHRoaXMuXyRFX31jYXRjaCh0KXtQcm9taXNlLnJlamVjdCh0KX1jb25zdCB0PXRoaXMuc2NoZWR1bGVVcGRhdGUoKTtyZXR1cm4gbnVsbCE9dCYmYXdhaXQgdCwhdGhpcy5pc1VwZGF0ZVBlbmRpbmd9c2NoZWR1bGVVcGRhdGUoKXtyZXR1cm4gdGhpcy5wZXJmb3JtVXBkYXRlKCl9cGVyZm9ybVVwZGF0ZSgpe3ZhciB0O2lmKCF0aGlzLmlzVXBkYXRlUGVuZGluZylyZXR1cm47dGhpcy5oYXNVcGRhdGVkLHRoaXMuXyRFaSYmKHRoaXMuXyRFaS5mb3JFYWNoKCgodCxpKT0+dGhpc1tpXT10KSksdGhpcy5fJEVpPXZvaWQgMCk7bGV0IGk9ITE7Y29uc3Qgcz10aGlzLl8kQUw7dHJ5e2k9dGhpcy5zaG91bGRVcGRhdGUocyksaT8odGhpcy53aWxsVXBkYXRlKHMpLG51bGw9PT0odD10aGlzLl8kRVMpfHx2b2lkIDA9PT10fHx0LmZvckVhY2goKHQ9Pnt2YXIgaTtyZXR1cm4gbnVsbD09PShpPXQuaG9zdFVwZGF0ZSl8fHZvaWQgMD09PWk/dm9pZCAwOmkuY2FsbCh0KX0pKSx0aGlzLnVwZGF0ZShzKSk6dGhpcy5fJEVrKCl9Y2F0Y2godCl7dGhyb3cgaT0hMSx0aGlzLl8kRWsoKSx0fWkmJnRoaXMuXyRBRShzKX13aWxsVXBkYXRlKHQpe31fJEFFKHQpe3ZhciBpO251bGw9PT0oaT10aGlzLl8kRVMpfHx2b2lkIDA9PT1pfHxpLmZvckVhY2goKHQ9Pnt2YXIgaTtyZXR1cm4gbnVsbD09PShpPXQuaG9zdFVwZGF0ZWQpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLmNhbGwodCl9KSksdGhpcy5oYXNVcGRhdGVkfHwodGhpcy5oYXNVcGRhdGVkPSEwLHRoaXMuZmlyc3RVcGRhdGVkKHQpKSx0aGlzLnVwZGF0ZWQodCl9XyRFaygpe3RoaXMuXyRBTD1uZXcgTWFwLHRoaXMuaXNVcGRhdGVQZW5kaW5nPSExfWdldCB1cGRhdGVDb21wbGV0ZSgpe3JldHVybiB0aGlzLmdldFVwZGF0ZUNvbXBsZXRlKCl9Z2V0VXBkYXRlQ29tcGxldGUoKXtyZXR1cm4gdGhpcy5fJEVffXNob3VsZFVwZGF0ZSh0KXtyZXR1cm4hMH11cGRhdGUodCl7dm9pZCAwIT09dGhpcy5fJEVDJiYodGhpcy5fJEVDLmZvckVhY2goKCh0LGkpPT50aGlzLl8kRU8oaSx0aGlzW2ldLHQpKSksdGhpcy5fJEVDPXZvaWQgMCksdGhpcy5fJEVrKCl9dXBkYXRlZCh0KXt9Zmlyc3RVcGRhdGVkKHQpe319dVtkXT0hMCx1LmVsZW1lbnRQcm9wZXJ0aWVzPW5ldyBNYXAsdS5lbGVtZW50U3R5bGVzPVtdLHUuc2hhZG93Um9vdE9wdGlvbnM9e21vZGU6XCJvcGVuXCJ9LG51bGw9PW98fG8oe1JlYWN0aXZlRWxlbWVudDp1fSksKG51bGwhPT0ocz1lLnJlYWN0aXZlRWxlbWVudFZlcnNpb25zKSYmdm9pZCAwIT09cz9zOmUucmVhY3RpdmVFbGVtZW50VmVyc2lvbnM9W10pLnB1c2goXCIxLjYuMlwiKTtleHBvcnR7dSBhcyBSZWFjdGl2ZUVsZW1lbnQsbiBhcyBkZWZhdWx0Q29udmVydGVyLGEgYXMgbm90RXF1YWx9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3RpdmUtZWxlbWVudC5qcy5tYXBcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xudmFyIHQ7Y29uc3QgaT13aW5kb3cscz1pLnRydXN0ZWRUeXBlcyxlPXM/cy5jcmVhdGVQb2xpY3koXCJsaXQtaHRtbFwiLHtjcmVhdGVIVE1MOnQ9PnR9KTp2b2lkIDAsbz1cIiRsaXQkXCIsbj1gbGl0JCR7KE1hdGgucmFuZG9tKCkrXCJcIikuc2xpY2UoOSl9JGAsbD1cIj9cIituLGg9YDwke2x9PmAscj1kb2N1bWVudCxkPSgpPT5yLmNyZWF0ZUNvbW1lbnQoXCJcIiksdT10PT5udWxsPT09dHx8XCJvYmplY3RcIiE9dHlwZW9mIHQmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQsYz1BcnJheS5pc0FycmF5LHY9dD0+Yyh0KXx8XCJmdW5jdGlvblwiPT10eXBlb2YobnVsbD09dD92b2lkIDA6dFtTeW1ib2wuaXRlcmF0b3JdKSxhPVwiWyBcXHRcXG5cXGZcXHJdXCIsZj0vPCg/OighLS18XFwvW15hLXpBLVpdKXwoXFwvP1thLXpBLVpdW14+XFxzXSopfChcXC8/JCkpL2csXz0vLS0+L2csbT0vPi9nLHA9UmVnRXhwKGA+fCR7YX0oPzooW15cXFxcc1wiJz49L10rKSgke2F9Kj0ke2F9Kig/OlteIFxcdFxcblxcZlxcclwiJ1xcYDw+PV18KFwifCcpfCkpfCQpYCxcImdcIiksZz0vJy9nLCQ9L1wiL2cseT0vXig/OnNjcmlwdHxzdHlsZXx0ZXh0YXJlYXx0aXRsZSkkL2ksdz10PT4oaSwuLi5zKT0+KHtfJGxpdFR5cGUkOnQsc3RyaW5nczppLHZhbHVlczpzfSkseD13KDEpLGI9dygyKSxUPVN5bWJvbC5mb3IoXCJsaXQtbm9DaGFuZ2VcIiksQT1TeW1ib2wuZm9yKFwibGl0LW5vdGhpbmdcIiksRT1uZXcgV2Vha01hcCxDPXIuY3JlYXRlVHJlZVdhbGtlcihyLDEyOSxudWxsLCExKSxQPSh0LGkpPT57Y29uc3Qgcz10Lmxlbmd0aC0xLGw9W107bGV0IHIsZD0yPT09aT9cIjxzdmc+XCI6XCJcIix1PWY7Zm9yKGxldCBpPTA7aTxzO2krKyl7Y29uc3Qgcz10W2ldO2xldCBlLGMsdj0tMSxhPTA7Zm9yKDthPHMubGVuZ3RoJiYodS5sYXN0SW5kZXg9YSxjPXUuZXhlYyhzKSxudWxsIT09Yyk7KWE9dS5sYXN0SW5kZXgsdT09PWY/XCIhLS1cIj09PWNbMV0/dT1fOnZvaWQgMCE9PWNbMV0/dT1tOnZvaWQgMCE9PWNbMl0/KHkudGVzdChjWzJdKSYmKHI9UmVnRXhwKFwiPC9cIitjWzJdLFwiZ1wiKSksdT1wKTp2b2lkIDAhPT1jWzNdJiYodT1wKTp1PT09cD9cIj5cIj09PWNbMF0/KHU9bnVsbCE9cj9yOmYsdj0tMSk6dm9pZCAwPT09Y1sxXT92PS0yOih2PXUubGFzdEluZGV4LWNbMl0ubGVuZ3RoLGU9Y1sxXSx1PXZvaWQgMD09PWNbM10/cDonXCInPT09Y1szXT8kOmcpOnU9PT0kfHx1PT09Zz91PXA6dT09PV98fHU9PT1tP3U9ZjoodT1wLHI9dm9pZCAwKTtjb25zdCB3PXU9PT1wJiZ0W2krMV0uc3RhcnRzV2l0aChcIi8+XCIpP1wiIFwiOlwiXCI7ZCs9dT09PWY/cytoOnY+PTA/KGwucHVzaChlKSxzLnNsaWNlKDAsdikrbytzLnNsaWNlKHYpK24rdyk6cytuKygtMj09PXY/KGwucHVzaCh2b2lkIDApLGkpOncpfWNvbnN0IGM9ZCsodFtzXXx8XCI8Pz5cIikrKDI9PT1pP1wiPC9zdmc+XCI6XCJcIik7aWYoIUFycmF5LmlzQXJyYXkodCl8fCF0Lmhhc093blByb3BlcnR5KFwicmF3XCIpKXRocm93IEVycm9yKFwiaW52YWxpZCB0ZW1wbGF0ZSBzdHJpbmdzIGFycmF5XCIpO3JldHVyblt2b2lkIDAhPT1lP2UuY3JlYXRlSFRNTChjKTpjLGxdfTtjbGFzcyBWe2NvbnN0cnVjdG9yKHtzdHJpbmdzOnQsXyRsaXRUeXBlJDppfSxlKXtsZXQgaDt0aGlzLnBhcnRzPVtdO2xldCByPTAsdT0wO2NvbnN0IGM9dC5sZW5ndGgtMSx2PXRoaXMucGFydHMsW2EsZl09UCh0LGkpO2lmKHRoaXMuZWw9Vi5jcmVhdGVFbGVtZW50KGEsZSksQy5jdXJyZW50Tm9kZT10aGlzLmVsLmNvbnRlbnQsMj09PWkpe2NvbnN0IHQ9dGhpcy5lbC5jb250ZW50LGk9dC5maXJzdENoaWxkO2kucmVtb3ZlKCksdC5hcHBlbmQoLi4uaS5jaGlsZE5vZGVzKX1mb3IoO251bGwhPT0oaD1DLm5leHROb2RlKCkpJiZ2Lmxlbmd0aDxjOyl7aWYoMT09PWgubm9kZVR5cGUpe2lmKGguaGFzQXR0cmlidXRlcygpKXtjb25zdCB0PVtdO2Zvcihjb25zdCBpIG9mIGguZ2V0QXR0cmlidXRlTmFtZXMoKSlpZihpLmVuZHNXaXRoKG8pfHxpLnN0YXJ0c1dpdGgobikpe2NvbnN0IHM9Zlt1KytdO2lmKHQucHVzaChpKSx2b2lkIDAhPT1zKXtjb25zdCB0PWguZ2V0QXR0cmlidXRlKHMudG9Mb3dlckNhc2UoKStvKS5zcGxpdChuKSxpPS8oWy4/QF0pPyguKikvLmV4ZWMocyk7di5wdXNoKHt0eXBlOjEsaW5kZXg6cixuYW1lOmlbMl0sc3RyaW5nczp0LGN0b3I6XCIuXCI9PT1pWzFdP2s6XCI/XCI9PT1pWzFdP0k6XCJAXCI9PT1pWzFdP0w6Un0pfWVsc2Ugdi5wdXNoKHt0eXBlOjYsaW5kZXg6cn0pfWZvcihjb25zdCBpIG9mIHQpaC5yZW1vdmVBdHRyaWJ1dGUoaSl9aWYoeS50ZXN0KGgudGFnTmFtZSkpe2NvbnN0IHQ9aC50ZXh0Q29udGVudC5zcGxpdChuKSxpPXQubGVuZ3RoLTE7aWYoaT4wKXtoLnRleHRDb250ZW50PXM/cy5lbXB0eVNjcmlwdDpcIlwiO2ZvcihsZXQgcz0wO3M8aTtzKyspaC5hcHBlbmQodFtzXSxkKCkpLEMubmV4dE5vZGUoKSx2LnB1c2goe3R5cGU6MixpbmRleDorK3J9KTtoLmFwcGVuZCh0W2ldLGQoKSl9fX1lbHNlIGlmKDg9PT1oLm5vZGVUeXBlKWlmKGguZGF0YT09PWwpdi5wdXNoKHt0eXBlOjIsaW5kZXg6cn0pO2Vsc2V7bGV0IHQ9LTE7Zm9yKDstMSE9PSh0PWguZGF0YS5pbmRleE9mKG4sdCsxKSk7KXYucHVzaCh7dHlwZTo3LGluZGV4OnJ9KSx0Kz1uLmxlbmd0aC0xfXIrK319c3RhdGljIGNyZWF0ZUVsZW1lbnQodCxpKXtjb25zdCBzPXIuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpO3JldHVybiBzLmlubmVySFRNTD10LHN9fWZ1bmN0aW9uIE4odCxpLHM9dCxlKXt2YXIgbyxuLGwsaDtpZihpPT09VClyZXR1cm4gaTtsZXQgcj12b2lkIDAhPT1lP251bGw9PT0obz1zLl8kQ28pfHx2b2lkIDA9PT1vP3ZvaWQgMDpvW2VdOnMuXyRDbDtjb25zdCBkPXUoaSk/dm9pZCAwOmkuXyRsaXREaXJlY3RpdmUkO3JldHVybihudWxsPT1yP3ZvaWQgMDpyLmNvbnN0cnVjdG9yKSE9PWQmJihudWxsPT09KG49bnVsbD09cj92b2lkIDA6ci5fJEFPKXx8dm9pZCAwPT09bnx8bi5jYWxsKHIsITEpLHZvaWQgMD09PWQ/cj12b2lkIDA6KHI9bmV3IGQodCksci5fJEFUKHQscyxlKSksdm9pZCAwIT09ZT8obnVsbCE9PShsPShoPXMpLl8kQ28pJiZ2b2lkIDAhPT1sP2w6aC5fJENvPVtdKVtlXT1yOnMuXyRDbD1yKSx2b2lkIDAhPT1yJiYoaT1OKHQsci5fJEFTKHQsaS52YWx1ZXMpLHIsZSkpLGl9Y2xhc3MgU3tjb25zdHJ1Y3Rvcih0LGkpe3RoaXMuXyRBVj1bXSx0aGlzLl8kQU49dm9pZCAwLHRoaXMuXyRBRD10LHRoaXMuXyRBTT1pfWdldCBwYXJlbnROb2RlKCl7cmV0dXJuIHRoaXMuXyRBTS5wYXJlbnROb2RlfWdldCBfJEFVKCl7cmV0dXJuIHRoaXMuXyRBTS5fJEFVfXUodCl7dmFyIGk7Y29uc3R7ZWw6e2NvbnRlbnQ6c30scGFydHM6ZX09dGhpcy5fJEFELG89KG51bGwhPT0oaT1udWxsPT10P3ZvaWQgMDp0LmNyZWF0aW9uU2NvcGUpJiZ2b2lkIDAhPT1pP2k6cikuaW1wb3J0Tm9kZShzLCEwKTtDLmN1cnJlbnROb2RlPW87bGV0IG49Qy5uZXh0Tm9kZSgpLGw9MCxoPTAsZD1lWzBdO2Zvcig7dm9pZCAwIT09ZDspe2lmKGw9PT1kLmluZGV4KXtsZXQgaTsyPT09ZC50eXBlP2k9bmV3IE0obixuLm5leHRTaWJsaW5nLHRoaXMsdCk6MT09PWQudHlwZT9pPW5ldyBkLmN0b3IobixkLm5hbWUsZC5zdHJpbmdzLHRoaXMsdCk6Nj09PWQudHlwZSYmKGk9bmV3IHoobix0aGlzLHQpKSx0aGlzLl8kQVYucHVzaChpKSxkPWVbKytoXX1sIT09KG51bGw9PWQ/dm9pZCAwOmQuaW5kZXgpJiYobj1DLm5leHROb2RlKCksbCsrKX1yZXR1cm4gQy5jdXJyZW50Tm9kZT1yLG99dih0KXtsZXQgaT0wO2Zvcihjb25zdCBzIG9mIHRoaXMuXyRBVil2b2lkIDAhPT1zJiYodm9pZCAwIT09cy5zdHJpbmdzPyhzLl8kQUkodCxzLGkpLGkrPXMuc3RyaW5ncy5sZW5ndGgtMik6cy5fJEFJKHRbaV0pKSxpKyt9fWNsYXNzIE17Y29uc3RydWN0b3IodCxpLHMsZSl7dmFyIG87dGhpcy50eXBlPTIsdGhpcy5fJEFIPUEsdGhpcy5fJEFOPXZvaWQgMCx0aGlzLl8kQUE9dCx0aGlzLl8kQUI9aSx0aGlzLl8kQU09cyx0aGlzLm9wdGlvbnM9ZSx0aGlzLl8kQ3A9bnVsbD09PShvPW51bGw9PWU/dm9pZCAwOmUuaXNDb25uZWN0ZWQpfHx2b2lkIDA9PT1vfHxvfWdldCBfJEFVKCl7dmFyIHQsaTtyZXR1cm4gbnVsbCE9PShpPW51bGw9PT0odD10aGlzLl8kQU0pfHx2b2lkIDA9PT10P3ZvaWQgMDp0Ll8kQVUpJiZ2b2lkIDAhPT1pP2k6dGhpcy5fJENwfWdldCBwYXJlbnROb2RlKCl7bGV0IHQ9dGhpcy5fJEFBLnBhcmVudE5vZGU7Y29uc3QgaT10aGlzLl8kQU07cmV0dXJuIHZvaWQgMCE9PWkmJjExPT09KG51bGw9PXQ/dm9pZCAwOnQubm9kZVR5cGUpJiYodD1pLnBhcmVudE5vZGUpLHR9Z2V0IHN0YXJ0Tm9kZSgpe3JldHVybiB0aGlzLl8kQUF9Z2V0IGVuZE5vZGUoKXtyZXR1cm4gdGhpcy5fJEFCfV8kQUkodCxpPXRoaXMpe3Q9Tih0aGlzLHQsaSksdSh0KT90PT09QXx8bnVsbD09dHx8XCJcIj09PXQ/KHRoaXMuXyRBSCE9PUEmJnRoaXMuXyRBUigpLHRoaXMuXyRBSD1BKTp0IT09dGhpcy5fJEFIJiZ0IT09VCYmdGhpcy5fKHQpOnZvaWQgMCE9PXQuXyRsaXRUeXBlJD90aGlzLmcodCk6dm9pZCAwIT09dC5ub2RlVHlwZT90aGlzLiQodCk6dih0KT90aGlzLlQodCk6dGhpcy5fKHQpfWsodCl7cmV0dXJuIHRoaXMuXyRBQS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0LHRoaXMuXyRBQil9JCh0KXt0aGlzLl8kQUghPT10JiYodGhpcy5fJEFSKCksdGhpcy5fJEFIPXRoaXMuayh0KSl9Xyh0KXt0aGlzLl8kQUghPT1BJiZ1KHRoaXMuXyRBSCk/dGhpcy5fJEFBLm5leHRTaWJsaW5nLmRhdGE9dDp0aGlzLiQoci5jcmVhdGVUZXh0Tm9kZSh0KSksdGhpcy5fJEFIPXR9Zyh0KXt2YXIgaTtjb25zdHt2YWx1ZXM6cyxfJGxpdFR5cGUkOmV9PXQsbz1cIm51bWJlclwiPT10eXBlb2YgZT90aGlzLl8kQUModCk6KHZvaWQgMD09PWUuZWwmJihlLmVsPVYuY3JlYXRlRWxlbWVudChlLmgsdGhpcy5vcHRpb25zKSksZSk7aWYoKG51bGw9PT0oaT10aGlzLl8kQUgpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLl8kQUQpPT09byl0aGlzLl8kQUgudihzKTtlbHNle2NvbnN0IHQ9bmV3IFMobyx0aGlzKSxpPXQudSh0aGlzLm9wdGlvbnMpO3QudihzKSx0aGlzLiQoaSksdGhpcy5fJEFIPXR9fV8kQUModCl7bGV0IGk9RS5nZXQodC5zdHJpbmdzKTtyZXR1cm4gdm9pZCAwPT09aSYmRS5zZXQodC5zdHJpbmdzLGk9bmV3IFYodCkpLGl9VCh0KXtjKHRoaXMuXyRBSCl8fCh0aGlzLl8kQUg9W10sdGhpcy5fJEFSKCkpO2NvbnN0IGk9dGhpcy5fJEFIO2xldCBzLGU9MDtmb3IoY29uc3QgbyBvZiB0KWU9PT1pLmxlbmd0aD9pLnB1c2gocz1uZXcgTSh0aGlzLmsoZCgpKSx0aGlzLmsoZCgpKSx0aGlzLHRoaXMub3B0aW9ucykpOnM9aVtlXSxzLl8kQUkobyksZSsrO2U8aS5sZW5ndGgmJih0aGlzLl8kQVIocyYmcy5fJEFCLm5leHRTaWJsaW5nLGUpLGkubGVuZ3RoPWUpfV8kQVIodD10aGlzLl8kQUEubmV4dFNpYmxpbmcsaSl7dmFyIHM7Zm9yKG51bGw9PT0ocz10aGlzLl8kQVApfHx2b2lkIDA9PT1zfHxzLmNhbGwodGhpcywhMSwhMCxpKTt0JiZ0IT09dGhpcy5fJEFCOyl7Y29uc3QgaT10Lm5leHRTaWJsaW5nO3QucmVtb3ZlKCksdD1pfX1zZXRDb25uZWN0ZWQodCl7dmFyIGk7dm9pZCAwPT09dGhpcy5fJEFNJiYodGhpcy5fJENwPXQsbnVsbD09PShpPXRoaXMuXyRBUCl8fHZvaWQgMD09PWl8fGkuY2FsbCh0aGlzLHQpKX19Y2xhc3MgUntjb25zdHJ1Y3Rvcih0LGkscyxlLG8pe3RoaXMudHlwZT0xLHRoaXMuXyRBSD1BLHRoaXMuXyRBTj12b2lkIDAsdGhpcy5lbGVtZW50PXQsdGhpcy5uYW1lPWksdGhpcy5fJEFNPWUsdGhpcy5vcHRpb25zPW8scy5sZW5ndGg+Mnx8XCJcIiE9PXNbMF18fFwiXCIhPT1zWzFdPyh0aGlzLl8kQUg9QXJyYXkocy5sZW5ndGgtMSkuZmlsbChuZXcgU3RyaW5nKSx0aGlzLnN0cmluZ3M9cyk6dGhpcy5fJEFIPUF9Z2V0IHRhZ05hbWUoKXtyZXR1cm4gdGhpcy5lbGVtZW50LnRhZ05hbWV9Z2V0IF8kQVUoKXtyZXR1cm4gdGhpcy5fJEFNLl8kQVV9XyRBSSh0LGk9dGhpcyxzLGUpe2NvbnN0IG89dGhpcy5zdHJpbmdzO2xldCBuPSExO2lmKHZvaWQgMD09PW8pdD1OKHRoaXMsdCxpLDApLG49IXUodCl8fHQhPT10aGlzLl8kQUgmJnQhPT1ULG4mJih0aGlzLl8kQUg9dCk7ZWxzZXtjb25zdCBlPXQ7bGV0IGwsaDtmb3IodD1vWzBdLGw9MDtsPG8ubGVuZ3RoLTE7bCsrKWg9Tih0aGlzLGVbcytsXSxpLGwpLGg9PT1UJiYoaD10aGlzLl8kQUhbbF0pLG58fChuPSF1KGgpfHxoIT09dGhpcy5fJEFIW2xdKSxoPT09QT90PUE6dCE9PUEmJih0Kz0obnVsbCE9aD9oOlwiXCIpK29bbCsxXSksdGhpcy5fJEFIW2xdPWh9biYmIWUmJnRoaXMuaih0KX1qKHQpe3Q9PT1BP3RoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUodGhpcy5uYW1lKTp0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKHRoaXMubmFtZSxudWxsIT10P3Q6XCJcIil9fWNsYXNzIGsgZXh0ZW5kcyBSe2NvbnN0cnVjdG9yKCl7c3VwZXIoLi4uYXJndW1lbnRzKSx0aGlzLnR5cGU9M31qKHQpe3RoaXMuZWxlbWVudFt0aGlzLm5hbWVdPXQ9PT1BP3ZvaWQgMDp0fX1jb25zdCBIPXM/cy5lbXB0eVNjcmlwdDpcIlwiO2NsYXNzIEkgZXh0ZW5kcyBSe2NvbnN0cnVjdG9yKCl7c3VwZXIoLi4uYXJndW1lbnRzKSx0aGlzLnR5cGU9NH1qKHQpe3QmJnQhPT1BP3RoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUodGhpcy5uYW1lLEgpOnRoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUodGhpcy5uYW1lKX19Y2xhc3MgTCBleHRlbmRzIFJ7Y29uc3RydWN0b3IodCxpLHMsZSxvKXtzdXBlcih0LGkscyxlLG8pLHRoaXMudHlwZT01fV8kQUkodCxpPXRoaXMpe3ZhciBzO2lmKCh0PW51bGwhPT0ocz1OKHRoaXMsdCxpLDApKSYmdm9pZCAwIT09cz9zOkEpPT09VClyZXR1cm47Y29uc3QgZT10aGlzLl8kQUgsbz10PT09QSYmZSE9PUF8fHQuY2FwdHVyZSE9PWUuY2FwdHVyZXx8dC5vbmNlIT09ZS5vbmNlfHx0LnBhc3NpdmUhPT1lLnBhc3NpdmUsbj10IT09QSYmKGU9PT1BfHxvKTtvJiZ0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLm5hbWUsdGhpcyxlKSxuJiZ0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLm5hbWUsdGhpcyx0KSx0aGlzLl8kQUg9dH1oYW5kbGVFdmVudCh0KXt2YXIgaSxzO1wiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMuXyRBSD90aGlzLl8kQUguY2FsbChudWxsIT09KHM9bnVsbD09PShpPXRoaXMub3B0aW9ucyl8fHZvaWQgMD09PWk/dm9pZCAwOmkuaG9zdCkmJnZvaWQgMCE9PXM/czp0aGlzLmVsZW1lbnQsdCk6dGhpcy5fJEFILmhhbmRsZUV2ZW50KHQpfX1jbGFzcyB6e2NvbnN0cnVjdG9yKHQsaSxzKXt0aGlzLmVsZW1lbnQ9dCx0aGlzLnR5cGU9Nix0aGlzLl8kQU49dm9pZCAwLHRoaXMuXyRBTT1pLHRoaXMub3B0aW9ucz1zfWdldCBfJEFVKCl7cmV0dXJuIHRoaXMuXyRBTS5fJEFVfV8kQUkodCl7Tih0aGlzLHQpfX1jb25zdCBaPXtPOm8sUDpuLEE6bCxDOjEsTTpQLEw6UyxEOnYsUjpOLEk6TSxWOlIsSDpJLE46TCxVOmssRjp6fSxqPWkubGl0SHRtbFBvbHlmaWxsU3VwcG9ydDtudWxsPT1qfHxqKFYsTSksKG51bGwhPT0odD1pLmxpdEh0bWxWZXJzaW9ucykmJnZvaWQgMCE9PXQ/dDppLmxpdEh0bWxWZXJzaW9ucz1bXSkucHVzaChcIjIuNy40XCIpO2NvbnN0IEI9KHQsaSxzKT0+e3ZhciBlLG87Y29uc3Qgbj1udWxsIT09KGU9bnVsbD09cz92b2lkIDA6cy5yZW5kZXJCZWZvcmUpJiZ2b2lkIDAhPT1lP2U6aTtsZXQgbD1uLl8kbGl0UGFydCQ7aWYodm9pZCAwPT09bCl7Y29uc3QgdD1udWxsIT09KG89bnVsbD09cz92b2lkIDA6cy5yZW5kZXJCZWZvcmUpJiZ2b2lkIDAhPT1vP286bnVsbDtuLl8kbGl0UGFydCQ9bD1uZXcgTShpLmluc2VydEJlZm9yZShkKCksdCksdCx2b2lkIDAsbnVsbCE9cz9zOnt9KX1yZXR1cm4gbC5fJEFJKHQpLGx9O2V4cG9ydHtaIGFzIF8kTEgseCBhcyBodG1sLFQgYXMgbm9DaGFuZ2UsQSBhcyBub3RoaW5nLEIgYXMgcmVuZGVyLGIgYXMgc3ZnfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpdC1odG1sLmpzLm1hcFxuIiwiaW1wb3J0e1JlYWN0aXZlRWxlbWVudCBhcyB0fWZyb21cIkBsaXQvcmVhY3RpdmUtZWxlbWVudFwiO2V4cG9ydCpmcm9tXCJAbGl0L3JlYWN0aXZlLWVsZW1lbnRcIjtpbXBvcnR7cmVuZGVyIGFzIGUsbm9DaGFuZ2UgYXMgaX1mcm9tXCJsaXQtaHRtbFwiO2V4cG9ydCpmcm9tXCJsaXQtaHRtbFwiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovdmFyIGwsbztjb25zdCByPXQ7Y2xhc3MgcyBleHRlbmRzIHR7Y29uc3RydWN0b3IoKXtzdXBlciguLi5hcmd1bWVudHMpLHRoaXMucmVuZGVyT3B0aW9ucz17aG9zdDp0aGlzfSx0aGlzLl8kRG89dm9pZCAwfWNyZWF0ZVJlbmRlclJvb3QoKXt2YXIgdCxlO2NvbnN0IGk9c3VwZXIuY3JlYXRlUmVuZGVyUm9vdCgpO3JldHVybiBudWxsIT09KHQ9KGU9dGhpcy5yZW5kZXJPcHRpb25zKS5yZW5kZXJCZWZvcmUpJiZ2b2lkIDAhPT10fHwoZS5yZW5kZXJCZWZvcmU9aS5maXJzdENoaWxkKSxpfXVwZGF0ZSh0KXtjb25zdCBpPXRoaXMucmVuZGVyKCk7dGhpcy5oYXNVcGRhdGVkfHwodGhpcy5yZW5kZXJPcHRpb25zLmlzQ29ubmVjdGVkPXRoaXMuaXNDb25uZWN0ZWQpLHN1cGVyLnVwZGF0ZSh0KSx0aGlzLl8kRG89ZShpLHRoaXMucmVuZGVyUm9vdCx0aGlzLnJlbmRlck9wdGlvbnMpfWNvbm5lY3RlZENhbGxiYWNrKCl7dmFyIHQ7c3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKSxudWxsPT09KHQ9dGhpcy5fJERvKXx8dm9pZCAwPT09dHx8dC5zZXRDb25uZWN0ZWQoITApfWRpc2Nvbm5lY3RlZENhbGxiYWNrKCl7dmFyIHQ7c3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2soKSxudWxsPT09KHQ9dGhpcy5fJERvKXx8dm9pZCAwPT09dHx8dC5zZXRDb25uZWN0ZWQoITEpfXJlbmRlcigpe3JldHVybiBpfX1zLmZpbmFsaXplZD0hMCxzLl8kbGl0RWxlbWVudCQ9ITAsbnVsbD09PShsPWdsb2JhbFRoaXMubGl0RWxlbWVudEh5ZHJhdGVTdXBwb3J0KXx8dm9pZCAwPT09bHx8bC5jYWxsKGdsb2JhbFRoaXMse0xpdEVsZW1lbnQ6c30pO2NvbnN0IG49Z2xvYmFsVGhpcy5saXRFbGVtZW50UG9seWZpbGxTdXBwb3J0O251bGw9PW58fG4oe0xpdEVsZW1lbnQ6c30pO2NvbnN0IGg9e18kQUs6KHQsZSxpKT0+e3QuXyRBSyhlLGkpfSxfJEFMOnQ9PnQuXyRBTH07KG51bGwhPT0obz1nbG9iYWxUaGlzLmxpdEVsZW1lbnRWZXJzaW9ucykmJnZvaWQgMCE9PW8/bzpnbG9iYWxUaGlzLmxpdEVsZW1lbnRWZXJzaW9ucz1bXSkucHVzaChcIjMuMy4yXCIpO2V4cG9ydHtzIGFzIExpdEVsZW1lbnQsciBhcyBVcGRhdGluZ0VsZW1lbnQsaCBhcyBfJExFfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpdC1lbGVtZW50LmpzLm1hcFxuIiwiaW1wb3J0e2RlY29yYXRlUHJvcGVydHkgYXMgb31mcm9tXCIuL2Jhc2UuanNcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL3ZhciBuO2NvbnN0IGU9bnVsbCE9KG51bGw9PT0obj13aW5kb3cuSFRNTFNsb3RFbGVtZW50KXx8dm9pZCAwPT09bj92b2lkIDA6bi5wcm90b3R5cGUuYXNzaWduZWRFbGVtZW50cyk/KG8sbik9Pm8uYXNzaWduZWRFbGVtZW50cyhuKToobyxuKT0+by5hc3NpZ25lZE5vZGVzKG4pLmZpbHRlcigobz0+by5ub2RlVHlwZT09PU5vZGUuRUxFTUVOVF9OT0RFKSk7ZnVuY3Rpb24gbChuKXtjb25zdHtzbG90Omwsc2VsZWN0b3I6dH09bnVsbCE9bj9uOnt9O3JldHVybiBvKHtkZXNjcmlwdG9yOm89Pih7Z2V0KCl7dmFyIG87Y29uc3Qgcj1cInNsb3RcIisobD9gW25hbWU9JHtsfV1gOlwiOm5vdChbbmFtZV0pXCIpLGk9bnVsbD09PShvPXRoaXMucmVuZGVyUm9vdCl8fHZvaWQgMD09PW8/dm9pZCAwOm8ucXVlcnlTZWxlY3RvcihyKSxzPW51bGwhPWk/ZShpLG4pOltdO3JldHVybiB0P3MuZmlsdGVyKChvPT5vLm1hdGNoZXModCkpKTpzfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pfSl9ZXhwb3J0e2wgYXMgcXVlcnlBc3NpZ25lZEVsZW1lbnRzfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXF1ZXJ5LWFzc2lnbmVkLWVsZW1lbnRzLmpzLm1hcFxuIiwiZXhwb3J0KmZyb21cIkBsaXQvcmVhY3RpdmUtZWxlbWVudFwiO2V4cG9ydCpmcm9tXCJsaXQtaHRtbFwiO2V4cG9ydHtMaXRFbGVtZW50LFVwZGF0aW5nRWxlbWVudCxfJExFfWZyb21cIi4vbGl0LWVsZW1lbnQuanNcIjtleHBvcnQqZnJvbVwiQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvYmFzZS5qc1wiO2V4cG9ydCpmcm9tXCJAbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9jdXN0b20tZWxlbWVudC5qc1wiO2V4cG9ydCpmcm9tXCJAbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9wcm9wZXJ0eS5qc1wiO2V4cG9ydCpmcm9tXCJAbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9zdGF0ZS5qc1wiO2V4cG9ydCpmcm9tXCJAbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9ldmVudC1vcHRpb25zLmpzXCI7ZXhwb3J0KmZyb21cIkBsaXQvcmVhY3RpdmUtZWxlbWVudC9kZWNvcmF0b3JzL3F1ZXJ5LmpzXCI7ZXhwb3J0KmZyb21cIkBsaXQvcmVhY3RpdmUtZWxlbWVudC9kZWNvcmF0b3JzL3F1ZXJ5LWFsbC5qc1wiO2V4cG9ydCpmcm9tXCJAbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9xdWVyeS1hc3luYy5qc1wiO2V4cG9ydCpmcm9tXCJAbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9xdWVyeS1hc3NpZ25lZC1lbGVtZW50cy5qc1wiO2V4cG9ydCpmcm9tXCJAbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9xdWVyeS1hc3NpZ25lZC1ub2Rlcy5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovY29uc29sZS53YXJuKFwiVGhlIG1haW4gJ2xpdC1lbGVtZW50JyBtb2R1bGUgZW50cnlwb2ludCBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXBkYXRlIHlvdXIgaW1wb3J0cyB0byB1c2UgdGhlICdsaXQnIHBhY2thZ2U6ICdsaXQnIGFuZCAnbGl0L2RlY29yYXRvcnMudHMnIG9yIGltcG9ydCBmcm9tICdsaXQtZWxlbWVudC9saXQtZWxlbWVudC50cycuIFNlZSBodHRwczovL2xpdC5kZXYvbXNnL2RlcHJlY2F0ZWQtaW1wb3J0LXBhdGggZm9yIG1vcmUgaW5mb3JtYXRpb24uXCIpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cbmNvbnN0IHQ9d2luZG93LGU9dC5TaGFkb3dSb290JiYodm9pZCAwPT09dC5TaGFkeUNTU3x8dC5TaGFkeUNTUy5uYXRpdmVTaGFkb3cpJiZcImFkb3B0ZWRTdHlsZVNoZWV0c1wiaW4gRG9jdW1lbnQucHJvdG90eXBlJiZcInJlcGxhY2VcImluIENTU1N0eWxlU2hlZXQucHJvdG90eXBlLHM9U3ltYm9sKCksbj1uZXcgV2Vha01hcDtjbGFzcyBve2NvbnN0cnVjdG9yKHQsZSxuKXtpZih0aGlzLl8kY3NzUmVzdWx0JD0hMCxuIT09cyl0aHJvdyBFcnJvcihcIkNTU1Jlc3VsdCBpcyBub3QgY29uc3RydWN0YWJsZS4gVXNlIGB1bnNhZmVDU1NgIG9yIGBjc3NgIGluc3RlYWQuXCIpO3RoaXMuY3NzVGV4dD10LHRoaXMudD1lfWdldCBzdHlsZVNoZWV0KCl7bGV0IHQ9dGhpcy5vO2NvbnN0IHM9dGhpcy50O2lmKGUmJnZvaWQgMD09PXQpe2NvbnN0IGU9dm9pZCAwIT09cyYmMT09PXMubGVuZ3RoO2UmJih0PW4uZ2V0KHMpKSx2b2lkIDA9PT10JiYoKHRoaXMubz10PW5ldyBDU1NTdHlsZVNoZWV0KS5yZXBsYWNlU3luYyh0aGlzLmNzc1RleHQpLGUmJm4uc2V0KHMsdCkpfXJldHVybiB0fXRvU3RyaW5nKCl7cmV0dXJuIHRoaXMuY3NzVGV4dH19Y29uc3Qgcj10PT5uZXcgbyhcInN0cmluZ1wiPT10eXBlb2YgdD90OnQrXCJcIix2b2lkIDAscyksaT0odCwuLi5lKT0+e2NvbnN0IG49MT09PXQubGVuZ3RoP3RbMF06ZS5yZWR1Y2UoKChlLHMsbik9PmUrKHQ9PntpZighMD09PXQuXyRjc3NSZXN1bHQkKXJldHVybiB0LmNzc1RleHQ7aWYoXCJudW1iZXJcIj09dHlwZW9mIHQpcmV0dXJuIHQ7dGhyb3cgRXJyb3IoXCJWYWx1ZSBwYXNzZWQgdG8gJ2NzcycgZnVuY3Rpb24gbXVzdCBiZSBhICdjc3MnIGZ1bmN0aW9uIHJlc3VsdDogXCIrdCtcIi4gVXNlICd1bnNhZmVDU1MnIHRvIHBhc3Mgbm9uLWxpdGVyYWwgdmFsdWVzLCBidXQgdGFrZSBjYXJlIHRvIGVuc3VyZSBwYWdlIHNlY3VyaXR5LlwiKX0pKHMpK3RbbisxXSksdFswXSk7cmV0dXJuIG5ldyBvKG4sdCxzKX0sUz0ocyxuKT0+e2U/cy5hZG9wdGVkU3R5bGVTaGVldHM9bi5tYXAoKHQ9PnQgaW5zdGFuY2VvZiBDU1NTdHlsZVNoZWV0P3Q6dC5zdHlsZVNoZWV0KSk6bi5mb3JFYWNoKChlPT57Y29uc3Qgbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIiksbz10LmxpdE5vbmNlO3ZvaWQgMCE9PW8mJm4uc2V0QXR0cmlidXRlKFwibm9uY2VcIixvKSxuLnRleHRDb250ZW50PWUuY3NzVGV4dCxzLmFwcGVuZENoaWxkKG4pfSkpfSxjPWU/dD0+dDp0PT50IGluc3RhbmNlb2YgQ1NTU3R5bGVTaGVldD8odD0+e2xldCBlPVwiXCI7Zm9yKGNvbnN0IHMgb2YgdC5jc3NSdWxlcyllKz1zLmNzc1RleHQ7cmV0dXJuIHIoZSl9KSh0KTp0O2V4cG9ydHtvIGFzIENTU1Jlc3VsdCxTIGFzIGFkb3B0U3R5bGVzLGkgYXMgY3NzLGMgYXMgZ2V0Q29tcGF0aWJsZVN0eWxlLGUgYXMgc3VwcG9ydHNBZG9wdGluZ1N0eWxlU2hlZXRzLHIgYXMgdW5zYWZlQ1NTfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNzcy10YWcuanMubWFwXG4iLCJpbXBvcnR7Z2V0Q29tcGF0aWJsZVN0eWxlIGFzIHQsYWRvcHRTdHlsZXMgYXMgaX1mcm9tXCIuL2Nzcy10YWcuanNcIjtleHBvcnR7Q1NTUmVzdWx0LGFkb3B0U3R5bGVzLGNzcyxnZXRDb21wYXRpYmxlU3R5bGUsc3VwcG9ydHNBZG9wdGluZ1N0eWxlU2hlZXRzLHVuc2FmZUNTU31mcm9tXCIuL2Nzcy10YWcuanNcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL3ZhciBzO2NvbnN0IGU9d2luZG93LHI9ZS50cnVzdGVkVHlwZXMsaD1yP3IuZW1wdHlTY3JpcHQ6XCJcIixvPWUucmVhY3RpdmVFbGVtZW50UG9seWZpbGxTdXBwb3J0LG49e3RvQXR0cmlidXRlKHQsaSl7c3dpdGNoKGkpe2Nhc2UgQm9vbGVhbjp0PXQ/aDpudWxsO2JyZWFrO2Nhc2UgT2JqZWN0OmNhc2UgQXJyYXk6dD1udWxsPT10P3Q6SlNPTi5zdHJpbmdpZnkodCl9cmV0dXJuIHR9LGZyb21BdHRyaWJ1dGUodCxpKXtsZXQgcz10O3N3aXRjaChpKXtjYXNlIEJvb2xlYW46cz1udWxsIT09dDticmVhaztjYXNlIE51bWJlcjpzPW51bGw9PT10P251bGw6TnVtYmVyKHQpO2JyZWFrO2Nhc2UgT2JqZWN0OmNhc2UgQXJyYXk6dHJ5e3M9SlNPTi5wYXJzZSh0KX1jYXRjaCh0KXtzPW51bGx9fXJldHVybiBzfX0sYT0odCxpKT0+aSE9PXQmJihpPT1pfHx0PT10KSxsPXthdHRyaWJ1dGU6ITAsdHlwZTpTdHJpbmcsY29udmVydGVyOm4scmVmbGVjdDohMSxoYXNDaGFuZ2VkOmF9O2NsYXNzIGQgZXh0ZW5kcyBIVE1MRWxlbWVudHtjb25zdHJ1Y3Rvcigpe3N1cGVyKCksdGhpcy5fJEVpPW5ldyBNYXAsdGhpcy5pc1VwZGF0ZVBlbmRpbmc9ITEsdGhpcy5oYXNVcGRhdGVkPSExLHRoaXMuXyRFbD1udWxsLHRoaXMudSgpfXN0YXRpYyBhZGRJbml0aWFsaXplcih0KXt2YXIgaTt0aGlzLmZpbmFsaXplKCksKG51bGwhPT0oaT10aGlzLmgpJiZ2b2lkIDAhPT1pP2k6dGhpcy5oPVtdKS5wdXNoKHQpfXN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCl7dGhpcy5maW5hbGl6ZSgpO2NvbnN0IHQ9W107cmV0dXJuIHRoaXMuZWxlbWVudFByb3BlcnRpZXMuZm9yRWFjaCgoKGkscyk9Pntjb25zdCBlPXRoaXMuXyRFcChzLGkpO3ZvaWQgMCE9PWUmJih0aGlzLl8kRXYuc2V0KGUscyksdC5wdXNoKGUpKX0pKSx0fXN0YXRpYyBjcmVhdGVQcm9wZXJ0eSh0LGk9bCl7aWYoaS5zdGF0ZSYmKGkuYXR0cmlidXRlPSExKSx0aGlzLmZpbmFsaXplKCksdGhpcy5lbGVtZW50UHJvcGVydGllcy5zZXQodCxpKSwhaS5ub0FjY2Vzc29yJiYhdGhpcy5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkodCkpe2NvbnN0IHM9XCJzeW1ib2xcIj09dHlwZW9mIHQ/U3ltYm9sKCk6XCJfX1wiK3QsZT10aGlzLmdldFByb3BlcnR5RGVzY3JpcHRvcih0LHMsaSk7dm9pZCAwIT09ZSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMucHJvdG90eXBlLHQsZSl9fXN0YXRpYyBnZXRQcm9wZXJ0eURlc2NyaXB0b3IodCxpLHMpe3JldHVybntnZXQoKXtyZXR1cm4gdGhpc1tpXX0sc2V0KGUpe2NvbnN0IHI9dGhpc1t0XTt0aGlzW2ldPWUsdGhpcy5yZXF1ZXN0VXBkYXRlKHQscixzKX0sY29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITB9fXN0YXRpYyBnZXRQcm9wZXJ0eU9wdGlvbnModCl7cmV0dXJuIHRoaXMuZWxlbWVudFByb3BlcnRpZXMuZ2V0KHQpfHxsfXN0YXRpYyBmaW5hbGl6ZSgpe2lmKHRoaXMuaGFzT3duUHJvcGVydHkoXCJmaW5hbGl6ZWRcIikpcmV0dXJuITE7dGhpcy5maW5hbGl6ZWQ9ITA7Y29uc3QgdD1PYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcyk7aWYodC5maW5hbGl6ZSgpLHZvaWQgMCE9PXQuaCYmKHRoaXMuaD1bLi4udC5oXSksdGhpcy5lbGVtZW50UHJvcGVydGllcz1uZXcgTWFwKHQuZWxlbWVudFByb3BlcnRpZXMpLHRoaXMuXyRFdj1uZXcgTWFwLHRoaXMuaGFzT3duUHJvcGVydHkoXCJwcm9wZXJ0aWVzXCIpKXtjb25zdCB0PXRoaXMucHJvcGVydGllcyxpPVsuLi5PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0KSwuLi5PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHQpXTtmb3IoY29uc3QgcyBvZiBpKXRoaXMuY3JlYXRlUHJvcGVydHkocyx0W3NdKX1yZXR1cm4gdGhpcy5lbGVtZW50U3R5bGVzPXRoaXMuZmluYWxpemVTdHlsZXModGhpcy5zdHlsZXMpLCEwfXN0YXRpYyBmaW5hbGl6ZVN0eWxlcyhpKXtjb25zdCBzPVtdO2lmKEFycmF5LmlzQXJyYXkoaSkpe2NvbnN0IGU9bmV3IFNldChpLmZsYXQoMS8wKS5yZXZlcnNlKCkpO2Zvcihjb25zdCBpIG9mIGUpcy51bnNoaWZ0KHQoaSkpfWVsc2Ugdm9pZCAwIT09aSYmcy5wdXNoKHQoaSkpO3JldHVybiBzfXN0YXRpYyBfJEVwKHQsaSl7Y29uc3Qgcz1pLmF0dHJpYnV0ZTtyZXR1cm4hMT09PXM/dm9pZCAwOlwic3RyaW5nXCI9PXR5cGVvZiBzP3M6XCJzdHJpbmdcIj09dHlwZW9mIHQ/dC50b0xvd2VyQ2FzZSgpOnZvaWQgMH11KCl7dmFyIHQ7dGhpcy5fJEVfPW5ldyBQcm9taXNlKCh0PT50aGlzLmVuYWJsZVVwZGF0aW5nPXQpKSx0aGlzLl8kQUw9bmV3IE1hcCx0aGlzLl8kRWcoKSx0aGlzLnJlcXVlc3RVcGRhdGUoKSxudWxsPT09KHQ9dGhpcy5jb25zdHJ1Y3Rvci5oKXx8dm9pZCAwPT09dHx8dC5mb3JFYWNoKCh0PT50KHRoaXMpKSl9YWRkQ29udHJvbGxlcih0KXt2YXIgaSxzOyhudWxsIT09KGk9dGhpcy5fJEVTKSYmdm9pZCAwIT09aT9pOnRoaXMuXyRFUz1bXSkucHVzaCh0KSx2b2lkIDAhPT10aGlzLnJlbmRlclJvb3QmJnRoaXMuaXNDb25uZWN0ZWQmJihudWxsPT09KHM9dC5ob3N0Q29ubmVjdGVkKXx8dm9pZCAwPT09c3x8cy5jYWxsKHQpKX1yZW1vdmVDb250cm9sbGVyKHQpe3ZhciBpO251bGw9PT0oaT10aGlzLl8kRVMpfHx2b2lkIDA9PT1pfHxpLnNwbGljZSh0aGlzLl8kRVMuaW5kZXhPZih0KT4+PjAsMSl9XyRFZygpe3RoaXMuY29uc3RydWN0b3IuZWxlbWVudFByb3BlcnRpZXMuZm9yRWFjaCgoKHQsaSk9Pnt0aGlzLmhhc093blByb3BlcnR5KGkpJiYodGhpcy5fJEVpLnNldChpLHRoaXNbaV0pLGRlbGV0ZSB0aGlzW2ldKX0pKX1jcmVhdGVSZW5kZXJSb290KCl7dmFyIHQ7Y29uc3Qgcz1udWxsIT09KHQ9dGhpcy5zaGFkb3dSb290KSYmdm9pZCAwIT09dD90OnRoaXMuYXR0YWNoU2hhZG93KHRoaXMuY29uc3RydWN0b3Iuc2hhZG93Um9vdE9wdGlvbnMpO3JldHVybiBpKHMsdGhpcy5jb25zdHJ1Y3Rvci5lbGVtZW50U3R5bGVzKSxzfWNvbm5lY3RlZENhbGxiYWNrKCl7dmFyIHQ7dm9pZCAwPT09dGhpcy5yZW5kZXJSb290JiYodGhpcy5yZW5kZXJSb290PXRoaXMuY3JlYXRlUmVuZGVyUm9vdCgpKSx0aGlzLmVuYWJsZVVwZGF0aW5nKCEwKSxudWxsPT09KHQ9dGhpcy5fJEVTKXx8dm9pZCAwPT09dHx8dC5mb3JFYWNoKCh0PT57dmFyIGk7cmV0dXJuIG51bGw9PT0oaT10Lmhvc3RDb25uZWN0ZWQpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLmNhbGwodCl9KSl9ZW5hYmxlVXBkYXRpbmcodCl7fWRpc2Nvbm5lY3RlZENhbGxiYWNrKCl7dmFyIHQ7bnVsbD09PSh0PXRoaXMuXyRFUyl8fHZvaWQgMD09PXR8fHQuZm9yRWFjaCgodD0+e3ZhciBpO3JldHVybiBudWxsPT09KGk9dC5ob3N0RGlzY29ubmVjdGVkKXx8dm9pZCAwPT09aT92b2lkIDA6aS5jYWxsKHQpfSkpfWF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayh0LGkscyl7dGhpcy5fJEFLKHQscyl9XyRFTyh0LGkscz1sKXt2YXIgZTtjb25zdCByPXRoaXMuY29uc3RydWN0b3IuXyRFcCh0LHMpO2lmKHZvaWQgMCE9PXImJiEwPT09cy5yZWZsZWN0KXtjb25zdCBoPSh2b2lkIDAhPT0obnVsbD09PShlPXMuY29udmVydGVyKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS50b0F0dHJpYnV0ZSk/cy5jb252ZXJ0ZXI6bikudG9BdHRyaWJ1dGUoaSxzLnR5cGUpO3RoaXMuXyRFbD10LG51bGw9PWg/dGhpcy5yZW1vdmVBdHRyaWJ1dGUocik6dGhpcy5zZXRBdHRyaWJ1dGUocixoKSx0aGlzLl8kRWw9bnVsbH19XyRBSyh0LGkpe3ZhciBzO2NvbnN0IGU9dGhpcy5jb25zdHJ1Y3RvcixyPWUuXyRFdi5nZXQodCk7aWYodm9pZCAwIT09ciYmdGhpcy5fJEVsIT09cil7Y29uc3QgdD1lLmdldFByb3BlcnR5T3B0aW9ucyhyKSxoPVwiZnVuY3Rpb25cIj09dHlwZW9mIHQuY29udmVydGVyP3tmcm9tQXR0cmlidXRlOnQuY29udmVydGVyfTp2b2lkIDAhPT0obnVsbD09PShzPXQuY29udmVydGVyKXx8dm9pZCAwPT09cz92b2lkIDA6cy5mcm9tQXR0cmlidXRlKT90LmNvbnZlcnRlcjpuO3RoaXMuXyRFbD1yLHRoaXNbcl09aC5mcm9tQXR0cmlidXRlKGksdC50eXBlKSx0aGlzLl8kRWw9bnVsbH19cmVxdWVzdFVwZGF0ZSh0LGkscyl7bGV0IGU9ITA7dm9pZCAwIT09dCYmKCgocz1zfHx0aGlzLmNvbnN0cnVjdG9yLmdldFByb3BlcnR5T3B0aW9ucyh0KSkuaGFzQ2hhbmdlZHx8YSkodGhpc1t0XSxpKT8odGhpcy5fJEFMLmhhcyh0KXx8dGhpcy5fJEFMLnNldCh0LGkpLCEwPT09cy5yZWZsZWN0JiZ0aGlzLl8kRWwhPT10JiYodm9pZCAwPT09dGhpcy5fJEVDJiYodGhpcy5fJEVDPW5ldyBNYXApLHRoaXMuXyRFQy5zZXQodCxzKSkpOmU9ITEpLCF0aGlzLmlzVXBkYXRlUGVuZGluZyYmZSYmKHRoaXMuXyRFXz10aGlzLl8kRWooKSl9YXN5bmMgXyRFaigpe3RoaXMuaXNVcGRhdGVQZW5kaW5nPSEwO3RyeXthd2FpdCB0aGlzLl8kRV99Y2F0Y2godCl7UHJvbWlzZS5yZWplY3QodCl9Y29uc3QgdD10aGlzLnNjaGVkdWxlVXBkYXRlKCk7cmV0dXJuIG51bGwhPXQmJmF3YWl0IHQsIXRoaXMuaXNVcGRhdGVQZW5kaW5nfXNjaGVkdWxlVXBkYXRlKCl7cmV0dXJuIHRoaXMucGVyZm9ybVVwZGF0ZSgpfXBlcmZvcm1VcGRhdGUoKXt2YXIgdDtpZighdGhpcy5pc1VwZGF0ZVBlbmRpbmcpcmV0dXJuO3RoaXMuaGFzVXBkYXRlZCx0aGlzLl8kRWkmJih0aGlzLl8kRWkuZm9yRWFjaCgoKHQsaSk9PnRoaXNbaV09dCkpLHRoaXMuXyRFaT12b2lkIDApO2xldCBpPSExO2NvbnN0IHM9dGhpcy5fJEFMO3RyeXtpPXRoaXMuc2hvdWxkVXBkYXRlKHMpLGk/KHRoaXMud2lsbFVwZGF0ZShzKSxudWxsPT09KHQ9dGhpcy5fJEVTKXx8dm9pZCAwPT09dHx8dC5mb3JFYWNoKCh0PT57dmFyIGk7cmV0dXJuIG51bGw9PT0oaT10Lmhvc3RVcGRhdGUpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLmNhbGwodCl9KSksdGhpcy51cGRhdGUocykpOnRoaXMuXyRFaygpfWNhdGNoKHQpe3Rocm93IGk9ITEsdGhpcy5fJEVrKCksdH1pJiZ0aGlzLl8kQUUocyl9d2lsbFVwZGF0ZSh0KXt9XyRBRSh0KXt2YXIgaTtudWxsPT09KGk9dGhpcy5fJEVTKXx8dm9pZCAwPT09aXx8aS5mb3JFYWNoKCh0PT57dmFyIGk7cmV0dXJuIG51bGw9PT0oaT10Lmhvc3RVcGRhdGVkKXx8dm9pZCAwPT09aT92b2lkIDA6aS5jYWxsKHQpfSkpLHRoaXMuaGFzVXBkYXRlZHx8KHRoaXMuaGFzVXBkYXRlZD0hMCx0aGlzLmZpcnN0VXBkYXRlZCh0KSksdGhpcy51cGRhdGVkKHQpfV8kRWsoKXt0aGlzLl8kQUw9bmV3IE1hcCx0aGlzLmlzVXBkYXRlUGVuZGluZz0hMX1nZXQgdXBkYXRlQ29tcGxldGUoKXtyZXR1cm4gdGhpcy5nZXRVcGRhdGVDb21wbGV0ZSgpfWdldFVwZGF0ZUNvbXBsZXRlKCl7cmV0dXJuIHRoaXMuXyRFX31zaG91bGRVcGRhdGUodCl7cmV0dXJuITB9dXBkYXRlKHQpe3ZvaWQgMCE9PXRoaXMuXyRFQyYmKHRoaXMuXyRFQy5mb3JFYWNoKCgodCxpKT0+dGhpcy5fJEVPKGksdGhpc1tpXSx0KSkpLHRoaXMuXyRFQz12b2lkIDApLHRoaXMuXyRFaygpfXVwZGF0ZWQodCl7fWZpcnN0VXBkYXRlZCh0KXt9fWQuZmluYWxpemVkPSEwLGQuZWxlbWVudFByb3BlcnRpZXM9bmV3IE1hcCxkLmVsZW1lbnRTdHlsZXM9W10sZC5zaGFkb3dSb290T3B0aW9ucz17bW9kZTpcIm9wZW5cIn0sbnVsbD09b3x8byh7UmVhY3RpdmVFbGVtZW50OmR9KSwobnVsbCE9PShzPWUucmVhY3RpdmVFbGVtZW50VmVyc2lvbnMpJiZ2b2lkIDAhPT1zP3M6ZS5yZWFjdGl2ZUVsZW1lbnRWZXJzaW9ucz1bXSkucHVzaChcIjEuNi4xXCIpO2V4cG9ydHtkIGFzIFJlYWN0aXZlRWxlbWVudCxuIGFzIGRlZmF1bHRDb252ZXJ0ZXIsYSBhcyBub3RFcXVhbH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdGl2ZS1lbGVtZW50LmpzLm1hcFxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG52YXIgdDtjb25zdCBpPXdpbmRvdyxzPWkudHJ1c3RlZFR5cGVzLGU9cz9zLmNyZWF0ZVBvbGljeShcImxpdC1odG1sXCIse2NyZWF0ZUhUTUw6dD0+dH0pOnZvaWQgMCxvPVwiJGxpdCRcIixuPWBsaXQkJHsoTWF0aC5yYW5kb20oKStcIlwiKS5zbGljZSg5KX0kYCxsPVwiP1wiK24saD1gPCR7bH0+YCxyPWRvY3VtZW50LGQ9KCk9PnIuY3JlYXRlQ29tbWVudChcIlwiKSx1PXQ9Pm51bGw9PT10fHxcIm9iamVjdFwiIT10eXBlb2YgdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgdCxjPUFycmF5LmlzQXJyYXksdj10PT5jKHQpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZihudWxsPT10P3ZvaWQgMDp0W1N5bWJvbC5pdGVyYXRvcl0pLGE9XCJbIFxcdFxcblxcZlxccl1cIixmPS88KD86KCEtLXxcXC9bXmEtekEtWl0pfChcXC8/W2EtekEtWl1bXj5cXHNdKil8KFxcLz8kKSkvZyxfPS8tLT4vZyxtPS8+L2cscD1SZWdFeHAoYD58JHthfSg/OihbXlxcXFxzXCInPj0vXSspKCR7YX0qPSR7YX0qKD86W14gXFx0XFxuXFxmXFxyXCInXFxgPD49XXwoXCJ8Jyl8KSl8JClgLFwiZ1wiKSxnPS8nL2csJD0vXCIvZyx5PS9eKD86c2NyaXB0fHN0eWxlfHRleHRhcmVhfHRpdGxlKSQvaSx3PXQ9PihpLC4uLnMpPT4oe18kbGl0VHlwZSQ6dCxzdHJpbmdzOmksdmFsdWVzOnN9KSx4PXcoMSksYj13KDIpLFQ9U3ltYm9sLmZvcihcImxpdC1ub0NoYW5nZVwiKSxBPVN5bWJvbC5mb3IoXCJsaXQtbm90aGluZ1wiKSxFPW5ldyBXZWFrTWFwLEM9ci5jcmVhdGVUcmVlV2Fsa2VyKHIsMTI5LG51bGwsITEpLFA9KHQsaSk9Pntjb25zdCBzPXQubGVuZ3RoLTEsbD1bXTtsZXQgcixkPTI9PT1pP1wiPHN2Zz5cIjpcIlwiLHU9Zjtmb3IobGV0IGk9MDtpPHM7aSsrKXtjb25zdCBzPXRbaV07bGV0IGUsYyx2PS0xLGE9MDtmb3IoO2E8cy5sZW5ndGgmJih1Lmxhc3RJbmRleD1hLGM9dS5leGVjKHMpLG51bGwhPT1jKTspYT11Lmxhc3RJbmRleCx1PT09Zj9cIiEtLVwiPT09Y1sxXT91PV86dm9pZCAwIT09Y1sxXT91PW06dm9pZCAwIT09Y1syXT8oeS50ZXN0KGNbMl0pJiYocj1SZWdFeHAoXCI8L1wiK2NbMl0sXCJnXCIpKSx1PXApOnZvaWQgMCE9PWNbM10mJih1PXApOnU9PT1wP1wiPlwiPT09Y1swXT8odT1udWxsIT1yP3I6Zix2PS0xKTp2b2lkIDA9PT1jWzFdP3Y9LTI6KHY9dS5sYXN0SW5kZXgtY1syXS5sZW5ndGgsZT1jWzFdLHU9dm9pZCAwPT09Y1szXT9wOidcIic9PT1jWzNdPyQ6Zyk6dT09PSR8fHU9PT1nP3U9cDp1PT09X3x8dT09PW0/dT1mOih1PXAscj12b2lkIDApO2NvbnN0IHc9dT09PXAmJnRbaSsxXS5zdGFydHNXaXRoKFwiLz5cIik/XCIgXCI6XCJcIjtkKz11PT09Zj9zK2g6dj49MD8obC5wdXNoKGUpLHMuc2xpY2UoMCx2KStvK3Muc2xpY2Uodikrbit3KTpzK24rKC0yPT09dj8obC5wdXNoKHZvaWQgMCksaSk6dyl9Y29uc3QgYz1kKyh0W3NdfHxcIjw/PlwiKSsoMj09PWk/XCI8L3N2Zz5cIjpcIlwiKTtpZighQXJyYXkuaXNBcnJheSh0KXx8IXQuaGFzT3duUHJvcGVydHkoXCJyYXdcIikpdGhyb3cgRXJyb3IoXCJpbnZhbGlkIHRlbXBsYXRlIHN0cmluZ3MgYXJyYXlcIik7cmV0dXJuW3ZvaWQgMCE9PWU/ZS5jcmVhdGVIVE1MKGMpOmMsbF19O2NsYXNzIFZ7Y29uc3RydWN0b3Ioe3N0cmluZ3M6dCxfJGxpdFR5cGUkOml9LGUpe2xldCBoO3RoaXMucGFydHM9W107bGV0IHI9MCx1PTA7Y29uc3QgYz10Lmxlbmd0aC0xLHY9dGhpcy5wYXJ0cyxbYSxmXT1QKHQsaSk7aWYodGhpcy5lbD1WLmNyZWF0ZUVsZW1lbnQoYSxlKSxDLmN1cnJlbnROb2RlPXRoaXMuZWwuY29udGVudCwyPT09aSl7Y29uc3QgdD10aGlzLmVsLmNvbnRlbnQsaT10LmZpcnN0Q2hpbGQ7aS5yZW1vdmUoKSx0LmFwcGVuZCguLi5pLmNoaWxkTm9kZXMpfWZvcig7bnVsbCE9PShoPUMubmV4dE5vZGUoKSkmJnYubGVuZ3RoPGM7KXtpZigxPT09aC5ub2RlVHlwZSl7aWYoaC5oYXNBdHRyaWJ1dGVzKCkpe2NvbnN0IHQ9W107Zm9yKGNvbnN0IGkgb2YgaC5nZXRBdHRyaWJ1dGVOYW1lcygpKWlmKGkuZW5kc1dpdGgobyl8fGkuc3RhcnRzV2l0aChuKSl7Y29uc3Qgcz1mW3UrK107aWYodC5wdXNoKGkpLHZvaWQgMCE9PXMpe2NvbnN0IHQ9aC5nZXRBdHRyaWJ1dGUocy50b0xvd2VyQ2FzZSgpK28pLnNwbGl0KG4pLGk9LyhbLj9AXSk/KC4qKS8uZXhlYyhzKTt2LnB1c2goe3R5cGU6MSxpbmRleDpyLG5hbWU6aVsyXSxzdHJpbmdzOnQsY3RvcjpcIi5cIj09PWlbMV0/azpcIj9cIj09PWlbMV0/STpcIkBcIj09PWlbMV0/TDpSfSl9ZWxzZSB2LnB1c2goe3R5cGU6NixpbmRleDpyfSl9Zm9yKGNvbnN0IGkgb2YgdCloLnJlbW92ZUF0dHJpYnV0ZShpKX1pZih5LnRlc3QoaC50YWdOYW1lKSl7Y29uc3QgdD1oLnRleHRDb250ZW50LnNwbGl0KG4pLGk9dC5sZW5ndGgtMTtpZihpPjApe2gudGV4dENvbnRlbnQ9cz9zLmVtcHR5U2NyaXB0OlwiXCI7Zm9yKGxldCBzPTA7czxpO3MrKyloLmFwcGVuZCh0W3NdLGQoKSksQy5uZXh0Tm9kZSgpLHYucHVzaCh7dHlwZToyLGluZGV4Oisrcn0pO2guYXBwZW5kKHRbaV0sZCgpKX19fWVsc2UgaWYoOD09PWgubm9kZVR5cGUpaWYoaC5kYXRhPT09bCl2LnB1c2goe3R5cGU6MixpbmRleDpyfSk7ZWxzZXtsZXQgdD0tMTtmb3IoOy0xIT09KHQ9aC5kYXRhLmluZGV4T2Yobix0KzEpKTspdi5wdXNoKHt0eXBlOjcsaW5kZXg6cn0pLHQrPW4ubGVuZ3RoLTF9cisrfX1zdGF0aWMgY3JlYXRlRWxlbWVudCh0LGkpe2NvbnN0IHM9ci5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIik7cmV0dXJuIHMuaW5uZXJIVE1MPXQsc319ZnVuY3Rpb24gTih0LGkscz10LGUpe3ZhciBvLG4sbCxoO2lmKGk9PT1UKXJldHVybiBpO2xldCByPXZvaWQgMCE9PWU/bnVsbD09PShvPXMuXyRDbyl8fHZvaWQgMD09PW8/dm9pZCAwOm9bZV06cy5fJENsO2NvbnN0IGQ9dShpKT92b2lkIDA6aS5fJGxpdERpcmVjdGl2ZSQ7cmV0dXJuKG51bGw9PXI/dm9pZCAwOnIuY29uc3RydWN0b3IpIT09ZCYmKG51bGw9PT0obj1udWxsPT1yP3ZvaWQgMDpyLl8kQU8pfHx2b2lkIDA9PT1ufHxuLmNhbGwociwhMSksdm9pZCAwPT09ZD9yPXZvaWQgMDoocj1uZXcgZCh0KSxyLl8kQVQodCxzLGUpKSx2b2lkIDAhPT1lPyhudWxsIT09KGw9KGg9cykuXyRDbykmJnZvaWQgMCE9PWw/bDpoLl8kQ289W10pW2VdPXI6cy5fJENsPXIpLHZvaWQgMCE9PXImJihpPU4odCxyLl8kQVModCxpLnZhbHVlcykscixlKSksaX1jbGFzcyBTe2NvbnN0cnVjdG9yKHQsaSl7dGhpcy5fJEFWPVtdLHRoaXMuXyRBTj12b2lkIDAsdGhpcy5fJEFEPXQsdGhpcy5fJEFNPWl9Z2V0IHBhcmVudE5vZGUoKXtyZXR1cm4gdGhpcy5fJEFNLnBhcmVudE5vZGV9Z2V0IF8kQVUoKXtyZXR1cm4gdGhpcy5fJEFNLl8kQVV9dSh0KXt2YXIgaTtjb25zdHtlbDp7Y29udGVudDpzfSxwYXJ0czplfT10aGlzLl8kQUQsbz0obnVsbCE9PShpPW51bGw9PXQ/dm9pZCAwOnQuY3JlYXRpb25TY29wZSkmJnZvaWQgMCE9PWk/aTpyKS5pbXBvcnROb2RlKHMsITApO0MuY3VycmVudE5vZGU9bztsZXQgbj1DLm5leHROb2RlKCksbD0wLGg9MCxkPWVbMF07Zm9yKDt2b2lkIDAhPT1kOyl7aWYobD09PWQuaW5kZXgpe2xldCBpOzI9PT1kLnR5cGU/aT1uZXcgTShuLG4ubmV4dFNpYmxpbmcsdGhpcyx0KToxPT09ZC50eXBlP2k9bmV3IGQuY3RvcihuLGQubmFtZSxkLnN0cmluZ3MsdGhpcyx0KTo2PT09ZC50eXBlJiYoaT1uZXcgeihuLHRoaXMsdCkpLHRoaXMuXyRBVi5wdXNoKGkpLGQ9ZVsrK2hdfWwhPT0obnVsbD09ZD92b2lkIDA6ZC5pbmRleCkmJihuPUMubmV4dE5vZGUoKSxsKyspfXJldHVybiBDLmN1cnJlbnROb2RlPXIsb312KHQpe2xldCBpPTA7Zm9yKGNvbnN0IHMgb2YgdGhpcy5fJEFWKXZvaWQgMCE9PXMmJih2b2lkIDAhPT1zLnN0cmluZ3M/KHMuXyRBSSh0LHMsaSksaSs9cy5zdHJpbmdzLmxlbmd0aC0yKTpzLl8kQUkodFtpXSkpLGkrK319Y2xhc3MgTXtjb25zdHJ1Y3Rvcih0LGkscyxlKXt2YXIgbzt0aGlzLnR5cGU9Mix0aGlzLl8kQUg9QSx0aGlzLl8kQU49dm9pZCAwLHRoaXMuXyRBQT10LHRoaXMuXyRBQj1pLHRoaXMuXyRBTT1zLHRoaXMub3B0aW9ucz1lLHRoaXMuXyRDcD1udWxsPT09KG89bnVsbD09ZT92b2lkIDA6ZS5pc0Nvbm5lY3RlZCl8fHZvaWQgMD09PW98fG99Z2V0IF8kQVUoKXt2YXIgdCxpO3JldHVybiBudWxsIT09KGk9bnVsbD09PSh0PXRoaXMuXyRBTSl8fHZvaWQgMD09PXQ/dm9pZCAwOnQuXyRBVSkmJnZvaWQgMCE9PWk/aTp0aGlzLl8kQ3B9Z2V0IHBhcmVudE5vZGUoKXtsZXQgdD10aGlzLl8kQUEucGFyZW50Tm9kZTtjb25zdCBpPXRoaXMuXyRBTTtyZXR1cm4gdm9pZCAwIT09aSYmMTE9PT0obnVsbD09dD92b2lkIDA6dC5ub2RlVHlwZSkmJih0PWkucGFyZW50Tm9kZSksdH1nZXQgc3RhcnROb2RlKCl7cmV0dXJuIHRoaXMuXyRBQX1nZXQgZW5kTm9kZSgpe3JldHVybiB0aGlzLl8kQUJ9XyRBSSh0LGk9dGhpcyl7dD1OKHRoaXMsdCxpKSx1KHQpP3Q9PT1BfHxudWxsPT10fHxcIlwiPT09dD8odGhpcy5fJEFIIT09QSYmdGhpcy5fJEFSKCksdGhpcy5fJEFIPUEpOnQhPT10aGlzLl8kQUgmJnQhPT1UJiZ0aGlzLl8odCk6dm9pZCAwIT09dC5fJGxpdFR5cGUkP3RoaXMuZyh0KTp2b2lkIDAhPT10Lm5vZGVUeXBlP3RoaXMuJCh0KTp2KHQpP3RoaXMuVCh0KTp0aGlzLl8odCl9ayh0KXtyZXR1cm4gdGhpcy5fJEFBLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHQsdGhpcy5fJEFCKX0kKHQpe3RoaXMuXyRBSCE9PXQmJih0aGlzLl8kQVIoKSx0aGlzLl8kQUg9dGhpcy5rKHQpKX1fKHQpe3RoaXMuXyRBSCE9PUEmJnUodGhpcy5fJEFIKT90aGlzLl8kQUEubmV4dFNpYmxpbmcuZGF0YT10OnRoaXMuJChyLmNyZWF0ZVRleHROb2RlKHQpKSx0aGlzLl8kQUg9dH1nKHQpe3ZhciBpO2NvbnN0e3ZhbHVlczpzLF8kbGl0VHlwZSQ6ZX09dCxvPVwibnVtYmVyXCI9PXR5cGVvZiBlP3RoaXMuXyRBQyh0KToodm9pZCAwPT09ZS5lbCYmKGUuZWw9Vi5jcmVhdGVFbGVtZW50KGUuaCx0aGlzLm9wdGlvbnMpKSxlKTtpZigobnVsbD09PShpPXRoaXMuXyRBSCl8fHZvaWQgMD09PWk/dm9pZCAwOmkuXyRBRCk9PT1vKXRoaXMuXyRBSC52KHMpO2Vsc2V7Y29uc3QgdD1uZXcgUyhvLHRoaXMpLGk9dC51KHRoaXMub3B0aW9ucyk7dC52KHMpLHRoaXMuJChpKSx0aGlzLl8kQUg9dH19XyRBQyh0KXtsZXQgaT1FLmdldCh0LnN0cmluZ3MpO3JldHVybiB2b2lkIDA9PT1pJiZFLnNldCh0LnN0cmluZ3MsaT1uZXcgVih0KSksaX1UKHQpe2ModGhpcy5fJEFIKXx8KHRoaXMuXyRBSD1bXSx0aGlzLl8kQVIoKSk7Y29uc3QgaT10aGlzLl8kQUg7bGV0IHMsZT0wO2Zvcihjb25zdCBvIG9mIHQpZT09PWkubGVuZ3RoP2kucHVzaChzPW5ldyBNKHRoaXMuayhkKCkpLHRoaXMuayhkKCkpLHRoaXMsdGhpcy5vcHRpb25zKSk6cz1pW2VdLHMuXyRBSShvKSxlKys7ZTxpLmxlbmd0aCYmKHRoaXMuXyRBUihzJiZzLl8kQUIubmV4dFNpYmxpbmcsZSksaS5sZW5ndGg9ZSl9XyRBUih0PXRoaXMuXyRBQS5uZXh0U2libGluZyxpKXt2YXIgcztmb3IobnVsbD09PShzPXRoaXMuXyRBUCl8fHZvaWQgMD09PXN8fHMuY2FsbCh0aGlzLCExLCEwLGkpO3QmJnQhPT10aGlzLl8kQUI7KXtjb25zdCBpPXQubmV4dFNpYmxpbmc7dC5yZW1vdmUoKSx0PWl9fXNldENvbm5lY3RlZCh0KXt2YXIgaTt2b2lkIDA9PT10aGlzLl8kQU0mJih0aGlzLl8kQ3A9dCxudWxsPT09KGk9dGhpcy5fJEFQKXx8dm9pZCAwPT09aXx8aS5jYWxsKHRoaXMsdCkpfX1jbGFzcyBSe2NvbnN0cnVjdG9yKHQsaSxzLGUsbyl7dGhpcy50eXBlPTEsdGhpcy5fJEFIPUEsdGhpcy5fJEFOPXZvaWQgMCx0aGlzLmVsZW1lbnQ9dCx0aGlzLm5hbWU9aSx0aGlzLl8kQU09ZSx0aGlzLm9wdGlvbnM9byxzLmxlbmd0aD4yfHxcIlwiIT09c1swXXx8XCJcIiE9PXNbMV0/KHRoaXMuXyRBSD1BcnJheShzLmxlbmd0aC0xKS5maWxsKG5ldyBTdHJpbmcpLHRoaXMuc3RyaW5ncz1zKTp0aGlzLl8kQUg9QX1nZXQgdGFnTmFtZSgpe3JldHVybiB0aGlzLmVsZW1lbnQudGFnTmFtZX1nZXQgXyRBVSgpe3JldHVybiB0aGlzLl8kQU0uXyRBVX1fJEFJKHQsaT10aGlzLHMsZSl7Y29uc3Qgbz10aGlzLnN0cmluZ3M7bGV0IG49ITE7aWYodm9pZCAwPT09byl0PU4odGhpcyx0LGksMCksbj0hdSh0KXx8dCE9PXRoaXMuXyRBSCYmdCE9PVQsbiYmKHRoaXMuXyRBSD10KTtlbHNle2NvbnN0IGU9dDtsZXQgbCxoO2Zvcih0PW9bMF0sbD0wO2w8by5sZW5ndGgtMTtsKyspaD1OKHRoaXMsZVtzK2xdLGksbCksaD09PVQmJihoPXRoaXMuXyRBSFtsXSksbnx8KG49IXUoaCl8fGghPT10aGlzLl8kQUhbbF0pLGg9PT1BP3Q9QTp0IT09QSYmKHQrPShudWxsIT1oP2g6XCJcIikrb1tsKzFdKSx0aGlzLl8kQUhbbF09aH1uJiYhZSYmdGhpcy5qKHQpfWoodCl7dD09PUE/dGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSh0aGlzLm5hbWUpOnRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUodGhpcy5uYW1lLG51bGwhPXQ/dDpcIlwiKX19Y2xhc3MgayBleHRlbmRzIFJ7Y29uc3RydWN0b3IoKXtzdXBlciguLi5hcmd1bWVudHMpLHRoaXMudHlwZT0zfWoodCl7dGhpcy5lbGVtZW50W3RoaXMubmFtZV09dD09PUE/dm9pZCAwOnR9fWNvbnN0IEg9cz9zLmVtcHR5U2NyaXB0OlwiXCI7Y2xhc3MgSSBleHRlbmRzIFJ7Y29uc3RydWN0b3IoKXtzdXBlciguLi5hcmd1bWVudHMpLHRoaXMudHlwZT00fWoodCl7dCYmdCE9PUE/dGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSh0aGlzLm5hbWUsSCk6dGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSh0aGlzLm5hbWUpfX1jbGFzcyBMIGV4dGVuZHMgUntjb25zdHJ1Y3Rvcih0LGkscyxlLG8pe3N1cGVyKHQsaSxzLGUsbyksdGhpcy50eXBlPTV9XyRBSSh0LGk9dGhpcyl7dmFyIHM7aWYoKHQ9bnVsbCE9PShzPU4odGhpcyx0LGksMCkpJiZ2b2lkIDAhPT1zP3M6QSk9PT1UKXJldHVybjtjb25zdCBlPXRoaXMuXyRBSCxvPXQ9PT1BJiZlIT09QXx8dC5jYXB0dXJlIT09ZS5jYXB0dXJlfHx0Lm9uY2UhPT1lLm9uY2V8fHQucGFzc2l2ZSE9PWUucGFzc2l2ZSxuPXQhPT1BJiYoZT09PUF8fG8pO28mJnRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMubmFtZSx0aGlzLGUpLG4mJnRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHRoaXMubmFtZSx0aGlzLHQpLHRoaXMuXyRBSD10fWhhbmRsZUV2ZW50KHQpe3ZhciBpLHM7XCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5fJEFIP3RoaXMuXyRBSC5jYWxsKG51bGwhPT0ocz1udWxsPT09KGk9dGhpcy5vcHRpb25zKXx8dm9pZCAwPT09aT92b2lkIDA6aS5ob3N0KSYmdm9pZCAwIT09cz9zOnRoaXMuZWxlbWVudCx0KTp0aGlzLl8kQUguaGFuZGxlRXZlbnQodCl9fWNsYXNzIHp7Y29uc3RydWN0b3IodCxpLHMpe3RoaXMuZWxlbWVudD10LHRoaXMudHlwZT02LHRoaXMuXyRBTj12b2lkIDAsdGhpcy5fJEFNPWksdGhpcy5vcHRpb25zPXN9Z2V0IF8kQVUoKXtyZXR1cm4gdGhpcy5fJEFNLl8kQVV9XyRBSSh0KXtOKHRoaXMsdCl9fWNvbnN0IFo9e086byxQOm4sQTpsLEM6MSxNOlAsTDpTLEQ6dixSOk4sSTpNLFY6UixIOkksTjpMLFU6ayxGOnp9LGo9aS5saXRIdG1sUG9seWZpbGxTdXBwb3J0O251bGw9PWp8fGooVixNKSwobnVsbCE9PSh0PWkubGl0SHRtbFZlcnNpb25zKSYmdm9pZCAwIT09dD90OmkubGl0SHRtbFZlcnNpb25zPVtdKS5wdXNoKFwiMi43LjRcIik7Y29uc3QgQj0odCxpLHMpPT57dmFyIGUsbztjb25zdCBuPW51bGwhPT0oZT1udWxsPT1zP3ZvaWQgMDpzLnJlbmRlckJlZm9yZSkmJnZvaWQgMCE9PWU/ZTppO2xldCBsPW4uXyRsaXRQYXJ0JDtpZih2b2lkIDA9PT1sKXtjb25zdCB0PW51bGwhPT0obz1udWxsPT1zP3ZvaWQgMDpzLnJlbmRlckJlZm9yZSkmJnZvaWQgMCE9PW8/bzpudWxsO24uXyRsaXRQYXJ0JD1sPW5ldyBNKGkuaW5zZXJ0QmVmb3JlKGQoKSx0KSx0LHZvaWQgMCxudWxsIT1zP3M6e30pfXJldHVybiBsLl8kQUkodCksbH07ZXhwb3J0e1ogYXMgXyRMSCx4IGFzIGh0bWwsVCBhcyBub0NoYW5nZSxBIGFzIG5vdGhpbmcsQiBhcyByZW5kZXIsYiBhcyBzdmd9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGl0LWh0bWwuanMubWFwXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cbmNvbnN0IHQ9d2luZG93LGU9dC5TaGFkb3dSb290JiYodm9pZCAwPT09dC5TaGFkeUNTU3x8dC5TaGFkeUNTUy5uYXRpdmVTaGFkb3cpJiZcImFkb3B0ZWRTdHlsZVNoZWV0c1wiaW4gRG9jdW1lbnQucHJvdG90eXBlJiZcInJlcGxhY2VcImluIENTU1N0eWxlU2hlZXQucHJvdG90eXBlLHM9U3ltYm9sKCksbj1uZXcgV2Vha01hcDtjbGFzcyBve2NvbnN0cnVjdG9yKHQsZSxuKXtpZih0aGlzLl8kY3NzUmVzdWx0JD0hMCxuIT09cyl0aHJvdyBFcnJvcihcIkNTU1Jlc3VsdCBpcyBub3QgY29uc3RydWN0YWJsZS4gVXNlIGB1bnNhZmVDU1NgIG9yIGBjc3NgIGluc3RlYWQuXCIpO3RoaXMuY3NzVGV4dD10LHRoaXMudD1lfWdldCBzdHlsZVNoZWV0KCl7bGV0IHQ9dGhpcy5vO2NvbnN0IHM9dGhpcy50O2lmKGUmJnZvaWQgMD09PXQpe2NvbnN0IGU9dm9pZCAwIT09cyYmMT09PXMubGVuZ3RoO2UmJih0PW4uZ2V0KHMpKSx2b2lkIDA9PT10JiYoKHRoaXMubz10PW5ldyBDU1NTdHlsZVNoZWV0KS5yZXBsYWNlU3luYyh0aGlzLmNzc1RleHQpLGUmJm4uc2V0KHMsdCkpfXJldHVybiB0fXRvU3RyaW5nKCl7cmV0dXJuIHRoaXMuY3NzVGV4dH19Y29uc3Qgcj10PT5uZXcgbyhcInN0cmluZ1wiPT10eXBlb2YgdD90OnQrXCJcIix2b2lkIDAscyksaT0odCwuLi5lKT0+e2NvbnN0IG49MT09PXQubGVuZ3RoP3RbMF06ZS5yZWR1Y2UoKChlLHMsbik9PmUrKHQ9PntpZighMD09PXQuXyRjc3NSZXN1bHQkKXJldHVybiB0LmNzc1RleHQ7aWYoXCJudW1iZXJcIj09dHlwZW9mIHQpcmV0dXJuIHQ7dGhyb3cgRXJyb3IoXCJWYWx1ZSBwYXNzZWQgdG8gJ2NzcycgZnVuY3Rpb24gbXVzdCBiZSBhICdjc3MnIGZ1bmN0aW9uIHJlc3VsdDogXCIrdCtcIi4gVXNlICd1bnNhZmVDU1MnIHRvIHBhc3Mgbm9uLWxpdGVyYWwgdmFsdWVzLCBidXQgdGFrZSBjYXJlIHRvIGVuc3VyZSBwYWdlIHNlY3VyaXR5LlwiKX0pKHMpK3RbbisxXSksdFswXSk7cmV0dXJuIG5ldyBvKG4sdCxzKX0sUz0ocyxuKT0+e2U/cy5hZG9wdGVkU3R5bGVTaGVldHM9bi5tYXAoKHQ9PnQgaW5zdGFuY2VvZiBDU1NTdHlsZVNoZWV0P3Q6dC5zdHlsZVNoZWV0KSk6bi5mb3JFYWNoKChlPT57Y29uc3Qgbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIiksbz10LmxpdE5vbmNlO3ZvaWQgMCE9PW8mJm4uc2V0QXR0cmlidXRlKFwibm9uY2VcIixvKSxuLnRleHRDb250ZW50PWUuY3NzVGV4dCxzLmFwcGVuZENoaWxkKG4pfSkpfSxjPWU/dD0+dDp0PT50IGluc3RhbmNlb2YgQ1NTU3R5bGVTaGVldD8odD0+e2xldCBlPVwiXCI7Zm9yKGNvbnN0IHMgb2YgdC5jc3NSdWxlcyllKz1zLmNzc1RleHQ7cmV0dXJuIHIoZSl9KSh0KTp0O2V4cG9ydHtvIGFzIENTU1Jlc3VsdCxTIGFzIGFkb3B0U3R5bGVzLGkgYXMgY3NzLGMgYXMgZ2V0Q29tcGF0aWJsZVN0eWxlLGUgYXMgc3VwcG9ydHNBZG9wdGluZ1N0eWxlU2hlZXRzLHIgYXMgdW5zYWZlQ1NTfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNzcy10YWcuanMubWFwXG4iLCJpbXBvcnR7Z2V0Q29tcGF0aWJsZVN0eWxlIGFzIHQsYWRvcHRTdHlsZXMgYXMgaX1mcm9tXCIuL2Nzcy10YWcuanNcIjtleHBvcnR7Q1NTUmVzdWx0LGFkb3B0U3R5bGVzLGNzcyxnZXRDb21wYXRpYmxlU3R5bGUsc3VwcG9ydHNBZG9wdGluZ1N0eWxlU2hlZXRzLHVuc2FmZUNTU31mcm9tXCIuL2Nzcy10YWcuanNcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL3ZhciBzO2NvbnN0IGU9d2luZG93LHI9ZS50cnVzdGVkVHlwZXMsaD1yP3IuZW1wdHlTY3JpcHQ6XCJcIixvPWUucmVhY3RpdmVFbGVtZW50UG9seWZpbGxTdXBwb3J0LG49e3RvQXR0cmlidXRlKHQsaSl7c3dpdGNoKGkpe2Nhc2UgQm9vbGVhbjp0PXQ/aDpudWxsO2JyZWFrO2Nhc2UgT2JqZWN0OmNhc2UgQXJyYXk6dD1udWxsPT10P3Q6SlNPTi5zdHJpbmdpZnkodCl9cmV0dXJuIHR9LGZyb21BdHRyaWJ1dGUodCxpKXtsZXQgcz10O3N3aXRjaChpKXtjYXNlIEJvb2xlYW46cz1udWxsIT09dDticmVhaztjYXNlIE51bWJlcjpzPW51bGw9PT10P251bGw6TnVtYmVyKHQpO2JyZWFrO2Nhc2UgT2JqZWN0OmNhc2UgQXJyYXk6dHJ5e3M9SlNPTi5wYXJzZSh0KX1jYXRjaCh0KXtzPW51bGx9fXJldHVybiBzfX0sYT0odCxpKT0+aSE9PXQmJihpPT1pfHx0PT10KSxsPXthdHRyaWJ1dGU6ITAsdHlwZTpTdHJpbmcsY29udmVydGVyOm4scmVmbGVjdDohMSxoYXNDaGFuZ2VkOmF9O2NsYXNzIGQgZXh0ZW5kcyBIVE1MRWxlbWVudHtjb25zdHJ1Y3Rvcigpe3N1cGVyKCksdGhpcy5fJEVpPW5ldyBNYXAsdGhpcy5pc1VwZGF0ZVBlbmRpbmc9ITEsdGhpcy5oYXNVcGRhdGVkPSExLHRoaXMuXyRFbD1udWxsLHRoaXMudSgpfXN0YXRpYyBhZGRJbml0aWFsaXplcih0KXt2YXIgaTt0aGlzLmZpbmFsaXplKCksKG51bGwhPT0oaT10aGlzLmgpJiZ2b2lkIDAhPT1pP2k6dGhpcy5oPVtdKS5wdXNoKHQpfXN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCl7dGhpcy5maW5hbGl6ZSgpO2NvbnN0IHQ9W107cmV0dXJuIHRoaXMuZWxlbWVudFByb3BlcnRpZXMuZm9yRWFjaCgoKGkscyk9Pntjb25zdCBlPXRoaXMuXyRFcChzLGkpO3ZvaWQgMCE9PWUmJih0aGlzLl8kRXYuc2V0KGUscyksdC5wdXNoKGUpKX0pKSx0fXN0YXRpYyBjcmVhdGVQcm9wZXJ0eSh0LGk9bCl7aWYoaS5zdGF0ZSYmKGkuYXR0cmlidXRlPSExKSx0aGlzLmZpbmFsaXplKCksdGhpcy5lbGVtZW50UHJvcGVydGllcy5zZXQodCxpKSwhaS5ub0FjY2Vzc29yJiYhdGhpcy5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkodCkpe2NvbnN0IHM9XCJzeW1ib2xcIj09dHlwZW9mIHQ/U3ltYm9sKCk6XCJfX1wiK3QsZT10aGlzLmdldFByb3BlcnR5RGVzY3JpcHRvcih0LHMsaSk7dm9pZCAwIT09ZSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMucHJvdG90eXBlLHQsZSl9fXN0YXRpYyBnZXRQcm9wZXJ0eURlc2NyaXB0b3IodCxpLHMpe3JldHVybntnZXQoKXtyZXR1cm4gdGhpc1tpXX0sc2V0KGUpe2NvbnN0IHI9dGhpc1t0XTt0aGlzW2ldPWUsdGhpcy5yZXF1ZXN0VXBkYXRlKHQscixzKX0sY29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITB9fXN0YXRpYyBnZXRQcm9wZXJ0eU9wdGlvbnModCl7cmV0dXJuIHRoaXMuZWxlbWVudFByb3BlcnRpZXMuZ2V0KHQpfHxsfXN0YXRpYyBmaW5hbGl6ZSgpe2lmKHRoaXMuaGFzT3duUHJvcGVydHkoXCJmaW5hbGl6ZWRcIikpcmV0dXJuITE7dGhpcy5maW5hbGl6ZWQ9ITA7Y29uc3QgdD1PYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcyk7aWYodC5maW5hbGl6ZSgpLHZvaWQgMCE9PXQuaCYmKHRoaXMuaD1bLi4udC5oXSksdGhpcy5lbGVtZW50UHJvcGVydGllcz1uZXcgTWFwKHQuZWxlbWVudFByb3BlcnRpZXMpLHRoaXMuXyRFdj1uZXcgTWFwLHRoaXMuaGFzT3duUHJvcGVydHkoXCJwcm9wZXJ0aWVzXCIpKXtjb25zdCB0PXRoaXMucHJvcGVydGllcyxpPVsuLi5PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0KSwuLi5PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHQpXTtmb3IoY29uc3QgcyBvZiBpKXRoaXMuY3JlYXRlUHJvcGVydHkocyx0W3NdKX1yZXR1cm4gdGhpcy5lbGVtZW50U3R5bGVzPXRoaXMuZmluYWxpemVTdHlsZXModGhpcy5zdHlsZXMpLCEwfXN0YXRpYyBmaW5hbGl6ZVN0eWxlcyhpKXtjb25zdCBzPVtdO2lmKEFycmF5LmlzQXJyYXkoaSkpe2NvbnN0IGU9bmV3IFNldChpLmZsYXQoMS8wKS5yZXZlcnNlKCkpO2Zvcihjb25zdCBpIG9mIGUpcy51bnNoaWZ0KHQoaSkpfWVsc2Ugdm9pZCAwIT09aSYmcy5wdXNoKHQoaSkpO3JldHVybiBzfXN0YXRpYyBfJEVwKHQsaSl7Y29uc3Qgcz1pLmF0dHJpYnV0ZTtyZXR1cm4hMT09PXM/dm9pZCAwOlwic3RyaW5nXCI9PXR5cGVvZiBzP3M6XCJzdHJpbmdcIj09dHlwZW9mIHQ/dC50b0xvd2VyQ2FzZSgpOnZvaWQgMH11KCl7dmFyIHQ7dGhpcy5fJEVfPW5ldyBQcm9taXNlKCh0PT50aGlzLmVuYWJsZVVwZGF0aW5nPXQpKSx0aGlzLl8kQUw9bmV3IE1hcCx0aGlzLl8kRWcoKSx0aGlzLnJlcXVlc3RVcGRhdGUoKSxudWxsPT09KHQ9dGhpcy5jb25zdHJ1Y3Rvci5oKXx8dm9pZCAwPT09dHx8dC5mb3JFYWNoKCh0PT50KHRoaXMpKSl9YWRkQ29udHJvbGxlcih0KXt2YXIgaSxzOyhudWxsIT09KGk9dGhpcy5fJEVTKSYmdm9pZCAwIT09aT9pOnRoaXMuXyRFUz1bXSkucHVzaCh0KSx2b2lkIDAhPT10aGlzLnJlbmRlclJvb3QmJnRoaXMuaXNDb25uZWN0ZWQmJihudWxsPT09KHM9dC5ob3N0Q29ubmVjdGVkKXx8dm9pZCAwPT09c3x8cy5jYWxsKHQpKX1yZW1vdmVDb250cm9sbGVyKHQpe3ZhciBpO251bGw9PT0oaT10aGlzLl8kRVMpfHx2b2lkIDA9PT1pfHxpLnNwbGljZSh0aGlzLl8kRVMuaW5kZXhPZih0KT4+PjAsMSl9XyRFZygpe3RoaXMuY29uc3RydWN0b3IuZWxlbWVudFByb3BlcnRpZXMuZm9yRWFjaCgoKHQsaSk9Pnt0aGlzLmhhc093blByb3BlcnR5KGkpJiYodGhpcy5fJEVpLnNldChpLHRoaXNbaV0pLGRlbGV0ZSB0aGlzW2ldKX0pKX1jcmVhdGVSZW5kZXJSb290KCl7dmFyIHQ7Y29uc3Qgcz1udWxsIT09KHQ9dGhpcy5zaGFkb3dSb290KSYmdm9pZCAwIT09dD90OnRoaXMuYXR0YWNoU2hhZG93KHRoaXMuY29uc3RydWN0b3Iuc2hhZG93Um9vdE9wdGlvbnMpO3JldHVybiBpKHMsdGhpcy5jb25zdHJ1Y3Rvci5lbGVtZW50U3R5bGVzKSxzfWNvbm5lY3RlZENhbGxiYWNrKCl7dmFyIHQ7dm9pZCAwPT09dGhpcy5yZW5kZXJSb290JiYodGhpcy5yZW5kZXJSb290PXRoaXMuY3JlYXRlUmVuZGVyUm9vdCgpKSx0aGlzLmVuYWJsZVVwZGF0aW5nKCEwKSxudWxsPT09KHQ9dGhpcy5fJEVTKXx8dm9pZCAwPT09dHx8dC5mb3JFYWNoKCh0PT57dmFyIGk7cmV0dXJuIG51bGw9PT0oaT10Lmhvc3RDb25uZWN0ZWQpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLmNhbGwodCl9KSl9ZW5hYmxlVXBkYXRpbmcodCl7fWRpc2Nvbm5lY3RlZENhbGxiYWNrKCl7dmFyIHQ7bnVsbD09PSh0PXRoaXMuXyRFUyl8fHZvaWQgMD09PXR8fHQuZm9yRWFjaCgodD0+e3ZhciBpO3JldHVybiBudWxsPT09KGk9dC5ob3N0RGlzY29ubmVjdGVkKXx8dm9pZCAwPT09aT92b2lkIDA6aS5jYWxsKHQpfSkpfWF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayh0LGkscyl7dGhpcy5fJEFLKHQscyl9XyRFTyh0LGkscz1sKXt2YXIgZTtjb25zdCByPXRoaXMuY29uc3RydWN0b3IuXyRFcCh0LHMpO2lmKHZvaWQgMCE9PXImJiEwPT09cy5yZWZsZWN0KXtjb25zdCBoPSh2b2lkIDAhPT0obnVsbD09PShlPXMuY29udmVydGVyKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS50b0F0dHJpYnV0ZSk/cy5jb252ZXJ0ZXI6bikudG9BdHRyaWJ1dGUoaSxzLnR5cGUpO3RoaXMuXyRFbD10LG51bGw9PWg/dGhpcy5yZW1vdmVBdHRyaWJ1dGUocik6dGhpcy5zZXRBdHRyaWJ1dGUocixoKSx0aGlzLl8kRWw9bnVsbH19XyRBSyh0LGkpe3ZhciBzO2NvbnN0IGU9dGhpcy5jb25zdHJ1Y3RvcixyPWUuXyRFdi5nZXQodCk7aWYodm9pZCAwIT09ciYmdGhpcy5fJEVsIT09cil7Y29uc3QgdD1lLmdldFByb3BlcnR5T3B0aW9ucyhyKSxoPVwiZnVuY3Rpb25cIj09dHlwZW9mIHQuY29udmVydGVyP3tmcm9tQXR0cmlidXRlOnQuY29udmVydGVyfTp2b2lkIDAhPT0obnVsbD09PShzPXQuY29udmVydGVyKXx8dm9pZCAwPT09cz92b2lkIDA6cy5mcm9tQXR0cmlidXRlKT90LmNvbnZlcnRlcjpuO3RoaXMuXyRFbD1yLHRoaXNbcl09aC5mcm9tQXR0cmlidXRlKGksdC50eXBlKSx0aGlzLl8kRWw9bnVsbH19cmVxdWVzdFVwZGF0ZSh0LGkscyl7bGV0IGU9ITA7dm9pZCAwIT09dCYmKCgocz1zfHx0aGlzLmNvbnN0cnVjdG9yLmdldFByb3BlcnR5T3B0aW9ucyh0KSkuaGFzQ2hhbmdlZHx8YSkodGhpc1t0XSxpKT8odGhpcy5fJEFMLmhhcyh0KXx8dGhpcy5fJEFMLnNldCh0LGkpLCEwPT09cy5yZWZsZWN0JiZ0aGlzLl8kRWwhPT10JiYodm9pZCAwPT09dGhpcy5fJEVDJiYodGhpcy5fJEVDPW5ldyBNYXApLHRoaXMuXyRFQy5zZXQodCxzKSkpOmU9ITEpLCF0aGlzLmlzVXBkYXRlUGVuZGluZyYmZSYmKHRoaXMuXyRFXz10aGlzLl8kRWooKSl9YXN5bmMgXyRFaigpe3RoaXMuaXNVcGRhdGVQZW5kaW5nPSEwO3RyeXthd2FpdCB0aGlzLl8kRV99Y2F0Y2godCl7UHJvbWlzZS5yZWplY3QodCl9Y29uc3QgdD10aGlzLnNjaGVkdWxlVXBkYXRlKCk7cmV0dXJuIG51bGwhPXQmJmF3YWl0IHQsIXRoaXMuaXNVcGRhdGVQZW5kaW5nfXNjaGVkdWxlVXBkYXRlKCl7cmV0dXJuIHRoaXMucGVyZm9ybVVwZGF0ZSgpfXBlcmZvcm1VcGRhdGUoKXt2YXIgdDtpZighdGhpcy5pc1VwZGF0ZVBlbmRpbmcpcmV0dXJuO3RoaXMuaGFzVXBkYXRlZCx0aGlzLl8kRWkmJih0aGlzLl8kRWkuZm9yRWFjaCgoKHQsaSk9PnRoaXNbaV09dCkpLHRoaXMuXyRFaT12b2lkIDApO2xldCBpPSExO2NvbnN0IHM9dGhpcy5fJEFMO3RyeXtpPXRoaXMuc2hvdWxkVXBkYXRlKHMpLGk/KHRoaXMud2lsbFVwZGF0ZShzKSxudWxsPT09KHQ9dGhpcy5fJEVTKXx8dm9pZCAwPT09dHx8dC5mb3JFYWNoKCh0PT57dmFyIGk7cmV0dXJuIG51bGw9PT0oaT10Lmhvc3RVcGRhdGUpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLmNhbGwodCl9KSksdGhpcy51cGRhdGUocykpOnRoaXMuXyRFaygpfWNhdGNoKHQpe3Rocm93IGk9ITEsdGhpcy5fJEVrKCksdH1pJiZ0aGlzLl8kQUUocyl9d2lsbFVwZGF0ZSh0KXt9XyRBRSh0KXt2YXIgaTtudWxsPT09KGk9dGhpcy5fJEVTKXx8dm9pZCAwPT09aXx8aS5mb3JFYWNoKCh0PT57dmFyIGk7cmV0dXJuIG51bGw9PT0oaT10Lmhvc3RVcGRhdGVkKXx8dm9pZCAwPT09aT92b2lkIDA6aS5jYWxsKHQpfSkpLHRoaXMuaGFzVXBkYXRlZHx8KHRoaXMuaGFzVXBkYXRlZD0hMCx0aGlzLmZpcnN0VXBkYXRlZCh0KSksdGhpcy51cGRhdGVkKHQpfV8kRWsoKXt0aGlzLl8kQUw9bmV3IE1hcCx0aGlzLmlzVXBkYXRlUGVuZGluZz0hMX1nZXQgdXBkYXRlQ29tcGxldGUoKXtyZXR1cm4gdGhpcy5nZXRVcGRhdGVDb21wbGV0ZSgpfWdldFVwZGF0ZUNvbXBsZXRlKCl7cmV0dXJuIHRoaXMuXyRFX31zaG91bGRVcGRhdGUodCl7cmV0dXJuITB9dXBkYXRlKHQpe3ZvaWQgMCE9PXRoaXMuXyRFQyYmKHRoaXMuXyRFQy5mb3JFYWNoKCgodCxpKT0+dGhpcy5fJEVPKGksdGhpc1tpXSx0KSkpLHRoaXMuXyRFQz12b2lkIDApLHRoaXMuXyRFaygpfXVwZGF0ZWQodCl7fWZpcnN0VXBkYXRlZCh0KXt9fWQuZmluYWxpemVkPSEwLGQuZWxlbWVudFByb3BlcnRpZXM9bmV3IE1hcCxkLmVsZW1lbnRTdHlsZXM9W10sZC5zaGFkb3dSb290T3B0aW9ucz17bW9kZTpcIm9wZW5cIn0sbnVsbD09b3x8byh7UmVhY3RpdmVFbGVtZW50OmR9KSwobnVsbCE9PShzPWUucmVhY3RpdmVFbGVtZW50VmVyc2lvbnMpJiZ2b2lkIDAhPT1zP3M6ZS5yZWFjdGl2ZUVsZW1lbnRWZXJzaW9ucz1bXSkucHVzaChcIjEuNi4xXCIpO2V4cG9ydHtkIGFzIFJlYWN0aXZlRWxlbWVudCxuIGFzIGRlZmF1bHRDb252ZXJ0ZXIsYSBhcyBub3RFcXVhbH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdGl2ZS1lbGVtZW50LmpzLm1hcFxuIiwiaW1wb3J0e1JlYWN0aXZlRWxlbWVudCBhcyB0fWZyb21cIkBsaXQvcmVhY3RpdmUtZWxlbWVudFwiO2V4cG9ydCpmcm9tXCJAbGl0L3JlYWN0aXZlLWVsZW1lbnRcIjtpbXBvcnR7cmVuZGVyIGFzIGUsbm9DaGFuZ2UgYXMgaX1mcm9tXCJsaXQtaHRtbFwiO2V4cG9ydCpmcm9tXCJsaXQtaHRtbFwiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovdmFyIGwsbztjb25zdCByPXQ7Y2xhc3MgcyBleHRlbmRzIHR7Y29uc3RydWN0b3IoKXtzdXBlciguLi5hcmd1bWVudHMpLHRoaXMucmVuZGVyT3B0aW9ucz17aG9zdDp0aGlzfSx0aGlzLl8kRG89dm9pZCAwfWNyZWF0ZVJlbmRlclJvb3QoKXt2YXIgdCxlO2NvbnN0IGk9c3VwZXIuY3JlYXRlUmVuZGVyUm9vdCgpO3JldHVybiBudWxsIT09KHQ9KGU9dGhpcy5yZW5kZXJPcHRpb25zKS5yZW5kZXJCZWZvcmUpJiZ2b2lkIDAhPT10fHwoZS5yZW5kZXJCZWZvcmU9aS5maXJzdENoaWxkKSxpfXVwZGF0ZSh0KXtjb25zdCBpPXRoaXMucmVuZGVyKCk7dGhpcy5oYXNVcGRhdGVkfHwodGhpcy5yZW5kZXJPcHRpb25zLmlzQ29ubmVjdGVkPXRoaXMuaXNDb25uZWN0ZWQpLHN1cGVyLnVwZGF0ZSh0KSx0aGlzLl8kRG89ZShpLHRoaXMucmVuZGVyUm9vdCx0aGlzLnJlbmRlck9wdGlvbnMpfWNvbm5lY3RlZENhbGxiYWNrKCl7dmFyIHQ7c3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKSxudWxsPT09KHQ9dGhpcy5fJERvKXx8dm9pZCAwPT09dHx8dC5zZXRDb25uZWN0ZWQoITApfWRpc2Nvbm5lY3RlZENhbGxiYWNrKCl7dmFyIHQ7c3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2soKSxudWxsPT09KHQ9dGhpcy5fJERvKXx8dm9pZCAwPT09dHx8dC5zZXRDb25uZWN0ZWQoITEpfXJlbmRlcigpe3JldHVybiBpfX1zLmZpbmFsaXplZD0hMCxzLl8kbGl0RWxlbWVudCQ9ITAsbnVsbD09PShsPWdsb2JhbFRoaXMubGl0RWxlbWVudEh5ZHJhdGVTdXBwb3J0KXx8dm9pZCAwPT09bHx8bC5jYWxsKGdsb2JhbFRoaXMse0xpdEVsZW1lbnQ6c30pO2NvbnN0IG49Z2xvYmFsVGhpcy5saXRFbGVtZW50UG9seWZpbGxTdXBwb3J0O251bGw9PW58fG4oe0xpdEVsZW1lbnQ6c30pO2NvbnN0IGg9e18kQUs6KHQsZSxpKT0+e3QuXyRBSyhlLGkpfSxfJEFMOnQ9PnQuXyRBTH07KG51bGwhPT0obz1nbG9iYWxUaGlzLmxpdEVsZW1lbnRWZXJzaW9ucykmJnZvaWQgMCE9PW8/bzpnbG9iYWxUaGlzLmxpdEVsZW1lbnRWZXJzaW9ucz1bXSkucHVzaChcIjMuMy4yXCIpO2V4cG9ydHtzIGFzIExpdEVsZW1lbnQsciBhcyBVcGRhdGluZ0VsZW1lbnQsaCBhcyBfJExFfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpdC1lbGVtZW50LmpzLm1hcFxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG5jb25zdCBlPWU9Pm49PlwiZnVuY3Rpb25cIj09dHlwZW9mIG4/KChlLG4pPT4oY3VzdG9tRWxlbWVudHMuZGVmaW5lKGUsbiksbikpKGUsbik6KChlLG4pPT57Y29uc3R7a2luZDp0LGVsZW1lbnRzOnN9PW47cmV0dXJue2tpbmQ6dCxlbGVtZW50czpzLGZpbmlzaGVyKG4pe2N1c3RvbUVsZW1lbnRzLmRlZmluZShlLG4pfX19KShlLG4pO2V4cG9ydHtlIGFzIGN1c3RvbUVsZW1lbnR9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3VzdG9tLWVsZW1lbnQuanMubWFwXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cbmNvbnN0IGk9KGksZSk9PlwibWV0aG9kXCI9PT1lLmtpbmQmJmUuZGVzY3JpcHRvciYmIShcInZhbHVlXCJpbiBlLmRlc2NyaXB0b3IpP3suLi5lLGZpbmlzaGVyKG4pe24uY3JlYXRlUHJvcGVydHkoZS5rZXksaSl9fTp7a2luZDpcImZpZWxkXCIsa2V5OlN5bWJvbCgpLHBsYWNlbWVudDpcIm93blwiLGRlc2NyaXB0b3I6e30sb3JpZ2luYWxLZXk6ZS5rZXksaW5pdGlhbGl6ZXIoKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmluaXRpYWxpemVyJiYodGhpc1tlLmtleV09ZS5pbml0aWFsaXplci5jYWxsKHRoaXMpKX0sZmluaXNoZXIobil7bi5jcmVhdGVQcm9wZXJ0eShlLmtleSxpKX19O2Z1bmN0aW9uIGUoZSl7cmV0dXJuKG4sdCk9PnZvaWQgMCE9PXQ/KChpLGUsbik9PntlLmNvbnN0cnVjdG9yLmNyZWF0ZVByb3BlcnR5KG4saSl9KShlLG4sdCk6aShlLG4pfWV4cG9ydHtlIGFzIHByb3BlcnR5fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3BlcnR5LmpzLm1hcFxuIiwiaW1wb3J0e3Byb3BlcnR5IGFzIHJ9ZnJvbVwiLi9wcm9wZXJ0eS5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovZnVuY3Rpb24gdCh0KXtyZXR1cm4gcih7Li4udCxzdGF0ZTohMH0pfWV4cG9ydHt0IGFzIHN0YXRlfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXRlLmpzLm1hcFxuIiwiaW1wb3J0e2RlY29yYXRlUHJvcGVydHkgYXMgb31mcm9tXCIuL2Jhc2UuanNcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL3ZhciBuO2NvbnN0IGU9bnVsbCE9KG51bGw9PT0obj13aW5kb3cuSFRNTFNsb3RFbGVtZW50KXx8dm9pZCAwPT09bj92b2lkIDA6bi5wcm90b3R5cGUuYXNzaWduZWRFbGVtZW50cyk/KG8sbik9Pm8uYXNzaWduZWRFbGVtZW50cyhuKToobyxuKT0+by5hc3NpZ25lZE5vZGVzKG4pLmZpbHRlcigobz0+by5ub2RlVHlwZT09PU5vZGUuRUxFTUVOVF9OT0RFKSk7ZnVuY3Rpb24gbChuKXtjb25zdHtzbG90Omwsc2VsZWN0b3I6dH09bnVsbCE9bj9uOnt9O3JldHVybiBvKHtkZXNjcmlwdG9yOm89Pih7Z2V0KCl7dmFyIG87Y29uc3Qgcj1cInNsb3RcIisobD9gW25hbWU9JHtsfV1gOlwiOm5vdChbbmFtZV0pXCIpLGk9bnVsbD09PShvPXRoaXMucmVuZGVyUm9vdCl8fHZvaWQgMD09PW8/dm9pZCAwOm8ucXVlcnlTZWxlY3RvcihyKSxzPW51bGwhPWk/ZShpLG4pOltdO3JldHVybiB0P3MuZmlsdGVyKChvPT5vLm1hdGNoZXModCkpKTpzfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pfSl9ZXhwb3J0e2wgYXMgcXVlcnlBc3NpZ25lZEVsZW1lbnRzfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXF1ZXJ5LWFzc2lnbmVkLWVsZW1lbnRzLmpzLm1hcFxuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSBcImxpdFwiO1xuXG5leHBvcnQgY29uc3QgRm9ybXVsYUVkaXRvclN0eWxlcyA9IGNzc2BcbiAgI3d5c2l3eWctZWRpdG9yIHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgYm9yZGVyOiBub25lO1xuICAgIHBhZGRpbmc6IDRweDtcbiAgICBjYXJldC1jb2xvcjogdmFyKC0tZmUtY2FyZXQtY29sb3IsICNmZmYpO1xuICAgIGNvbG9yOiB2YXIoLS1mZS10ZXh0LWNvbG9yLCAjZjdmMWZmKTtcbiAgICBsaW5lLWhlaWdodDogMS4xO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1mZS1ib3JkZXItcmFkaXVzLCA0cHgpIHZhcigtLWZlLWJvcmRlci1yYWRpdXMsIDRweCkgMHB4XG4gICAgICAwcHg7XG4gICAgb3ZlcmZsb3c6IGF1dG87XG4gICAgYm9yZGVyOiAycHggc29saWQgYmxhY2s7XG4gICAgb3V0bGluZTogMHB4IHNvbGlkIGJsYWNrO1xuICAgIHdoaXRlLXNwYWNlOiBwcmUtd3JhcDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1mZS1iYWNrZ3JvdW5kLWNvbG9yLCAjMjIyMjIyKTtcbiAgICBtYXJnaW46IDBweDtcbiAgfVxuXG4gICN3eXNpd3lnLWVyciB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgYm9yZGVyLXJhZGl1czogMHB4IDBweCB2YXIoLS1mZS1ib3JkZXItcmFkaXVzLCA0cHgpXG4gICAgICB2YXIoLS1mZS1ib3JkZXItcmFkaXVzLCA0cHgpO1xuICAgIGNvbG9yOiB2YXIoLS1mZS1lcnItdGV4dC1jb2xvciwgI2ZjNTE0Zik7XG4gICAgYm9yZGVyOiAycHggc29saWQgYmxhY2s7XG4gICAgLyogYm9yZGVyLXRvcDogMHB4OyAqL1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWZlLWJhY2tncm91bmQtY29sb3IsICMyMjIyMjIpO1xuICAgIHBhZGRpbmc6IDRweDtcbiAgICBtYXJnaW46IDBweCAwcHggOHB4IDBweDtcbiAgfVxuXG4gIC53eXNpd3lnLW5vLWVyciB7XG4gICAgY29sb3I6ICMwOTg2NjggIWltcG9ydGFudDtcbiAgfVxuXG4gIC53eXNpd3lnSW50ZXJuYWxzLmVycm9yIHtcbiAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbiAgICAtd2Via2l0LXRleHQtZGVjb3JhdGlvbi1jb2xvcjogdmFyKC0tZmUtZXJyLXVuZGVybGluZS1jb2xvciwgI2ZjNTE0Zik7XG4gICAgdGV4dC1kZWNvcmF0aW9uLWNvbG9yOiB2YXIoLS1mZS1lcnItdW5kZXJsaW5lLWNvbG9yLCAjZmM1MTRmKTtcbiAgICAtd2Via2l0LXRleHQtZGVjb3JhdGlvbi1zdHlsZTogd2F2eTtcbiAgICB0ZXh0LWRlY29yYXRpb24tc3R5bGU6IHdhdnk7XG4gICAgdGV4dC1kZWNvcmF0aW9uLXRoaWNrbmVzczogMXB4O1xuICAgIHRleHQtZGVjb3JhdGlvbi1jb2xvcjogdmFyKC0tZmUtZXJyLXVuZGVybGluZS1jb2xvciwgcmVkKTtcbiAgfVxuXG4gIC53eXNpd3lnSW50ZXJuYWxzLmJyYWNrZXQge1xuICAgIGNvbG9yOiB2YXIoLS1mZS1icmFja2V0LWNvbG9yLCAjZmM1MTRmKTtcbiAgfVxuXG4gIC53eXNpd3lnSW50ZXJuYWxzLm9wZXJhdG9yIHtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICBjb2xvcjogdmFyKC0tZmUtb3BlcmF0b3ItY29sb3IsICNmYzYxOGQpO1xuICB9XG5cbiAgLnd5c2l3eWdJbnRlcm5hbHMudmFyaWFibGUge1xuICAgIGNvbG9yOiB2YXIoLS1mZS12YXJpYWJsZS1jb2xvciwgI2ZjNjE4ZCk7XG4gIH1cbmA7XG4iLCJpbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0JztcblxuZXhwb3J0IGNvbnN0IFVuZGVybGluZWRCdXR0b25TdHlsZXMgPSBodG1sYFxuICA8c3R5bGU+XG4gICAgLnByaW1hcnktdGV4dC11bmRlcmxpbmVkIHtcbiAgICAgIGZvbnQtZmFtaWx5OiB2YXIoLS10aGVtZS1mb250KTtcbiAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgIGZvbnQtc2l6ZTogdmFyKC0tc2Vjb25kYXJ5LWZvbnQtc2l6ZSwgMTZweCk7XG4gICAgICBjb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvciwgIzIwNTA4MSk7XG4gICAgICBwYWRkaW5nOiAwO1xuICAgICAgbWFyZ2luOiAwO1xuICAgICAgYm9yZGVyLXJhZGl1czogMDtcbiAgICAgIG1pbi13aWR0aDogbWF4LWNvbnRlbnQ7XG4gICAgICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbiAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCByZ2JhKHZhcigtLXNlY29uZGFyeS1jb2xvci1yZ2IpLCAwLjMpO1xuICAgIH1cblxuICAgIC5zZWNvbmRhcnktdGV4dC11bmRlcmxpbmVkIHtcbiAgICAgIGZvbnQtZmFtaWx5OiB2YXIoLS10aGVtZS1mb250KTtcbiAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgIGZvbnQtc2l6ZTogdmFyKC0tc2Vjb25kYXJ5LWZvbnQtc2l6ZSwgMTZweCk7XG4gICAgICBjb2xvcjogdmFyKC0tc2Vjb25kYXJ5LWNvbG9yLCAjNTE1MTUxKTtcbiAgICAgIG1hcmdpbjogMDtcbiAgICAgIHBhZGRpbmc6IDA7XG4gICAgICBib3JkZXItcmFkaXVzOiAwO1xuICAgICAgbWluLXdpZHRoOiBtYXgtY29udGVudDtcbiAgICAgIHRleHQtdHJhbnNmb3JtOiBub25lO1xuICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHJnYmEodmFyKC0tc2Vjb25kYXJ5LWNvbG9yLXJnYiksIDAuMyk7XG4gICAgfVxuICA8L3N0eWxlPlxuYDtcblxuZXhwb3J0IGNvbnN0IFRleHRCdXR0b25TdHlsZXMgPSBodG1sYFxuICA8c3R5bGU+XG4gICAgLnByaW1hcnktdGV4dC1idXR0b24ge1xuICAgICAgZm9udC1mYW1pbHk6IHZhcigtLXRoZW1lLWZvbnQpO1xuICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgZm9udC1zaXplOiB2YXIoLS1zZWNvbmRhcnktZm9udC1zaXplLCAxNnB4KTtcbiAgICAgIGNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yLCAjMjA1MDgxKTtcbiAgICAgIHBhZGRpbmc6IDAgOHB4O1xuICAgICAgbWluLXdpZHRoOiA2NHB4O1xuICAgICAgaGVpZ2h0OiB2YXIoLS1idXR0b24taGVpZ2h0LCAzNnB4KTtcbiAgICAgIG1hcmdpbjogMDtcbiAgICAgIHRleHQtdHJhbnNmb3JtOiBub25lO1xuICAgIH1cblxuICAgIC5zZWNvbmRhcnktdGV4dC1idXR0b24ge1xuICAgICAgZm9udC1mYW1pbHk6IHZhcigtLXRoZW1lLWZvbnQpO1xuICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgZm9udC1zaXplOiB2YXIoLS1zZWNvbmRhcnktZm9udC1zaXplLCAxNnB4KTtcbiAgICAgIGNvbG9yOiB2YXIoLS1zZWNvbmRhcnktY29sb3IsICM1MTUxNTEpO1xuICAgICAgcGFkZGluZzogMCA4cHg7XG4gICAgICBtaW4td2lkdGg6IDY0cHg7XG4gICAgICBtYXJnaW46IDA7XG4gICAgICBoZWlnaHQ6IHZhcigtLWJ1dHRvbi1oZWlnaHQsIDM2cHgpO1xuICAgICAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XG4gICAgfVxuXG4gICAgLnByaW1hcnktdGV4dC1idXR0b246aG92ZXIge1xuICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgfVxuXG4gICAgLnNlY29uZGFyeS10ZXh0LWJ1dHRvbjpob3ZlciB7XG4gICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICB9XG5cbiAgICAucHJpbWFyeS10ZXh0LWJ1dHRvbltkaXNhYmxlZF0sIC5zZWNvbmRhcnktdGV4dC1idXR0b25bZGlzYWJsZWRdIHtcbiAgICAgICAgb3BhY2l0eTogMC41O1xuICAgIH1cbiAgPC9zdHlsZT5cbmA7XG5leHBvcnQgY29uc3QgUHJpbWFyeUJ1dHRvblN0eWxlcyA9IGh0bWxgXG4gIDxzdHlsZT5cbiAgICAucHJpbWFyeS1vdXRsaW5lZCB7XG4gICAgICBmb250LWZhbWlseTogdmFyKC0tdGhlbWUtZm9udCk7XG4gICAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1wcmltYXJ5LWNvbG9yLCAjMjA1MDgxKTtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgICAgIGZvbnQtc2l6ZTogdmFyKC0tc2Vjb25kYXJ5LWZvbnQtc2l6ZSwgMTZweCk7XG4gICAgICBjb2xvcjogdmFyKC0tc2Vjb25kYXJ5LWNvbG9yLCAjNTE1MTUxKTtcbiAgICAgIHBhZGRpbmc6IDAgdmFyKC0tYnV0dG9uLXBhZGRpbmcsIDE2cHgpO1xuICAgICAgbWluLXdpZHRoOiA2NHB4O1xuICAgICAgbWFyZ2luOiAwO1xuICAgICAgaGVpZ2h0OiB2YXIoLS1idXR0b24taGVpZ2h0LCAzNnB4KTtcbiAgICAgIHRleHQtdHJhbnNmb3JtOiBub25lO1xuICAgIH1cbiAgICAucHJpbWFyeS1vdXRsaW5lZDpob3ZlciB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yLCAjMjA1MDgxKTtcbiAgICAgIGNvbG9yOiB2YXIoLS1saWdodC1jb2xvciwgI2ZmZik7XG4gICAgfVxuICAgIC5wcmltYXJ5LWNvbG9yZWQge1xuICAgICAgZm9udC1mYW1pbHk6IHZhcigtLXRoZW1lLWZvbnQpO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvciwgIzIwNTA4MSk7XG4gICAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgICBmb250LXNpemU6IHZhcigtLXNlY29uZGFyeS1mb250LXNpemUsIDE2cHgpO1xuICAgICAgY29sb3I6IHZhcigtLWxpZ2h0LWNvbG9yLCAjZmZmKTtcbiAgICAgIG1hcmdpbjogMDtcbiAgICAgIHBhZGRpbmc6IDAgdmFyKC0tYnV0dG9uLXBhZGRpbmcsIDE2cHgpO1xuICAgICAgbWluLXdpZHRoOiA2NHB4O1xuICAgICAgaGVpZ2h0OiB2YXIoLS1idXR0b24taGVpZ2h0LCAzNnB4KTtcbiAgICAgIHRleHQtdHJhbnNmb3JtOiBub25lO1xuICAgIH1cbiAgICAucHJpbWFyeS1jb2xvcmVkOmhvdmVyIHtcbiAgICAgIGJveC1zaGFkb3c6IDAgMXB4IDJweCAxcHggdmFyKC0tcHJpbWFyeS1jb2xvciwgIzIwNTA4MSk7XG4gICAgfVxuICAgIC5wcmltYXJ5LW91dGxpbmVkW2Rpc2FibGVkXSwgLnByaW1hcnktY29sb3JlZFtkaXNhYmxlZF0ge1xuICAgICAgICBvcGFjaXR5OiAwLjU7XG4gICAgfVxuICA8L3N0eWxlPlxuYDtcblxuZXhwb3J0IGNvbnN0IFNlY29uZGFyeUJ1dHRvblN0eWxlcyA9IGh0bWxgXG4gIDxzdHlsZT5cbiAgICAuc2Vjb25kYXJ5LW91dGxpbmVkIHtcbiAgICAgIGZvbnQtZmFtaWx5OiB2YXIoLS10aGVtZS1mb250KTtcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEodmFyKC0tc2Vjb25kYXJ5LWNvbG9yLXJnYiksIDAuMyk7XG4gICAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgICBmb250LXNpemU6IHZhcigtLXNlY29uZGFyeS1mb250LXNpemUsIDE2cHgpO1xuICAgICAgY29sb3I6IHZhcigtLXNlY29uZGFyeS1jb2xvciwgIzUxNTE1MSk7XG4gICAgICBwYWRkaW5nOiAwIHZhcigtLWJ1dHRvbi1wYWRkaW5nLCAxNnB4KTtcbiAgICAgIG1hcmdpbjogMDtcbiAgICAgIG1pbi13aWR0aDogNjRweDtcbiAgICAgIGhlaWdodDogdmFyKC0tYnV0dG9uLWhlaWdodCwgMzZweCk7XG4gICAgICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbiAgICB9XG5cbiAgICAuc2Vjb25kYXJ5LW91dGxpbmVkOmhvdmVyIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNlY29uZGFyeS1jb2xvciwgIzUxNTE1MSk7XG4gICAgICBjb2xvcjogdmFyKC0tbGlnaHQtY29sb3IsICNmZmYpO1xuICAgIH1cblxuICAgIC5zZWNvbmRhcnktY29sb3JlZCB7XG4gICAgICBmb250LWZhbWlseTogdmFyKC0tdGhlbWUtZm9udCk7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zZWNvbmRhcnktY29sb3IsICM1MTUxNTEpO1xuICAgICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICAgICAgZm9udC1zaXplOiB2YXIoLS1zZWNvbmRhcnktZm9udC1zaXplLCAxNnB4KTtcbiAgICAgIGNvbG9yOiB2YXIoLS1saWdodC1jb2xvciwgI2ZmZik7XG4gICAgICBwYWRkaW5nOiAwIHZhcigtLWJ1dHRvbi1wYWRkaW5nLCAxNnB4KTtcbiAgICAgIG1hcmdpbjogMDtcbiAgICAgIG1pbi13aWR0aDogNjRweDtcbiAgICAgIGhlaWdodDogdmFyKC0tYnV0dG9uLWhlaWdodCwgMzZweCk7XG4gICAgICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbiAgICB9XG5cbiAgICAuc2Vjb25kYXJ5LWNvbG9yZWQ6aG92ZXIge1xuICAgICAgYm94LXNoYWRvdzogMCAxcHggMnB4IDFweCB2YXIoLS1zZWNvbmRhcnktY29sb3IsICM1MTUxNTEpO1xuICAgIH1cblxuICAgIC5zZWNvbmRhcnktb3V0bGluZWRbZGlzYWJsZWRdLCAuc2Vjb25kYXJ5LWNvbG9yZWRbZGlzYWJsZWRdIHtcbiAgICAgICAgb3BhY2l0eTogMC41O1xuICAgIH1cbiAgPC9zdHlsZT5cbmA7XG5cbmV4cG9ydCBjb25zdCBBbGVydEJ1dHRvblN0eWxlcyA9IGh0bWxgXG4gIDxzdHlsZT5cbiAgICAuYWxlcnQtb3V0bGluZWQge1xuICAgICAgZm9udC1mYW1pbHk6IHZhcigtLXRoZW1lLWZvbnQpO1xuICAgICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tZXJyb3ItY29sb3IpO1xuICAgICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICAgICAgZm9udC1zaXplOiB2YXIoLS1zZWNvbmRhcnktZm9udC1zaXplLCAxNnB4KTtcbiAgICAgIGNvbG9yOiB2YXIoLS1lcnJvci1jb2xvciwgI2Q1MDAwMCk7XG4gICAgICBwYWRkaW5nOiAwIHZhcigtLWJ1dHRvbi1wYWRkaW5nLCAxNnB4KTtcbiAgICAgIG1hcmdpbjogMDtcbiAgICAgIG1pbi13aWR0aDogNjRweDtcbiAgICAgIGhlaWdodDogdmFyKC0tYnV0dG9uLWhlaWdodCwgMzZweCk7XG4gICAgICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbiAgICB9XG5cbiAgICAuYWxlcnQtb3V0bGluZWQ6aG92ZXIge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZXJyb3ItY29sb3ItbDEsICNkYjQ0MzcpO1xuICAgICAgY29sb3I6IHZhcigtLWxpZ2h0LWNvbG9yLCAjZmZmKTtcbiAgICB9XG5cbiAgICAuYWxlcnQtY29sb3JlZCB7XG4gICAgICBmb250LWZhbWlseTogdmFyKC0tdGhlbWUtZm9udCk7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1lcnJvci1jb2xvciwgI2Q1MDAwMCk7XG4gICAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgICBmb250LXNpemU6IHZhcigtLXNlY29uZGFyeS1mb250LXNpemUsIDE2cHgpO1xuICAgICAgY29sb3I6IHZhcigtLWxpZ2h0LWNvbG9yLCAjZmZmKTtcbiAgICAgIHBhZGRpbmc6IDAgdmFyKC0tYnV0dG9uLXBhZGRpbmcsIDE2cHgpO1xuICAgICAgbWFyZ2luOiAwO1xuICAgICAgbWluLXdpZHRoOiA2NHB4O1xuICAgICAgaGVpZ2h0OiB2YXIoLS1idXR0b24taGVpZ2h0LCAzNnB4KTtcbiAgICAgIHRleHQtdHJhbnNmb3JtOiBub25lO1xuICAgIH1cblxuICAgIC5hbGVydC1jb2xvcmVkOmhvdmVyIHtcbiAgICAgIGJveC1zaGFkb3c6IDAgMXB4IDJweCAxcHggdmFyKC0tZXJyb3ItY29sb3IsICNkNTAwMDApO1xuICAgIH1cblxuICAgIC5hbGVydC1vdXRsaW5lZFtkaXNhYmxlZF0sIC5hbGVydC1jb2xvcmVkW2Rpc2FibGVkXSB7XG4gICAgICAgIG9wYWNpdHk6IDAuNTtcbiAgICB9XG4gIDwvc3R5bGU+XG5gO1xuXG5leHBvcnQgY29uc3QgVG9nZ2xlQnV0dG9uU3R5bGVzID0gaHRtbGBcbiAgPHN0eWxlPlxuICAgIC50b2dnbGUtZ3JvdXAge1xuICAgICAgZGlzcGxheTogZmxleDsganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDsgYWxpZ24taXRlbXM6IGNlbnRlcjsgZmxleC13cmFwOiB3cmFwO1xuICAgIH1cblxuICAgIC50b2dnbGUtZ3JvdXAgLnRvZ2dsZTpmaXJzdC1jaGlsZHtcbiAgICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDVweDsgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogNXB4O1xuICAgIH1cbiAgICAudG9nZ2xlLWdyb3VwIC50b2dnbGU6bGFzdC1jaGlsZHtcbiAgICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiA1cHg7IGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiA1cHg7XG4gICAgfVxuXG4gICAgLnRvZ2dsZSB7XG4gICAgICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbiAgICAgIG1hcmdpbjogMHB4O1xuICAgICAgYm9yZGVyLXJhZGl1czogMHB4O1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1zZWNvbmRhcnktY29sb3ItbDMpO1xuICAgICAgY29sb3I6IHZhcigtLXNlY29uZGFyeS1jb2xvcik7XG4gICAgICBmb250LXNpemU6IHZhcigtLXNlY29uZGFyeS1mb250LXNpemUsIDE2cHgpO1xuICAgICAgZm9udC1mYW1pbHk6IHZhcigtLXRoZW1lLWZvbnQpO1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xuICAgICAgbWluLXdpZHRoOiA2NHB4O1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB9XG5cbiAgICAudG9nZ2xlLnNtYWxsIHtcbiAgICAgIGhlaWdodDogMzBweDtcbiAgICAgIGZvbnQtc2l6ZTogdmFyKC0tdGVydGlhcnktZm9udC1zaXplLCAxNHB4KTtcbiAgICB9XG5cbiAgICAudG9nZ2xlOmhvdmVyIHtcbiAgICAgIGJveC1zaGFkb3c6IDAgMXB4IDJweCAxcHggcmdiYSh2YXIoLS1zZWNvbmRhcnktY29sb3ItcmdiKSwgMC4xKTtcbiAgICB9XG5cbiAgICAuc2VsZWN0ZWQtdG9nZ2xlIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNlY29uZGFyeS1jb2xvcik7XG4gICAgICBjb2xvcjogdmFyKC0tbGlnaHQtY29sb3IsICNmZmYpO1xuICAgIH1cblxuICAgIC50b2dnbGUgaXJvbi1pY29ue1xuICAgICAgLS1pcm9uLWljb24taGVpZ2h0OiB2YXIoLS1ib2R5LWZvbnQtc2l6ZSwgMTZweCk7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDVweDtcbiAgICB9XG5cbiAgICAudG9nZ2xlIG13Yy1pY29ue1xuICAgICAgLS1tZGMtaWNvbi1zaXplOiB2YXIoLS1ib2R5LWZvbnQtc2l6ZSwgMTZweCk7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDVweDtcbiAgICB9XG4gIDwvc3R5bGU+XG5gO1xuXG5leHBvcnQgY29uc3QgRmFiU3R5bGVzID0gaHRtbGBcbiAgPHN0eWxlPlxuICAgIHBhcGVyLWZhYiB7XG4gICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIGJvdHRvbTogMyU7XG4gICAgICByaWdodDogMiU7XG4gICAgfVxuXG4gICAgcGFwZXItZmFiW2Rpc2FibGVkXSwgLmZhYltkaXNhYmxlZF0ge1xuICAgICAgICBvcGFjaXR5OiAwLjU7XG4gICAgfVxuXG4gICAgLmZhYiB7XG4gICAgICBmb250LXNpemU6IHZhcigtLXNlY29uZGFyeS1mb250LXNpemUsIDE2cHgpO1xuICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIGJvdHRvbTogMyU7XG4gICAgICByaWdodDogMiU7XG4gICAgICBib3gtc2hhZG93OiB2YXIoLS1wYXBlci1tYXRlcmlhbC1lbGV2YXRpb24tMl8tX2JveC1zaGFkb3cpO1xuICAgICAgZm9udC1mYW1pbHk6IHZhcigtLXRoZW1lLWZvbnQpO1xuICAgIH1cblxuICAgIC5jb2xvcmVkLWZhYiB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zZWNvbmRhcnktY29sb3IsICM1MTUxNTEpO1xuICAgICAgLS1pcm9uLWljb24taGVpZ2h0OiB2YXIoLS1oMi1mb250LXNpemUsIDI2cHgpO1xuICAgICAgLS1pcm9uLWljb24td2lkdGg6IHZhcigtLWgyLWZvbnQtc2l6ZSwgMjZweCk7XG4gICAgICBjb2xvcjogdmFyKC0tbGlnaHQtY29sb3IsICNmZmYpO1xuICAgIH1cblxuICAgIC5saWdodC1jb2xvcmVkLWZhYiB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1saWdodC1jb2xvciwgI2ZmZik7XG4gICAgICAtLWlyb24taWNvbi1oZWlnaHQ6IHZhcigtLWgyLWZvbnQtc2l6ZSwgMjBweCk7XG4gICAgICAtLWlyb24taWNvbi13aWR0aDogdmFyKC0taDItZm9udC1zaXplLCAyMHB4KTtcbiAgICAgIGNvbG9yOiB2YXIoLS1zZWNvbmRhcnktY29sb3IpO1xuICAgICAgLyogLS1pcm9uLWljb24tc3Ryb2tlLWNvbG9yOiB2YXIoLS1zZWNvbmRhcnktY29sb3IpOyAqL1xuICAgIH1cblxuICAgIC5saWdodC1jb2xvcmVkLWZhYjpob3ZlcixcbiAgICAuY29sb3JlZC1mYWI6aG92ZXIge1xuICAgICAgYm94LXNoYWRvdzogdmFyKC0tcGFwZXItbWF0ZXJpYWwtZWxldmF0aW9uLTNfLV9ib3gtc2hhZG93KTtcbiAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIH1cblxuICAgIC5yZWN0YW5ndWxhci1mYWIge1xuICAgICAgaGVpZ2h0OiAgdmFyKC0tcmVjdGFuZ3VsYXItZmFiLWhlaWdodCwgNTBweCk7XG4gICAgICB3aWR0aDogdmFyKC0tcmVjdGFuZ3VsYXItZmFiLXdpZHRoLCAxMjBweCk7XG4gICAgICBib3JkZXItcmFkaXVzOiAgdmFyKC0tcmVjdGFuZ3VsYXItZmFiLWhlaWdodCwgNTBweCk7XG4gICAgICBwYWRkaW5nOiB2YXIoLS1yZWN0YW5ndWxhci1mYWItcGFkZGluZywgMHB4KTtcbiAgICAgIG1heC1oZWlnaHQ6IHZhcigtLXJlY3Rhbmd1bGFyLWZhYi1tYXgtaGVpZ2h0LCA1MHB4KTtcbiAgICAgIHotaW5kZXg6ICB2YXIoLS1yZWN0YW5ndWxhci1mYWItei1pbmRleCwgMSk7XG4gICAgfVxuICAgIC5zbWFsbC1mYWIge1xuICAgICAgaGVpZ2h0OiA1MHB4O1xuICAgICAgd2lkdGg6IDUwcHg7XG4gICAgICBwYWRkaW5nOiA1cHg7XG4gICAgfVxuICAgIEBtZWRpYSBhbGwgYW5kIChtYXgtd2lkdGg6IDc2N3B4KSB7XG4gICAgICAucmVjdGFuZ3VsYXItZmFiIHtcbiAgICAgICAgaGVpZ2h0OiB2YXIoLS1yZWN0YW5ndWxhci1mYWItaGVpZ2h0LCA0MHB4KTtcbiAgICAgICAgd2lkdGg6IHZhcigtLXJlY3Rhbmd1bGFyLWZhYi13aWR0aCwgMTIwcHgpO1xuICAgICAgICBib3JkZXItcmFkaXVzOiA1MHB4O1xuICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICAtLWZhYi1pY29uLWhlaWdodDogNDBweDtcbiAgICAgIH1cbiAgICB9XG4gIDwvc3R5bGU+XG5gO1xuXG5leHBvcnQgY29uc3QgQnV0dG9uU3Bpbm5lclN0eWxlcyA9IGh0bWxgXG4gIDxzdHlsZT5cbiAgICAuY29sb3JlZC1idC1zcGlubmVyIHtcbiAgICAgIHdpZHRoOiAxOHB4O1xuICAgICAgaGVpZ2h0OiAxOHB4O1xuICAgICAgLS1wYXBlci1zcGlubmVyLWNvbG9yOiB2YXIoLS1saWdodC1jb2xvciwgI2ZmZik7XG4gICAgICAtLXBhcGVyLXNwaW5uZXItc3Ryb2tlLXdpZHRoOiAzcHg7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDhweDtcbiAgICB9XG5cbiAgICAuc2Vjb25kYXJ5LW91dGxpbmVkLWJ0LXNwaW5uZXIge1xuICAgICAgd2lkdGg6IDE4cHg7XG4gICAgICBoZWlnaHQ6IDE4cHg7XG4gICAgICAtLXBhcGVyLXNwaW5uZXItY29sb3I6IHZhcigtLXNlY29uZGFyeS1jb2xvciwgI2ZmZik7XG4gICAgICAtLXBhcGVyLXNwaW5uZXItc3Ryb2tlLXdpZHRoOiAzcHg7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDhweDtcbiAgICB9XG5cbiAgICAucHJpbWFyeS1vdXRsaW5lZC1idC1zcGlubmVyIHtcbiAgICAgIHdpZHRoOiAxOHB4O1xuICAgICAgaGVpZ2h0OiAxOHB4O1xuICAgICAgLS1wYXBlci1zcGlubmVyLWNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yLCAjZmZmKTtcbiAgICAgIC0tcGFwZXItc3Bpbm5lci1zdHJva2Utd2lkdGg6IDNweDtcbiAgICAgIG1hcmdpbi1yaWdodDogOHB4O1xuICAgIH1cblxuICAgIC5idXR0b24tcHJlZml4LWljb24ge1xuICAgICAgLS1pcm9uLWljb24taGVpZ2h0OiB2YXIoLS1ib2R5LWZvbnQtc2l6ZSwgMTZweCk7XG4gICAgICAtLW1kYy1pY29uLXNpemU6IHZhcigtLWJvZHktZm9udC1zaXplLCAxNnB4KTtcbiAgICAgIG1hcmdpbi1yaWdodDogNXB4O1xuICAgIH1cbiAgPC9zdHlsZT5cbmA7XG5cbmV4cG9ydCBjb25zdCBTbWFsbEJ1dHRvblN0eWxlcyA9IGh0bWxgXG4gIDxzdHlsZT5cbiAgICAuc21hbGwtYnV0dG9uIHtcbiAgICAgIGhlaWdodDogMjVweCAhaW1wb3J0YW50O1xuICAgICAgd2lkdGg6IGF1dG8gIWltcG9ydGFudDtcbiAgICAgIHBhZGRpbmc6IDBweCAhaW1wb3J0YW50O1xuICAgICAgZm9udC1zaXplOiB2YXIoLS10ZXJ0aWFyeS1mb250LXNpemUpICFpbXBvcnRhbnQ7XG4gICAgfVxuICAgIEBtZWRpYSBhbGwgYW5kIChtYXgtd2lkdGg6IDc2N3B4KSB7XG4gICAgICAuc21hbGwtYnV0dG9ue1xuICAgICAgICBoZWlnaHQ6IDIwcHggIWltcG9ydGFudDtcbiAgICAgIH1cbiAgICB9XG4gIDwvc3R5bGU+XG5gO1xuXG5leHBvcnQgY29uc3QgUGFwZXJUb2dnbGVCdXR0b25TdHlsZXMgPSBodG1sYFxuICA8Y3VzdG9tLXN0eWxlPlxuICAgIDxzdHlsZT5cbiAgICAgIHBhcGVyLXRvZ2dsZS1idXR0b24ge1xuICAgICAgICBmb250LWZhbWlseTogdmFyKC0tdGhlbWUtZm9udCk7XG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgLS1wYXBlci10b2dnbGUtYnV0dG9uLWNoZWNrZWQtYnV0dG9uOiB7XG4gICAgICAgICAgaGVpZ2h0OiAxNXB4O1xuICAgICAgICAgIHdpZHRoOiA1MCU7XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogMDtcbiAgICAgICAgICBib3R0b206IDJweDtcbiAgICAgICAgICBib3gtc2hhZG93OiBub25lO1xuICAgICAgICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzIDogOHB4O1xuICAgICAgICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiA4cHg7XG4gICAgICAgIH1cbiAgICAgICAgLS1wYXBlci10b2dnbGUtYnV0dG9uLXVuY2hlY2tlZC1idXR0b246IHtcbiAgICAgICAgICBoZWlnaHQ6IDE1cHg7XG4gICAgICAgICAgd2lkdGg6IDUwJTtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiAwO1xuICAgICAgICAgIGJvdHRvbTogMnB4O1xuICAgICAgICAgIGJveC1zaGFkb3c6IG5vbmU7XG4gICAgICAgICAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1cyA6IDhweDtcbiAgICAgICAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiA4cHg7XG4gICAgICAgIH1cbiAgICAgICAgLS1wYXBlci10b2dnbGUtYnV0dG9uLXVuY2hlY2tlZC1iYXI6IHtcbiAgICAgICAgICBoZWlnaHQ6IDE1cHg7XG4gICAgICAgICAgYm90dG9tOiAycHg7XG4gICAgICAgICAgYm94LXNoYWRvdzogbm9uZTtcbiAgICAgICAgfVxuICAgICAgICAtLXBhcGVyLXRvZ2dsZS1idXR0b24tY2hlY2tlZC1iYXI6IHtcbiAgICAgICAgICBoZWlnaHQ6IDE1cHg7XG4gICAgICAgICAgYm90dG9tOiAycHg7XG4gICAgICAgICAgYm94LXNoYWRvdzogbm9uZTtcbiAgICAgICAgfVxuICAgICAgICAtLXBhcGVyLXRvZ2dsZS1idXR0b24tbGFiZWwtY29sb3I6IHZhcigtLXNlY29uZGFyeS1jb2xvcik7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xuICAgICAgfVxuXG4gICAgICBwYXBlci10b2dnbGUtYnV0dG9uLnByaW1hcnktY29sb3JlZCB7XG4gICAgICAgIC0tcGFwZXItdG9nZ2xlLWJ1dHRvbi11bmNoZWNrZWQtYmFyLWNvbG9yOiB2YXIoLS1zZWNvbmRhcnktY29sb3ItbDEpO1xuICAgICAgICAtLXBhcGVyLXRvZ2dsZS1idXR0b24tdW5jaGVja2VkLWJ1dHRvbi1jb2xvcjogIHZhcigtLXNlY29uZGFyeS1jb2xvci1sMSk7XG4gICAgICAgIC0tcGFwZXItdG9nZ2xlLWJ1dHRvbi1jaGVja2VkLWJhci1jb2xvcjogIHZhcigtLXByaW1hcnktY29sb3ItbDEpO1xuICAgICAgICAtLXBhcGVyLXRvZ2dsZS1idXR0b24tY2hlY2tlZC1idXR0b24tY29sb3I6ICB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcbiAgICAgIH1cblxuICAgICAgcGFwZXItdG9nZ2xlLWJ1dHRvbi5zZWNvbmRhcnktY29sb3JlZCB7XG4gICAgICAgIC0tcGFwZXItdG9nZ2xlLWJ1dHRvbi11bmNoZWNrZWQtYmFyLWNvbG9yOiB2YXIoLS1zZWNvbmRhcnktY29sb3ItbDIpO1xuICAgICAgICAtLXBhcGVyLXRvZ2dsZS1idXR0b24tdW5jaGVja2VkLWJ1dHRvbi1jb2xvcjogIHZhcigtLXNlY29uZGFyeS1jb2xvci1sMik7XG4gICAgICAgIC0tcGFwZXItdG9nZ2xlLWJ1dHRvbi1jaGVja2VkLWJhci1jb2xvcjogIHZhcigtLXNlY29uZGFyeS1jb2xvci1sMSk7XG4gICAgICAgIC0tcGFwZXItdG9nZ2xlLWJ1dHRvbi1jaGVja2VkLWJ1dHRvbi1jb2xvcjogIHZhcigtLXNlY29uZGFyeS1jb2xvcik7XG4gICAgICB9XG4gICAgPC9zdHlsZT5cbiAgPC9jdXN0b20tc3R5bGU+XG5gO1xuIiwiLypcclxuICogIGJpZy5qcyB2Ni4yLjFcclxuICogIEEgc21hbGwsIGZhc3QsIGVhc3ktdG8tdXNlIGxpYnJhcnkgZm9yIGFyYml0cmFyeS1wcmVjaXNpb24gZGVjaW1hbCBhcml0aG1ldGljLlxyXG4gKiAgQ29weXJpZ2h0IChjKSAyMDIyIE1pY2hhZWwgTWNsYXVnaGxpblxyXG4gKiAgaHR0cHM6Ly9naXRodWIuY29tL01pa2VNY2wvYmlnLmpzL0xJQ0VOQ0UubWRcclxuICovXHJcblxyXG5cclxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEVESVRBQkxFIERFRkFVTFRTICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuXHJcbiAgLy8gVGhlIGRlZmF1bHQgdmFsdWVzIGJlbG93IG11c3QgYmUgaW50ZWdlcnMgd2l0aGluIHRoZSBzdGF0ZWQgcmFuZ2VzLlxyXG5cclxuICAvKlxyXG4gICAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiBkZWNpbWFsIHBsYWNlcyAoRFApIG9mIHRoZSByZXN1bHRzIG9mIG9wZXJhdGlvbnMgaW52b2x2aW5nIGRpdmlzaW9uOlxyXG4gICAqIGRpdiBhbmQgc3FydCwgYW5kIHBvdyB3aXRoIG5lZ2F0aXZlIGV4cG9uZW50cy5cclxuICAgKi9cclxudmFyIERQID0gMjAsICAgICAgICAgIC8vIDAgdG8gTUFYX0RQXHJcblxyXG4gIC8qXHJcbiAgICogVGhlIHJvdW5kaW5nIG1vZGUgKFJNKSB1c2VkIHdoZW4gcm91bmRpbmcgdG8gdGhlIGFib3ZlIGRlY2ltYWwgcGxhY2VzLlxyXG4gICAqXHJcbiAgICogIDAgIFRvd2FyZHMgemVybyAoaS5lLiB0cnVuY2F0ZSwgbm8gcm91bmRpbmcpLiAgICAgICAoUk9VTkRfRE9XTilcclxuICAgKiAgMSAgVG8gbmVhcmVzdCBuZWlnaGJvdXIuIElmIGVxdWlkaXN0YW50LCByb3VuZCB1cC4gIChST1VORF9IQUxGX1VQKVxyXG4gICAqICAyICBUbyBuZWFyZXN0IG5laWdoYm91ci4gSWYgZXF1aWRpc3RhbnQsIHRvIGV2ZW4uICAgKFJPVU5EX0hBTEZfRVZFTilcclxuICAgKiAgMyAgQXdheSBmcm9tIHplcm8uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChST1VORF9VUClcclxuICAgKi9cclxuICBSTSA9IDEsICAgICAgICAgICAgIC8vIDAsIDEsIDIgb3IgM1xyXG5cclxuICAvLyBUaGUgbWF4aW11bSB2YWx1ZSBvZiBEUCBhbmQgQmlnLkRQLlxyXG4gIE1BWF9EUCA9IDFFNiwgICAgICAgLy8gMCB0byAxMDAwMDAwXHJcblxyXG4gIC8vIFRoZSBtYXhpbXVtIG1hZ25pdHVkZSBvZiB0aGUgZXhwb25lbnQgYXJndW1lbnQgdG8gdGhlIHBvdyBtZXRob2QuXHJcbiAgTUFYX1BPV0VSID0gMUU2LCAgICAvLyAxIHRvIDEwMDAwMDBcclxuXHJcbiAgLypcclxuICAgKiBUaGUgbmVnYXRpdmUgZXhwb25lbnQgKE5FKSBhdCBhbmQgYmVuZWF0aCB3aGljaCB0b1N0cmluZyByZXR1cm5zIGV4cG9uZW50aWFsIG5vdGF0aW9uLlxyXG4gICAqIChKYXZhU2NyaXB0IG51bWJlcnM6IC03KVxyXG4gICAqIC0xMDAwMDAwIGlzIHRoZSBtaW5pbXVtIHJlY29tbWVuZGVkIGV4cG9uZW50IHZhbHVlIG9mIGEgQmlnLlxyXG4gICAqL1xyXG4gIE5FID0gLTcsICAgICAgICAgICAgLy8gMCB0byAtMTAwMDAwMFxyXG5cclxuICAvKlxyXG4gICAqIFRoZSBwb3NpdGl2ZSBleHBvbmVudCAoUEUpIGF0IGFuZCBhYm92ZSB3aGljaCB0b1N0cmluZyByZXR1cm5zIGV4cG9uZW50aWFsIG5vdGF0aW9uLlxyXG4gICAqIChKYXZhU2NyaXB0IG51bWJlcnM6IDIxKVxyXG4gICAqIDEwMDAwMDAgaXMgdGhlIG1heGltdW0gcmVjb21tZW5kZWQgZXhwb25lbnQgdmFsdWUgb2YgYSBCaWcsIGJ1dCB0aGlzIGxpbWl0IGlzIG5vdCBlbmZvcmNlZC5cclxuICAgKi9cclxuICBQRSA9IDIxLCAgICAgICAgICAgIC8vIDAgdG8gMTAwMDAwMFxyXG5cclxuICAvKlxyXG4gICAqIFdoZW4gdHJ1ZSwgYW4gZXJyb3Igd2lsbCBiZSB0aHJvd24gaWYgYSBwcmltaXRpdmUgbnVtYmVyIGlzIHBhc3NlZCB0byB0aGUgQmlnIGNvbnN0cnVjdG9yLFxyXG4gICAqIG9yIGlmIHZhbHVlT2YgaXMgY2FsbGVkLCBvciBpZiB0b051bWJlciBpcyBjYWxsZWQgb24gYSBCaWcgd2hpY2ggY2Fubm90IGJlIGNvbnZlcnRlZCB0byBhXHJcbiAgICogcHJpbWl0aXZlIG51bWJlciB3aXRob3V0IGEgbG9zcyBvZiBwcmVjaXNpb24uXHJcbiAgICovXHJcbiAgU1RSSUNUID0gZmFsc2UsICAgICAvLyB0cnVlIG9yIGZhbHNlXHJcblxyXG5cclxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuXHJcbiAgLy8gRXJyb3IgbWVzc2FnZXMuXHJcbiAgTkFNRSA9ICdbYmlnLmpzXSAnLFxyXG4gIElOVkFMSUQgPSBOQU1FICsgJ0ludmFsaWQgJyxcclxuICBJTlZBTElEX0RQID0gSU5WQUxJRCArICdkZWNpbWFsIHBsYWNlcycsXHJcbiAgSU5WQUxJRF9STSA9IElOVkFMSUQgKyAncm91bmRpbmcgbW9kZScsXHJcbiAgRElWX0JZX1pFUk8gPSBOQU1FICsgJ0RpdmlzaW9uIGJ5IHplcm8nLFxyXG5cclxuICAvLyBUaGUgc2hhcmVkIHByb3RvdHlwZSBvYmplY3QuXHJcbiAgUCA9IHt9LFxyXG4gIFVOREVGSU5FRCA9IHZvaWQgMCxcclxuICBOVU1FUklDID0gL14tPyhcXGQrKFxcLlxcZCopP3xcXC5cXGQrKShlWystXT9cXGQrKT8kL2k7XHJcblxyXG5cclxuLypcclxuICogQ3JlYXRlIGFuZCByZXR1cm4gYSBCaWcgY29uc3RydWN0b3IuXHJcbiAqL1xyXG5mdW5jdGlvbiBfQmlnXygpIHtcclxuXHJcbiAgLypcclxuICAgKiBUaGUgQmlnIGNvbnN0cnVjdG9yIGFuZCBleHBvcnRlZCBmdW5jdGlvbi5cclxuICAgKiBDcmVhdGUgYW5kIHJldHVybiBhIG5ldyBpbnN0YW5jZSBvZiBhIEJpZyBudW1iZXIgb2JqZWN0LlxyXG4gICAqXHJcbiAgICogbiB7bnVtYmVyfHN0cmluZ3xCaWd9IEEgbnVtZXJpYyB2YWx1ZS5cclxuICAgKi9cclxuICBmdW5jdGlvbiBCaWcobikge1xyXG4gICAgdmFyIHggPSB0aGlzO1xyXG5cclxuICAgIC8vIEVuYWJsZSBjb25zdHJ1Y3RvciB1c2FnZSB3aXRob3V0IG5ldy5cclxuICAgIGlmICghKHggaW5zdGFuY2VvZiBCaWcpKSByZXR1cm4gbiA9PT0gVU5ERUZJTkVEID8gX0JpZ18oKSA6IG5ldyBCaWcobik7XHJcblxyXG4gICAgLy8gRHVwbGljYXRlLlxyXG4gICAgaWYgKG4gaW5zdGFuY2VvZiBCaWcpIHtcclxuICAgICAgeC5zID0gbi5zO1xyXG4gICAgICB4LmUgPSBuLmU7XHJcbiAgICAgIHguYyA9IG4uYy5zbGljZSgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKHR5cGVvZiBuICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgIGlmIChCaWcuc3RyaWN0ID09PSB0cnVlICYmIHR5cGVvZiBuICE9PSAnYmlnaW50Jykge1xyXG4gICAgICAgICAgdGhyb3cgVHlwZUVycm9yKElOVkFMSUQgKyAndmFsdWUnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE1pbnVzIHplcm8/XHJcbiAgICAgICAgbiA9IG4gPT09IDAgJiYgMSAvIG4gPCAwID8gJy0wJyA6IFN0cmluZyhuKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcGFyc2UoeCwgbik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmV0YWluIGEgcmVmZXJlbmNlIHRvIHRoaXMgQmlnIGNvbnN0cnVjdG9yLlxyXG4gICAgLy8gU2hhZG93IEJpZy5wcm90b3R5cGUuY29uc3RydWN0b3Igd2hpY2ggcG9pbnRzIHRvIE9iamVjdC5cclxuICAgIHguY29uc3RydWN0b3IgPSBCaWc7XHJcbiAgfVxyXG5cclxuICBCaWcucHJvdG90eXBlID0gUDtcclxuICBCaWcuRFAgPSBEUDtcclxuICBCaWcuUk0gPSBSTTtcclxuICBCaWcuTkUgPSBORTtcclxuICBCaWcuUEUgPSBQRTtcclxuICBCaWcuc3RyaWN0ID0gU1RSSUNUO1xyXG4gIEJpZy5yb3VuZERvd24gPSAwO1xyXG4gIEJpZy5yb3VuZEhhbGZVcCA9IDE7XHJcbiAgQmlnLnJvdW5kSGFsZkV2ZW4gPSAyO1xyXG4gIEJpZy5yb3VuZFVwID0gMztcclxuXHJcbiAgcmV0dXJuIEJpZztcclxufVxyXG5cclxuXHJcbi8qXHJcbiAqIFBhcnNlIHRoZSBudW1iZXIgb3Igc3RyaW5nIHZhbHVlIHBhc3NlZCB0byBhIEJpZyBjb25zdHJ1Y3Rvci5cclxuICpcclxuICogeCB7QmlnfSBBIEJpZyBudW1iZXIgaW5zdGFuY2UuXHJcbiAqIG4ge251bWJlcnxzdHJpbmd9IEEgbnVtZXJpYyB2YWx1ZS5cclxuICovXHJcbmZ1bmN0aW9uIHBhcnNlKHgsIG4pIHtcclxuICB2YXIgZSwgaSwgbmw7XHJcblxyXG4gIGlmICghTlVNRVJJQy50ZXN0KG4pKSB7XHJcbiAgICB0aHJvdyBFcnJvcihJTlZBTElEICsgJ251bWJlcicpO1xyXG4gIH1cclxuXHJcbiAgLy8gRGV0ZXJtaW5lIHNpZ24uXHJcbiAgeC5zID0gbi5jaGFyQXQoMCkgPT0gJy0nID8gKG4gPSBuLnNsaWNlKDEpLCAtMSkgOiAxO1xyXG5cclxuICAvLyBEZWNpbWFsIHBvaW50P1xyXG4gIGlmICgoZSA9IG4uaW5kZXhPZignLicpKSA+IC0xKSBuID0gbi5yZXBsYWNlKCcuJywgJycpO1xyXG5cclxuICAvLyBFeHBvbmVudGlhbCBmb3JtP1xyXG4gIGlmICgoaSA9IG4uc2VhcmNoKC9lL2kpKSA+IDApIHtcclxuXHJcbiAgICAvLyBEZXRlcm1pbmUgZXhwb25lbnQuXHJcbiAgICBpZiAoZSA8IDApIGUgPSBpO1xyXG4gICAgZSArPSArbi5zbGljZShpICsgMSk7XHJcbiAgICBuID0gbi5zdWJzdHJpbmcoMCwgaSk7XHJcbiAgfSBlbHNlIGlmIChlIDwgMCkge1xyXG5cclxuICAgIC8vIEludGVnZXIuXHJcbiAgICBlID0gbi5sZW5ndGg7XHJcbiAgfVxyXG5cclxuICBubCA9IG4ubGVuZ3RoO1xyXG5cclxuICAvLyBEZXRlcm1pbmUgbGVhZGluZyB6ZXJvcy5cclxuICBmb3IgKGkgPSAwOyBpIDwgbmwgJiYgbi5jaGFyQXQoaSkgPT0gJzAnOykgKytpO1xyXG5cclxuICBpZiAoaSA9PSBubCkge1xyXG5cclxuICAgIC8vIFplcm8uXHJcbiAgICB4LmMgPSBbeC5lID0gMF07XHJcbiAgfSBlbHNlIHtcclxuXHJcbiAgICAvLyBEZXRlcm1pbmUgdHJhaWxpbmcgemVyb3MuXHJcbiAgICBmb3IgKDsgbmwgPiAwICYmIG4uY2hhckF0KC0tbmwpID09ICcwJzspO1xyXG4gICAgeC5lID0gZSAtIGkgLSAxO1xyXG4gICAgeC5jID0gW107XHJcblxyXG4gICAgLy8gQ29udmVydCBzdHJpbmcgdG8gYXJyYXkgb2YgZGlnaXRzIHdpdGhvdXQgbGVhZGluZy90cmFpbGluZyB6ZXJvcy5cclxuICAgIGZvciAoZSA9IDA7IGkgPD0gbmw7KSB4LmNbZSsrXSA9ICtuLmNoYXJBdChpKyspO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHg7XHJcbn1cclxuXHJcblxyXG4vKlxyXG4gKiBSb3VuZCBCaWcgeCB0byBhIG1heGltdW0gb2Ygc2Qgc2lnbmlmaWNhbnQgZGlnaXRzIHVzaW5nIHJvdW5kaW5nIG1vZGUgcm0uXHJcbiAqXHJcbiAqIHgge0JpZ30gVGhlIEJpZyB0byByb3VuZC5cclxuICogc2Qge251bWJlcn0gU2lnbmlmaWNhbnQgZGlnaXRzOiBpbnRlZ2VyLCAwIHRvIE1BWF9EUCBpbmNsdXNpdmUuXHJcbiAqIHJtIHtudW1iZXJ9IFJvdW5kaW5nIG1vZGU6IDAgKGRvd24pLCAxIChoYWxmLXVwKSwgMiAoaGFsZi1ldmVuKSBvciAzICh1cCkuXHJcbiAqIFttb3JlXSB7Ym9vbGVhbn0gV2hldGhlciB0aGUgcmVzdWx0IG9mIGRpdmlzaW9uIHdhcyB0cnVuY2F0ZWQuXHJcbiAqL1xyXG5mdW5jdGlvbiByb3VuZCh4LCBzZCwgcm0sIG1vcmUpIHtcclxuICB2YXIgeGMgPSB4LmM7XHJcblxyXG4gIGlmIChybSA9PT0gVU5ERUZJTkVEKSBybSA9IHguY29uc3RydWN0b3IuUk07XHJcbiAgaWYgKHJtICE9PSAwICYmIHJtICE9PSAxICYmIHJtICE9PSAyICYmIHJtICE9PSAzKSB7XHJcbiAgICB0aHJvdyBFcnJvcihJTlZBTElEX1JNKTtcclxuICB9XHJcblxyXG4gIGlmIChzZCA8IDEpIHtcclxuICAgIG1vcmUgPVxyXG4gICAgICBybSA9PT0gMyAmJiAobW9yZSB8fCAhIXhjWzBdKSB8fCBzZCA9PT0gMCAmJiAoXHJcbiAgICAgIHJtID09PSAxICYmIHhjWzBdID49IDUgfHxcclxuICAgICAgcm0gPT09IDIgJiYgKHhjWzBdID4gNSB8fCB4Y1swXSA9PT0gNSAmJiAobW9yZSB8fCB4Y1sxXSAhPT0gVU5ERUZJTkVEKSlcclxuICAgICk7XHJcblxyXG4gICAgeGMubGVuZ3RoID0gMTtcclxuXHJcbiAgICBpZiAobW9yZSkge1xyXG5cclxuICAgICAgLy8gMSwgMC4xLCAwLjAxLCAwLjAwMSwgMC4wMDAxIGV0Yy5cclxuICAgICAgeC5lID0geC5lIC0gc2QgKyAxO1xyXG4gICAgICB4Y1swXSA9IDE7XHJcbiAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgLy8gWmVyby5cclxuICAgICAgeGNbMF0gPSB4LmUgPSAwO1xyXG4gICAgfVxyXG4gIH0gZWxzZSBpZiAoc2QgPCB4Yy5sZW5ndGgpIHtcclxuXHJcbiAgICAvLyB4Y1tzZF0gaXMgdGhlIGRpZ2l0IGFmdGVyIHRoZSBkaWdpdCB0aGF0IG1heSBiZSByb3VuZGVkIHVwLlxyXG4gICAgbW9yZSA9XHJcbiAgICAgIHJtID09PSAxICYmIHhjW3NkXSA+PSA1IHx8XHJcbiAgICAgIHJtID09PSAyICYmICh4Y1tzZF0gPiA1IHx8IHhjW3NkXSA9PT0gNSAmJlxyXG4gICAgICAgIChtb3JlIHx8IHhjW3NkICsgMV0gIT09IFVOREVGSU5FRCB8fCB4Y1tzZCAtIDFdICYgMSkpIHx8XHJcbiAgICAgIHJtID09PSAzICYmIChtb3JlIHx8ICEheGNbMF0pO1xyXG5cclxuICAgIC8vIFJlbW92ZSBhbnkgZGlnaXRzIGFmdGVyIHRoZSByZXF1aXJlZCBwcmVjaXNpb24uXHJcbiAgICB4Yy5sZW5ndGggPSBzZDtcclxuXHJcbiAgICAvLyBSb3VuZCB1cD9cclxuICAgIGlmIChtb3JlKSB7XHJcblxyXG4gICAgICAvLyBSb3VuZGluZyB1cCBtYXkgbWVhbiB0aGUgcHJldmlvdXMgZGlnaXQgaGFzIHRvIGJlIHJvdW5kZWQgdXAuXHJcbiAgICAgIGZvciAoOyArK3hjWy0tc2RdID4gOTspIHtcclxuICAgICAgICB4Y1tzZF0gPSAwO1xyXG4gICAgICAgIGlmIChzZCA9PT0gMCkge1xyXG4gICAgICAgICAgKyt4LmU7XHJcbiAgICAgICAgICB4Yy51bnNoaWZ0KDEpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmVtb3ZlIHRyYWlsaW5nIHplcm9zLlxyXG4gICAgZm9yIChzZCA9IHhjLmxlbmd0aDsgIXhjWy0tc2RdOykgeGMucG9wKCk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4geDtcclxufVxyXG5cclxuXHJcbi8qXHJcbiAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHZhbHVlIG9mIEJpZyB4IGluIG5vcm1hbCBvciBleHBvbmVudGlhbCBub3RhdGlvbi5cclxuICogSGFuZGxlcyBQLnRvRXhwb25lbnRpYWwsIFAudG9GaXhlZCwgUC50b0pTT04sIFAudG9QcmVjaXNpb24sIFAudG9TdHJpbmcgYW5kIFAudmFsdWVPZi5cclxuICovXHJcbmZ1bmN0aW9uIHN0cmluZ2lmeSh4LCBkb0V4cG9uZW50aWFsLCBpc05vbnplcm8pIHtcclxuICB2YXIgZSA9IHguZSxcclxuICAgIHMgPSB4LmMuam9pbignJyksXHJcbiAgICBuID0gcy5sZW5ndGg7XHJcblxyXG4gIC8vIEV4cG9uZW50aWFsIG5vdGF0aW9uP1xyXG4gIGlmIChkb0V4cG9uZW50aWFsKSB7XHJcbiAgICBzID0gcy5jaGFyQXQoMCkgKyAobiA+IDEgPyAnLicgKyBzLnNsaWNlKDEpIDogJycpICsgKGUgPCAwID8gJ2UnIDogJ2UrJykgKyBlO1xyXG5cclxuICAvLyBOb3JtYWwgbm90YXRpb24uXHJcbiAgfSBlbHNlIGlmIChlIDwgMCkge1xyXG4gICAgZm9yICg7ICsrZTspIHMgPSAnMCcgKyBzO1xyXG4gICAgcyA9ICcwLicgKyBzO1xyXG4gIH0gZWxzZSBpZiAoZSA+IDApIHtcclxuICAgIGlmICgrK2UgPiBuKSB7XHJcbiAgICAgIGZvciAoZSAtPSBuOyBlLS07KSBzICs9ICcwJztcclxuICAgIH0gZWxzZSBpZiAoZSA8IG4pIHtcclxuICAgICAgcyA9IHMuc2xpY2UoMCwgZSkgKyAnLicgKyBzLnNsaWNlKGUpO1xyXG4gICAgfVxyXG4gIH0gZWxzZSBpZiAobiA+IDEpIHtcclxuICAgIHMgPSBzLmNoYXJBdCgwKSArICcuJyArIHMuc2xpY2UoMSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4geC5zIDwgMCAmJiBpc05vbnplcm8gPyAnLScgKyBzIDogcztcclxufVxyXG5cclxuXHJcbi8vIFByb3RvdHlwZS9pbnN0YW5jZSBtZXRob2RzXHJcblxyXG5cclxuLypcclxuICogUmV0dXJuIGEgbmV3IEJpZyB3aG9zZSB2YWx1ZSBpcyB0aGUgYWJzb2x1dGUgdmFsdWUgb2YgdGhpcyBCaWcuXHJcbiAqL1xyXG5QLmFicyA9IGZ1bmN0aW9uICgpIHtcclxuICB2YXIgeCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMpO1xyXG4gIHgucyA9IDE7XHJcbiAgcmV0dXJuIHg7XHJcbn07XHJcblxyXG5cclxuLypcclxuICogUmV0dXJuIDEgaWYgdGhlIHZhbHVlIG9mIHRoaXMgQmlnIGlzIGdyZWF0ZXIgdGhhbiB0aGUgdmFsdWUgb2YgQmlnIHksXHJcbiAqICAgICAgIC0xIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZyBpcyBsZXNzIHRoYW4gdGhlIHZhbHVlIG9mIEJpZyB5LCBvclxyXG4gKiAgICAgICAgMCBpZiB0aGV5IGhhdmUgdGhlIHNhbWUgdmFsdWUuXHJcbiAqL1xyXG5QLmNtcCA9IGZ1bmN0aW9uICh5KSB7XHJcbiAgdmFyIGlzbmVnLFxyXG4gICAgeCA9IHRoaXMsXHJcbiAgICB4YyA9IHguYyxcclxuICAgIHljID0gKHkgPSBuZXcgeC5jb25zdHJ1Y3Rvcih5KSkuYyxcclxuICAgIGkgPSB4LnMsXHJcbiAgICBqID0geS5zLFxyXG4gICAgayA9IHguZSxcclxuICAgIGwgPSB5LmU7XHJcblxyXG4gIC8vIEVpdGhlciB6ZXJvP1xyXG4gIGlmICgheGNbMF0gfHwgIXljWzBdKSByZXR1cm4gIXhjWzBdID8gIXljWzBdID8gMCA6IC1qIDogaTtcclxuXHJcbiAgLy8gU2lnbnMgZGlmZmVyP1xyXG4gIGlmIChpICE9IGopIHJldHVybiBpO1xyXG5cclxuICBpc25lZyA9IGkgPCAwO1xyXG5cclxuICAvLyBDb21wYXJlIGV4cG9uZW50cy5cclxuICBpZiAoayAhPSBsKSByZXR1cm4gayA+IGwgXiBpc25lZyA/IDEgOiAtMTtcclxuXHJcbiAgaiA9IChrID0geGMubGVuZ3RoKSA8IChsID0geWMubGVuZ3RoKSA/IGsgOiBsO1xyXG5cclxuICAvLyBDb21wYXJlIGRpZ2l0IGJ5IGRpZ2l0LlxyXG4gIGZvciAoaSA9IC0xOyArK2kgPCBqOykge1xyXG4gICAgaWYgKHhjW2ldICE9IHljW2ldKSByZXR1cm4geGNbaV0gPiB5Y1tpXSBeIGlzbmVnID8gMSA6IC0xO1xyXG4gIH1cclxuXHJcbiAgLy8gQ29tcGFyZSBsZW5ndGhzLlxyXG4gIHJldHVybiBrID09IGwgPyAwIDogayA+IGwgXiBpc25lZyA/IDEgOiAtMTtcclxufTtcclxuXHJcblxyXG4vKlxyXG4gKiBSZXR1cm4gYSBuZXcgQmlnIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZyBkaXZpZGVkIGJ5IHRoZSB2YWx1ZSBvZiBCaWcgeSwgcm91bmRlZCxcclxuICogaWYgbmVjZXNzYXJ5LCB0byBhIG1heGltdW0gb2YgQmlnLkRQIGRlY2ltYWwgcGxhY2VzIHVzaW5nIHJvdW5kaW5nIG1vZGUgQmlnLlJNLlxyXG4gKi9cclxuUC5kaXYgPSBmdW5jdGlvbiAoeSkge1xyXG4gIHZhciB4ID0gdGhpcyxcclxuICAgIEJpZyA9IHguY29uc3RydWN0b3IsXHJcbiAgICBhID0geC5jLCAgICAgICAgICAgICAgICAgIC8vIGRpdmlkZW5kXHJcbiAgICBiID0gKHkgPSBuZXcgQmlnKHkpKS5jLCAgIC8vIGRpdmlzb3JcclxuICAgIGsgPSB4LnMgPT0geS5zID8gMSA6IC0xLFxyXG4gICAgZHAgPSBCaWcuRFA7XHJcblxyXG4gIGlmIChkcCAhPT0gfn5kcCB8fCBkcCA8IDAgfHwgZHAgPiBNQVhfRFApIHtcclxuICAgIHRocm93IEVycm9yKElOVkFMSURfRFApO1xyXG4gIH1cclxuXHJcbiAgLy8gRGl2aXNvciBpcyB6ZXJvP1xyXG4gIGlmICghYlswXSkge1xyXG4gICAgdGhyb3cgRXJyb3IoRElWX0JZX1pFUk8pO1xyXG4gIH1cclxuXHJcbiAgLy8gRGl2aWRlbmQgaXMgMD8gUmV0dXJuICstMC5cclxuICBpZiAoIWFbMF0pIHtcclxuICAgIHkucyA9IGs7XHJcbiAgICB5LmMgPSBbeS5lID0gMF07XHJcbiAgICByZXR1cm4geTtcclxuICB9XHJcblxyXG4gIHZhciBibCwgYnQsIG4sIGNtcCwgcmksXHJcbiAgICBieiA9IGIuc2xpY2UoKSxcclxuICAgIGFpID0gYmwgPSBiLmxlbmd0aCxcclxuICAgIGFsID0gYS5sZW5ndGgsXHJcbiAgICByID0gYS5zbGljZSgwLCBibCksICAgLy8gcmVtYWluZGVyXHJcbiAgICBybCA9IHIubGVuZ3RoLFxyXG4gICAgcSA9IHksICAgICAgICAgICAgICAgIC8vIHF1b3RpZW50XHJcbiAgICBxYyA9IHEuYyA9IFtdLFxyXG4gICAgcWkgPSAwLFxyXG4gICAgcCA9IGRwICsgKHEuZSA9IHguZSAtIHkuZSkgKyAxOyAgICAvLyBwcmVjaXNpb24gb2YgdGhlIHJlc3VsdFxyXG5cclxuICBxLnMgPSBrO1xyXG4gIGsgPSBwIDwgMCA/IDAgOiBwO1xyXG5cclxuICAvLyBDcmVhdGUgdmVyc2lvbiBvZiBkaXZpc29yIHdpdGggbGVhZGluZyB6ZXJvLlxyXG4gIGJ6LnVuc2hpZnQoMCk7XHJcblxyXG4gIC8vIEFkZCB6ZXJvcyB0byBtYWtlIHJlbWFpbmRlciBhcyBsb25nIGFzIGRpdmlzb3IuXHJcbiAgZm9yICg7IHJsKysgPCBibDspIHIucHVzaCgwKTtcclxuXHJcbiAgZG8ge1xyXG5cclxuICAgIC8vIG4gaXMgaG93IG1hbnkgdGltZXMgdGhlIGRpdmlzb3IgZ29lcyBpbnRvIGN1cnJlbnQgcmVtYWluZGVyLlxyXG4gICAgZm9yIChuID0gMDsgbiA8IDEwOyBuKyspIHtcclxuXHJcbiAgICAgIC8vIENvbXBhcmUgZGl2aXNvciBhbmQgcmVtYWluZGVyLlxyXG4gICAgICBpZiAoYmwgIT0gKHJsID0gci5sZW5ndGgpKSB7XHJcbiAgICAgICAgY21wID0gYmwgPiBybCA/IDEgOiAtMTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBmb3IgKHJpID0gLTEsIGNtcCA9IDA7ICsrcmkgPCBibDspIHtcclxuICAgICAgICAgIGlmIChiW3JpXSAhPSByW3JpXSkge1xyXG4gICAgICAgICAgICBjbXAgPSBiW3JpXSA+IHJbcmldID8gMSA6IC0xO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIElmIGRpdmlzb3IgPCByZW1haW5kZXIsIHN1YnRyYWN0IGRpdmlzb3IgZnJvbSByZW1haW5kZXIuXHJcbiAgICAgIGlmIChjbXAgPCAwKSB7XHJcblxyXG4gICAgICAgIC8vIFJlbWFpbmRlciBjYW4ndCBiZSBtb3JlIHRoYW4gMSBkaWdpdCBsb25nZXIgdGhhbiBkaXZpc29yLlxyXG4gICAgICAgIC8vIEVxdWFsaXNlIGxlbmd0aHMgdXNpbmcgZGl2aXNvciB3aXRoIGV4dHJhIGxlYWRpbmcgemVybz9cclxuICAgICAgICBmb3IgKGJ0ID0gcmwgPT0gYmwgPyBiIDogYno7IHJsOykge1xyXG4gICAgICAgICAgaWYgKHJbLS1ybF0gPCBidFtybF0pIHtcclxuICAgICAgICAgICAgcmkgPSBybDtcclxuICAgICAgICAgICAgZm9yICg7IHJpICYmICFyWy0tcmldOykgcltyaV0gPSA5O1xyXG4gICAgICAgICAgICAtLXJbcmldO1xyXG4gICAgICAgICAgICByW3JsXSArPSAxMDtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJbcmxdIC09IGJ0W3JsXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAoOyAhclswXTspIHIuc2hpZnQoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEFkZCB0aGUgZGlnaXQgbiB0byB0aGUgcmVzdWx0IGFycmF5LlxyXG4gICAgcWNbcWkrK10gPSBjbXAgPyBuIDogKytuO1xyXG5cclxuICAgIC8vIFVwZGF0ZSB0aGUgcmVtYWluZGVyLlxyXG4gICAgaWYgKHJbMF0gJiYgY21wKSByW3JsXSA9IGFbYWldIHx8IDA7XHJcbiAgICBlbHNlIHIgPSBbYVthaV1dO1xyXG5cclxuICB9IHdoaWxlICgoYWkrKyA8IGFsIHx8IHJbMF0gIT09IFVOREVGSU5FRCkgJiYgay0tKTtcclxuXHJcbiAgLy8gTGVhZGluZyB6ZXJvPyBEbyBub3QgcmVtb3ZlIGlmIHJlc3VsdCBpcyBzaW1wbHkgemVybyAocWkgPT0gMSkuXHJcbiAgaWYgKCFxY1swXSAmJiBxaSAhPSAxKSB7XHJcblxyXG4gICAgLy8gVGhlcmUgY2FuJ3QgYmUgbW9yZSB0aGFuIG9uZSB6ZXJvLlxyXG4gICAgcWMuc2hpZnQoKTtcclxuICAgIHEuZS0tO1xyXG4gICAgcC0tO1xyXG4gIH1cclxuXHJcbiAgLy8gUm91bmQ/XHJcbiAgaWYgKHFpID4gcCkgcm91bmQocSwgcCwgQmlnLlJNLCByWzBdICE9PSBVTkRFRklORUQpO1xyXG5cclxuICByZXR1cm4gcTtcclxufTtcclxuXHJcblxyXG4vKlxyXG4gKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWcgaXMgZXF1YWwgdG8gdGhlIHZhbHVlIG9mIEJpZyB5LCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxyXG4gKi9cclxuUC5lcSA9IGZ1bmN0aW9uICh5KSB7XHJcbiAgcmV0dXJuIHRoaXMuY21wKHkpID09PSAwO1xyXG59O1xyXG5cclxuXHJcbi8qXHJcbiAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZyBpcyBncmVhdGVyIHRoYW4gdGhlIHZhbHVlIG9mIEJpZyB5LCBvdGhlcndpc2UgcmV0dXJuXHJcbiAqIGZhbHNlLlxyXG4gKi9cclxuUC5ndCA9IGZ1bmN0aW9uICh5KSB7XHJcbiAgcmV0dXJuIHRoaXMuY21wKHkpID4gMDtcclxufTtcclxuXHJcblxyXG4vKlxyXG4gKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWcgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHRoZSB2YWx1ZSBvZiBCaWcgeSwgb3RoZXJ3aXNlXHJcbiAqIHJldHVybiBmYWxzZS5cclxuICovXHJcblAuZ3RlID0gZnVuY3Rpb24gKHkpIHtcclxuICByZXR1cm4gdGhpcy5jbXAoeSkgPiAtMTtcclxufTtcclxuXHJcblxyXG4vKlxyXG4gKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWcgaXMgbGVzcyB0aGFuIHRoZSB2YWx1ZSBvZiBCaWcgeSwgb3RoZXJ3aXNlIHJldHVybiBmYWxzZS5cclxuICovXHJcblAubHQgPSBmdW5jdGlvbiAoeSkge1xyXG4gIHJldHVybiB0aGlzLmNtcCh5KSA8IDA7XHJcbn07XHJcblxyXG5cclxuLypcclxuICogUmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIG9mIHRoaXMgQmlnIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgdmFsdWUgb2YgQmlnIHksIG90aGVyd2lzZVxyXG4gKiByZXR1cm4gZmFsc2UuXHJcbiAqL1xyXG5QLmx0ZSA9IGZ1bmN0aW9uICh5KSB7XHJcbiAgcmV0dXJuIHRoaXMuY21wKHkpIDwgMTtcclxufTtcclxuXHJcblxyXG4vKlxyXG4gKiBSZXR1cm4gYSBuZXcgQmlnIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZyBtaW51cyB0aGUgdmFsdWUgb2YgQmlnIHkuXHJcbiAqL1xyXG5QLm1pbnVzID0gUC5zdWIgPSBmdW5jdGlvbiAoeSkge1xyXG4gIHZhciBpLCBqLCB0LCB4bHR5LFxyXG4gICAgeCA9IHRoaXMsXHJcbiAgICBCaWcgPSB4LmNvbnN0cnVjdG9yLFxyXG4gICAgYSA9IHgucyxcclxuICAgIGIgPSAoeSA9IG5ldyBCaWcoeSkpLnM7XHJcblxyXG4gIC8vIFNpZ25zIGRpZmZlcj9cclxuICBpZiAoYSAhPSBiKSB7XHJcbiAgICB5LnMgPSAtYjtcclxuICAgIHJldHVybiB4LnBsdXMoeSk7XHJcbiAgfVxyXG5cclxuICB2YXIgeGMgPSB4LmMuc2xpY2UoKSxcclxuICAgIHhlID0geC5lLFxyXG4gICAgeWMgPSB5LmMsXHJcbiAgICB5ZSA9IHkuZTtcclxuXHJcbiAgLy8gRWl0aGVyIHplcm8/XHJcbiAgaWYgKCF4Y1swXSB8fCAheWNbMF0pIHtcclxuICAgIGlmICh5Y1swXSkge1xyXG4gICAgICB5LnMgPSAtYjtcclxuICAgIH0gZWxzZSBpZiAoeGNbMF0pIHtcclxuICAgICAgeSA9IG5ldyBCaWcoeCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB5LnMgPSAxO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHk7XHJcbiAgfVxyXG5cclxuICAvLyBEZXRlcm1pbmUgd2hpY2ggaXMgdGhlIGJpZ2dlciBudW1iZXIuIFByZXBlbmQgemVyb3MgdG8gZXF1YWxpc2UgZXhwb25lbnRzLlxyXG4gIGlmIChhID0geGUgLSB5ZSkge1xyXG5cclxuICAgIGlmICh4bHR5ID0gYSA8IDApIHtcclxuICAgICAgYSA9IC1hO1xyXG4gICAgICB0ID0geGM7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB5ZSA9IHhlO1xyXG4gICAgICB0ID0geWM7XHJcbiAgICB9XHJcblxyXG4gICAgdC5yZXZlcnNlKCk7XHJcbiAgICBmb3IgKGIgPSBhOyBiLS07KSB0LnB1c2goMCk7XHJcbiAgICB0LnJldmVyc2UoKTtcclxuICB9IGVsc2Uge1xyXG5cclxuICAgIC8vIEV4cG9uZW50cyBlcXVhbC4gQ2hlY2sgZGlnaXQgYnkgZGlnaXQuXHJcbiAgICBqID0gKCh4bHR5ID0geGMubGVuZ3RoIDwgeWMubGVuZ3RoKSA/IHhjIDogeWMpLmxlbmd0aDtcclxuXHJcbiAgICBmb3IgKGEgPSBiID0gMDsgYiA8IGo7IGIrKykge1xyXG4gICAgICBpZiAoeGNbYl0gIT0geWNbYl0pIHtcclxuICAgICAgICB4bHR5ID0geGNbYl0gPCB5Y1tiXTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8geCA8IHk/IFBvaW50IHhjIHRvIHRoZSBhcnJheSBvZiB0aGUgYmlnZ2VyIG51bWJlci5cclxuICBpZiAoeGx0eSkge1xyXG4gICAgdCA9IHhjO1xyXG4gICAgeGMgPSB5YztcclxuICAgIHljID0gdDtcclxuICAgIHkucyA9IC15LnM7XHJcbiAgfVxyXG5cclxuICAvKlxyXG4gICAqIEFwcGVuZCB6ZXJvcyB0byB4YyBpZiBzaG9ydGVyLiBObyBuZWVkIHRvIGFkZCB6ZXJvcyB0byB5YyBpZiBzaG9ydGVyIGFzIHN1YnRyYWN0aW9uIG9ubHlcclxuICAgKiBuZWVkcyB0byBzdGFydCBhdCB5Yy5sZW5ndGguXHJcbiAgICovXHJcbiAgaWYgKChiID0gKGogPSB5Yy5sZW5ndGgpIC0gKGkgPSB4Yy5sZW5ndGgpKSA+IDApIGZvciAoOyBiLS07KSB4Y1tpKytdID0gMDtcclxuXHJcbiAgLy8gU3VidHJhY3QgeWMgZnJvbSB4Yy5cclxuICBmb3IgKGIgPSBpOyBqID4gYTspIHtcclxuICAgIGlmICh4Y1stLWpdIDwgeWNbal0pIHtcclxuICAgICAgZm9yIChpID0gajsgaSAmJiAheGNbLS1pXTspIHhjW2ldID0gOTtcclxuICAgICAgLS14Y1tpXTtcclxuICAgICAgeGNbal0gKz0gMTA7XHJcbiAgICB9XHJcblxyXG4gICAgeGNbal0gLT0geWNbal07XHJcbiAgfVxyXG5cclxuICAvLyBSZW1vdmUgdHJhaWxpbmcgemVyb3MuXHJcbiAgZm9yICg7IHhjWy0tYl0gPT09IDA7KSB4Yy5wb3AoKTtcclxuXHJcbiAgLy8gUmVtb3ZlIGxlYWRpbmcgemVyb3MgYW5kIGFkanVzdCBleHBvbmVudCBhY2NvcmRpbmdseS5cclxuICBmb3IgKDsgeGNbMF0gPT09IDA7KSB7XHJcbiAgICB4Yy5zaGlmdCgpO1xyXG4gICAgLS15ZTtcclxuICB9XHJcblxyXG4gIGlmICgheGNbMF0pIHtcclxuXHJcbiAgICAvLyBuIC0gbiA9ICswXHJcbiAgICB5LnMgPSAxO1xyXG5cclxuICAgIC8vIFJlc3VsdCBtdXN0IGJlIHplcm8uXHJcbiAgICB4YyA9IFt5ZSA9IDBdO1xyXG4gIH1cclxuXHJcbiAgeS5jID0geGM7XHJcbiAgeS5lID0geWU7XHJcblxyXG4gIHJldHVybiB5O1xyXG59O1xyXG5cclxuXHJcbi8qXHJcbiAqIFJldHVybiBhIG5ldyBCaWcgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgQmlnIG1vZHVsbyB0aGUgdmFsdWUgb2YgQmlnIHkuXHJcbiAqL1xyXG5QLm1vZCA9IGZ1bmN0aW9uICh5KSB7XHJcbiAgdmFyIHlndHgsXHJcbiAgICB4ID0gdGhpcyxcclxuICAgIEJpZyA9IHguY29uc3RydWN0b3IsXHJcbiAgICBhID0geC5zLFxyXG4gICAgYiA9ICh5ID0gbmV3IEJpZyh5KSkucztcclxuXHJcbiAgaWYgKCF5LmNbMF0pIHtcclxuICAgIHRocm93IEVycm9yKERJVl9CWV9aRVJPKTtcclxuICB9XHJcblxyXG4gIHgucyA9IHkucyA9IDE7XHJcbiAgeWd0eCA9IHkuY21wKHgpID09IDE7XHJcbiAgeC5zID0gYTtcclxuICB5LnMgPSBiO1xyXG5cclxuICBpZiAoeWd0eCkgcmV0dXJuIG5ldyBCaWcoeCk7XHJcblxyXG4gIGEgPSBCaWcuRFA7XHJcbiAgYiA9IEJpZy5STTtcclxuICBCaWcuRFAgPSBCaWcuUk0gPSAwO1xyXG4gIHggPSB4LmRpdih5KTtcclxuICBCaWcuRFAgPSBhO1xyXG4gIEJpZy5STSA9IGI7XHJcblxyXG4gIHJldHVybiB0aGlzLm1pbnVzKHgudGltZXMoeSkpO1xyXG59O1xyXG5cclxuXHJcbi8qXHJcbiAqIFJldHVybiBhIG5ldyBCaWcgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgQmlnIG5lZ2F0ZWQuXHJcbiAqL1xyXG5QLm5lZyA9IGZ1bmN0aW9uICgpIHtcclxuICB2YXIgeCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMpO1xyXG4gIHgucyA9IC14LnM7XHJcbiAgcmV0dXJuIHg7XHJcbn07XHJcblxyXG5cclxuLypcclxuICogUmV0dXJuIGEgbmV3IEJpZyB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpcyBCaWcgcGx1cyB0aGUgdmFsdWUgb2YgQmlnIHkuXHJcbiAqL1xyXG5QLnBsdXMgPSBQLmFkZCA9IGZ1bmN0aW9uICh5KSB7XHJcbiAgdmFyIGUsIGssIHQsXHJcbiAgICB4ID0gdGhpcyxcclxuICAgIEJpZyA9IHguY29uc3RydWN0b3I7XHJcblxyXG4gIHkgPSBuZXcgQmlnKHkpO1xyXG5cclxuICAvLyBTaWducyBkaWZmZXI/XHJcbiAgaWYgKHgucyAhPSB5LnMpIHtcclxuICAgIHkucyA9IC15LnM7XHJcbiAgICByZXR1cm4geC5taW51cyh5KTtcclxuICB9XHJcblxyXG4gIHZhciB4ZSA9IHguZSxcclxuICAgIHhjID0geC5jLFxyXG4gICAgeWUgPSB5LmUsXHJcbiAgICB5YyA9IHkuYztcclxuXHJcbiAgLy8gRWl0aGVyIHplcm8/XHJcbiAgaWYgKCF4Y1swXSB8fCAheWNbMF0pIHtcclxuICAgIGlmICgheWNbMF0pIHtcclxuICAgICAgaWYgKHhjWzBdKSB7XHJcbiAgICAgICAgeSA9IG5ldyBCaWcoeCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgeS5zID0geC5zO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4geTtcclxuICB9XHJcblxyXG4gIHhjID0geGMuc2xpY2UoKTtcclxuXHJcbiAgLy8gUHJlcGVuZCB6ZXJvcyB0byBlcXVhbGlzZSBleHBvbmVudHMuXHJcbiAgLy8gTm90ZTogcmV2ZXJzZSBmYXN0ZXIgdGhhbiB1bnNoaWZ0cy5cclxuICBpZiAoZSA9IHhlIC0geWUpIHtcclxuICAgIGlmIChlID4gMCkge1xyXG4gICAgICB5ZSA9IHhlO1xyXG4gICAgICB0ID0geWM7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBlID0gLWU7XHJcbiAgICAgIHQgPSB4YztcclxuICAgIH1cclxuXHJcbiAgICB0LnJldmVyc2UoKTtcclxuICAgIGZvciAoOyBlLS07KSB0LnB1c2goMCk7XHJcbiAgICB0LnJldmVyc2UoKTtcclxuICB9XHJcblxyXG4gIC8vIFBvaW50IHhjIHRvIHRoZSBsb25nZXIgYXJyYXkuXHJcbiAgaWYgKHhjLmxlbmd0aCAtIHljLmxlbmd0aCA8IDApIHtcclxuICAgIHQgPSB5YztcclxuICAgIHljID0geGM7XHJcbiAgICB4YyA9IHQ7XHJcbiAgfVxyXG5cclxuICBlID0geWMubGVuZ3RoO1xyXG5cclxuICAvLyBPbmx5IHN0YXJ0IGFkZGluZyBhdCB5Yy5sZW5ndGggLSAxIGFzIHRoZSBmdXJ0aGVyIGRpZ2l0cyBvZiB4YyBjYW4gYmUgbGVmdCBhcyB0aGV5IGFyZS5cclxuICBmb3IgKGsgPSAwOyBlOyB4Y1tlXSAlPSAxMCkgayA9ICh4Y1stLWVdID0geGNbZV0gKyB5Y1tlXSArIGspIC8gMTAgfCAwO1xyXG5cclxuICAvLyBObyBuZWVkIHRvIGNoZWNrIGZvciB6ZXJvLCBhcyAreCArICt5ICE9IDAgJiYgLXggKyAteSAhPSAwXHJcblxyXG4gIGlmIChrKSB7XHJcbiAgICB4Yy51bnNoaWZ0KGspO1xyXG4gICAgKyt5ZTtcclxuICB9XHJcblxyXG4gIC8vIFJlbW92ZSB0cmFpbGluZyB6ZXJvcy5cclxuICBmb3IgKGUgPSB4Yy5sZW5ndGg7IHhjWy0tZV0gPT09IDA7KSB4Yy5wb3AoKTtcclxuXHJcbiAgeS5jID0geGM7XHJcbiAgeS5lID0geWU7XHJcblxyXG4gIHJldHVybiB5O1xyXG59O1xyXG5cclxuXHJcbi8qXHJcbiAqIFJldHVybiBhIEJpZyB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpcyBCaWcgcmFpc2VkIHRvIHRoZSBwb3dlciBuLlxyXG4gKiBJZiBuIGlzIG5lZ2F0aXZlLCByb3VuZCB0byBhIG1heGltdW0gb2YgQmlnLkRQIGRlY2ltYWwgcGxhY2VzIHVzaW5nIHJvdW5kaW5nXHJcbiAqIG1vZGUgQmlnLlJNLlxyXG4gKlxyXG4gKiBuIHtudW1iZXJ9IEludGVnZXIsIC1NQVhfUE9XRVIgdG8gTUFYX1BPV0VSIGluY2x1c2l2ZS5cclxuICovXHJcblAucG93ID0gZnVuY3Rpb24gKG4pIHtcclxuICB2YXIgeCA9IHRoaXMsXHJcbiAgICBvbmUgPSBuZXcgeC5jb25zdHJ1Y3RvcignMScpLFxyXG4gICAgeSA9IG9uZSxcclxuICAgIGlzbmVnID0gbiA8IDA7XHJcblxyXG4gIGlmIChuICE9PSB+fm4gfHwgbiA8IC1NQVhfUE9XRVIgfHwgbiA+IE1BWF9QT1dFUikge1xyXG4gICAgdGhyb3cgRXJyb3IoSU5WQUxJRCArICdleHBvbmVudCcpO1xyXG4gIH1cclxuXHJcbiAgaWYgKGlzbmVnKSBuID0gLW47XHJcblxyXG4gIGZvciAoOzspIHtcclxuICAgIGlmIChuICYgMSkgeSA9IHkudGltZXMoeCk7XHJcbiAgICBuID4+PSAxO1xyXG4gICAgaWYgKCFuKSBicmVhaztcclxuICAgIHggPSB4LnRpbWVzKHgpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGlzbmVnID8gb25lLmRpdih5KSA6IHk7XHJcbn07XHJcblxyXG5cclxuLypcclxuICogUmV0dXJuIGEgbmV3IEJpZyB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpcyBCaWcgcm91bmRlZCB0byBhIG1heGltdW0gcHJlY2lzaW9uIG9mIHNkXHJcbiAqIHNpZ25pZmljYW50IGRpZ2l0cyB1c2luZyByb3VuZGluZyBtb2RlIHJtLCBvciBCaWcuUk0gaWYgcm0gaXMgbm90IHNwZWNpZmllZC5cclxuICpcclxuICogc2Qge251bWJlcn0gU2lnbmlmaWNhbnQgZGlnaXRzOiBpbnRlZ2VyLCAxIHRvIE1BWF9EUCBpbmNsdXNpdmUuXHJcbiAqIHJtPyB7bnVtYmVyfSBSb3VuZGluZyBtb2RlOiAwIChkb3duKSwgMSAoaGFsZi11cCksIDIgKGhhbGYtZXZlbikgb3IgMyAodXApLlxyXG4gKi9cclxuUC5wcmVjID0gZnVuY3Rpb24gKHNkLCBybSkge1xyXG4gIGlmIChzZCAhPT0gfn5zZCB8fCBzZCA8IDEgfHwgc2QgPiBNQVhfRFApIHtcclxuICAgIHRocm93IEVycm9yKElOVkFMSUQgKyAncHJlY2lzaW9uJyk7XHJcbiAgfVxyXG4gIHJldHVybiByb3VuZChuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzKSwgc2QsIHJtKTtcclxufTtcclxuXHJcblxyXG4vKlxyXG4gKiBSZXR1cm4gYSBuZXcgQmlnIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZyByb3VuZGVkIHRvIGEgbWF4aW11bSBvZiBkcCBkZWNpbWFsIHBsYWNlc1xyXG4gKiB1c2luZyByb3VuZGluZyBtb2RlIHJtLCBvciBCaWcuUk0gaWYgcm0gaXMgbm90IHNwZWNpZmllZC5cclxuICogSWYgZHAgaXMgbmVnYXRpdmUsIHJvdW5kIHRvIGFuIGludGVnZXIgd2hpY2ggaXMgYSBtdWx0aXBsZSBvZiAxMCoqLWRwLlxyXG4gKiBJZiBkcCBpcyBub3Qgc3BlY2lmaWVkLCByb3VuZCB0byAwIGRlY2ltYWwgcGxhY2VzLlxyXG4gKlxyXG4gKiBkcD8ge251bWJlcn0gSW50ZWdlciwgLU1BWF9EUCB0byBNQVhfRFAgaW5jbHVzaXZlLlxyXG4gKiBybT8ge251bWJlcn0gUm91bmRpbmcgbW9kZTogMCAoZG93biksIDEgKGhhbGYtdXApLCAyIChoYWxmLWV2ZW4pIG9yIDMgKHVwKS5cclxuICovXHJcblAucm91bmQgPSBmdW5jdGlvbiAoZHAsIHJtKSB7XHJcbiAgaWYgKGRwID09PSBVTkRFRklORUQpIGRwID0gMDtcclxuICBlbHNlIGlmIChkcCAhPT0gfn5kcCB8fCBkcCA8IC1NQVhfRFAgfHwgZHAgPiBNQVhfRFApIHtcclxuICAgIHRocm93IEVycm9yKElOVkFMSURfRFApO1xyXG4gIH1cclxuICByZXR1cm4gcm91bmQobmV3IHRoaXMuY29uc3RydWN0b3IodGhpcyksIGRwICsgdGhpcy5lICsgMSwgcm0pO1xyXG59O1xyXG5cclxuXHJcbi8qXHJcbiAqIFJldHVybiBhIG5ldyBCaWcgd2hvc2UgdmFsdWUgaXMgdGhlIHNxdWFyZSByb290IG9mIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZywgcm91bmRlZCwgaWZcclxuICogbmVjZXNzYXJ5LCB0byBhIG1heGltdW0gb2YgQmlnLkRQIGRlY2ltYWwgcGxhY2VzIHVzaW5nIHJvdW5kaW5nIG1vZGUgQmlnLlJNLlxyXG4gKi9cclxuUC5zcXJ0ID0gZnVuY3Rpb24gKCkge1xyXG4gIHZhciByLCBjLCB0LFxyXG4gICAgeCA9IHRoaXMsXHJcbiAgICBCaWcgPSB4LmNvbnN0cnVjdG9yLFxyXG4gICAgcyA9IHgucyxcclxuICAgIGUgPSB4LmUsXHJcbiAgICBoYWxmID0gbmV3IEJpZygnMC41Jyk7XHJcblxyXG4gIC8vIFplcm8/XHJcbiAgaWYgKCF4LmNbMF0pIHJldHVybiBuZXcgQmlnKHgpO1xyXG5cclxuICAvLyBOZWdhdGl2ZT9cclxuICBpZiAocyA8IDApIHtcclxuICAgIHRocm93IEVycm9yKE5BTUUgKyAnTm8gc3F1YXJlIHJvb3QnKTtcclxuICB9XHJcblxyXG4gIC8vIEVzdGltYXRlLlxyXG4gIHMgPSBNYXRoLnNxcnQoeCArICcnKTtcclxuXHJcbiAgLy8gTWF0aC5zcXJ0IHVuZGVyZmxvdy9vdmVyZmxvdz9cclxuICAvLyBSZS1lc3RpbWF0ZTogcGFzcyB4IGNvZWZmaWNpZW50IHRvIE1hdGguc3FydCBhcyBpbnRlZ2VyLCB0aGVuIGFkanVzdCB0aGUgcmVzdWx0IGV4cG9uZW50LlxyXG4gIGlmIChzID09PSAwIHx8IHMgPT09IDEgLyAwKSB7XHJcbiAgICBjID0geC5jLmpvaW4oJycpO1xyXG4gICAgaWYgKCEoYy5sZW5ndGggKyBlICYgMSkpIGMgKz0gJzAnO1xyXG4gICAgcyA9IE1hdGguc3FydChjKTtcclxuICAgIGUgPSAoKGUgKyAxKSAvIDIgfCAwKSAtIChlIDwgMCB8fCBlICYgMSk7XHJcbiAgICByID0gbmV3IEJpZygocyA9PSAxIC8gMCA/ICc1ZScgOiAocyA9IHMudG9FeHBvbmVudGlhbCgpKS5zbGljZSgwLCBzLmluZGV4T2YoJ2UnKSArIDEpKSArIGUpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByID0gbmV3IEJpZyhzICsgJycpO1xyXG4gIH1cclxuXHJcbiAgZSA9IHIuZSArIChCaWcuRFAgKz0gNCk7XHJcblxyXG4gIC8vIE5ld3Rvbi1SYXBoc29uIGl0ZXJhdGlvbi5cclxuICBkbyB7XHJcbiAgICB0ID0gcjtcclxuICAgIHIgPSBoYWxmLnRpbWVzKHQucGx1cyh4LmRpdih0KSkpO1xyXG4gIH0gd2hpbGUgKHQuYy5zbGljZSgwLCBlKS5qb2luKCcnKSAhPT0gci5jLnNsaWNlKDAsIGUpLmpvaW4oJycpKTtcclxuXHJcbiAgcmV0dXJuIHJvdW5kKHIsIChCaWcuRFAgLT0gNCkgKyByLmUgKyAxLCBCaWcuUk0pO1xyXG59O1xyXG5cclxuXHJcbi8qXHJcbiAqIFJldHVybiBhIG5ldyBCaWcgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgQmlnIHRpbWVzIHRoZSB2YWx1ZSBvZiBCaWcgeS5cclxuICovXHJcblAudGltZXMgPSBQLm11bCA9IGZ1bmN0aW9uICh5KSB7XHJcbiAgdmFyIGMsXHJcbiAgICB4ID0gdGhpcyxcclxuICAgIEJpZyA9IHguY29uc3RydWN0b3IsXHJcbiAgICB4YyA9IHguYyxcclxuICAgIHljID0gKHkgPSBuZXcgQmlnKHkpKS5jLFxyXG4gICAgYSA9IHhjLmxlbmd0aCxcclxuICAgIGIgPSB5Yy5sZW5ndGgsXHJcbiAgICBpID0geC5lLFxyXG4gICAgaiA9IHkuZTtcclxuXHJcbiAgLy8gRGV0ZXJtaW5lIHNpZ24gb2YgcmVzdWx0LlxyXG4gIHkucyA9IHgucyA9PSB5LnMgPyAxIDogLTE7XHJcblxyXG4gIC8vIFJldHVybiBzaWduZWQgMCBpZiBlaXRoZXIgMC5cclxuICBpZiAoIXhjWzBdIHx8ICF5Y1swXSkge1xyXG4gICAgeS5jID0gW3kuZSA9IDBdO1xyXG4gICAgcmV0dXJuIHk7XHJcbiAgfVxyXG5cclxuICAvLyBJbml0aWFsaXNlIGV4cG9uZW50IG9mIHJlc3VsdCBhcyB4LmUgKyB5LmUuXHJcbiAgeS5lID0gaSArIGo7XHJcblxyXG4gIC8vIElmIGFycmF5IHhjIGhhcyBmZXdlciBkaWdpdHMgdGhhbiB5Yywgc3dhcCB4YyBhbmQgeWMsIGFuZCBsZW5ndGhzLlxyXG4gIGlmIChhIDwgYikge1xyXG4gICAgYyA9IHhjO1xyXG4gICAgeGMgPSB5YztcclxuICAgIHljID0gYztcclxuICAgIGogPSBhO1xyXG4gICAgYSA9IGI7XHJcbiAgICBiID0gajtcclxuICB9XHJcblxyXG4gIC8vIEluaXRpYWxpc2UgY29lZmZpY2llbnQgYXJyYXkgb2YgcmVzdWx0IHdpdGggemVyb3MuXHJcbiAgZm9yIChjID0gbmV3IEFycmF5KGogPSBhICsgYik7IGotLTspIGNbal0gPSAwO1xyXG5cclxuICAvLyBNdWx0aXBseS5cclxuXHJcbiAgLy8gaSBpcyBpbml0aWFsbHkgeGMubGVuZ3RoLlxyXG4gIGZvciAoaSA9IGI7IGktLTspIHtcclxuICAgIGIgPSAwO1xyXG5cclxuICAgIC8vIGEgaXMgeWMubGVuZ3RoLlxyXG4gICAgZm9yIChqID0gYSArIGk7IGogPiBpOykge1xyXG5cclxuICAgICAgLy8gQ3VycmVudCBzdW0gb2YgcHJvZHVjdHMgYXQgdGhpcyBkaWdpdCBwb3NpdGlvbiwgcGx1cyBjYXJyeS5cclxuICAgICAgYiA9IGNbal0gKyB5Y1tpXSAqIHhjW2ogLSBpIC0gMV0gKyBiO1xyXG4gICAgICBjW2otLV0gPSBiICUgMTA7XHJcblxyXG4gICAgICAvLyBjYXJyeVxyXG4gICAgICBiID0gYiAvIDEwIHwgMDtcclxuICAgIH1cclxuXHJcbiAgICBjW2pdID0gYjtcclxuICB9XHJcblxyXG4gIC8vIEluY3JlbWVudCByZXN1bHQgZXhwb25lbnQgaWYgdGhlcmUgaXMgYSBmaW5hbCBjYXJyeSwgb3RoZXJ3aXNlIHJlbW92ZSBsZWFkaW5nIHplcm8uXHJcbiAgaWYgKGIpICsreS5lO1xyXG4gIGVsc2UgYy5zaGlmdCgpO1xyXG5cclxuICAvLyBSZW1vdmUgdHJhaWxpbmcgemVyb3MuXHJcbiAgZm9yIChpID0gYy5sZW5ndGg7ICFjWy0taV07KSBjLnBvcCgpO1xyXG4gIHkuYyA9IGM7XHJcblxyXG4gIHJldHVybiB5O1xyXG59O1xyXG5cclxuXHJcbi8qXHJcbiAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHZhbHVlIG9mIHRoaXMgQmlnIGluIGV4cG9uZW50aWFsIG5vdGF0aW9uIHJvdW5kZWQgdG8gZHAgZml4ZWRcclxuICogZGVjaW1hbCBwbGFjZXMgdXNpbmcgcm91bmRpbmcgbW9kZSBybSwgb3IgQmlnLlJNIGlmIHJtIGlzIG5vdCBzcGVjaWZpZWQuXHJcbiAqXHJcbiAqIGRwPyB7bnVtYmVyfSBEZWNpbWFsIHBsYWNlczogaW50ZWdlciwgMCB0byBNQVhfRFAgaW5jbHVzaXZlLlxyXG4gKiBybT8ge251bWJlcn0gUm91bmRpbmcgbW9kZTogMCAoZG93biksIDEgKGhhbGYtdXApLCAyIChoYWxmLWV2ZW4pIG9yIDMgKHVwKS5cclxuICovXHJcblAudG9FeHBvbmVudGlhbCA9IGZ1bmN0aW9uIChkcCwgcm0pIHtcclxuICB2YXIgeCA9IHRoaXMsXHJcbiAgICBuID0geC5jWzBdO1xyXG5cclxuICBpZiAoZHAgIT09IFVOREVGSU5FRCkge1xyXG4gICAgaWYgKGRwICE9PSB+fmRwIHx8IGRwIDwgMCB8fCBkcCA+IE1BWF9EUCkge1xyXG4gICAgICB0aHJvdyBFcnJvcihJTlZBTElEX0RQKTtcclxuICAgIH1cclxuICAgIHggPSByb3VuZChuZXcgeC5jb25zdHJ1Y3Rvcih4KSwgKytkcCwgcm0pO1xyXG4gICAgZm9yICg7IHguYy5sZW5ndGggPCBkcDspIHguYy5wdXNoKDApO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHN0cmluZ2lmeSh4LCB0cnVlLCAhIW4pO1xyXG59O1xyXG5cclxuXHJcbi8qXHJcbiAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHZhbHVlIG9mIHRoaXMgQmlnIGluIG5vcm1hbCBub3RhdGlvbiByb3VuZGVkIHRvIGRwIGZpeGVkXHJcbiAqIGRlY2ltYWwgcGxhY2VzIHVzaW5nIHJvdW5kaW5nIG1vZGUgcm0sIG9yIEJpZy5STSBpZiBybSBpcyBub3Qgc3BlY2lmaWVkLlxyXG4gKlxyXG4gKiBkcD8ge251bWJlcn0gRGVjaW1hbCBwbGFjZXM6IGludGVnZXIsIDAgdG8gTUFYX0RQIGluY2x1c2l2ZS5cclxuICogcm0/IHtudW1iZXJ9IFJvdW5kaW5nIG1vZGU6IDAgKGRvd24pLCAxIChoYWxmLXVwKSwgMiAoaGFsZi1ldmVuKSBvciAzICh1cCkuXHJcbiAqXHJcbiAqICgtMCkudG9GaXhlZCgwKSBpcyAnMCcsIGJ1dCAoLTAuMSkudG9GaXhlZCgwKSBpcyAnLTAnLlxyXG4gKiAoLTApLnRvRml4ZWQoMSkgaXMgJzAuMCcsIGJ1dCAoLTAuMDEpLnRvRml4ZWQoMSkgaXMgJy0wLjAnLlxyXG4gKi9cclxuUC50b0ZpeGVkID0gZnVuY3Rpb24gKGRwLCBybSkge1xyXG4gIHZhciB4ID0gdGhpcyxcclxuICAgIG4gPSB4LmNbMF07XHJcblxyXG4gIGlmIChkcCAhPT0gVU5ERUZJTkVEKSB7XHJcbiAgICBpZiAoZHAgIT09IH5+ZHAgfHwgZHAgPCAwIHx8IGRwID4gTUFYX0RQKSB7XHJcbiAgICAgIHRocm93IEVycm9yKElOVkFMSURfRFApO1xyXG4gICAgfVxyXG4gICAgeCA9IHJvdW5kKG5ldyB4LmNvbnN0cnVjdG9yKHgpLCBkcCArIHguZSArIDEsIHJtKTtcclxuXHJcbiAgICAvLyB4LmUgbWF5IGhhdmUgY2hhbmdlZCBpZiB0aGUgdmFsdWUgaXMgcm91bmRlZCB1cC5cclxuICAgIGZvciAoZHAgPSBkcCArIHguZSArIDE7IHguYy5sZW5ndGggPCBkcDspIHguYy5wdXNoKDApO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHN0cmluZ2lmeSh4LCBmYWxzZSwgISFuKTtcclxufTtcclxuXHJcblxyXG4vKlxyXG4gKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZy5cclxuICogUmV0dXJuIGV4cG9uZW50aWFsIG5vdGF0aW9uIGlmIHRoaXMgQmlnIGhhcyBhIHBvc2l0aXZlIGV4cG9uZW50IGVxdWFsIHRvIG9yIGdyZWF0ZXIgdGhhblxyXG4gKiBCaWcuUEUsIG9yIGEgbmVnYXRpdmUgZXhwb25lbnQgZXF1YWwgdG8gb3IgbGVzcyB0aGFuIEJpZy5ORS5cclxuICogT21pdCB0aGUgc2lnbiBmb3IgbmVnYXRpdmUgemVyby5cclxuICovXHJcblBbU3ltYm9sLmZvcignbm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b20nKV0gPSBQLnRvSlNPTiA9IFAudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIHggPSB0aGlzLFxyXG4gICAgQmlnID0geC5jb25zdHJ1Y3RvcjtcclxuICByZXR1cm4gc3RyaW5naWZ5KHgsIHguZSA8PSBCaWcuTkUgfHwgeC5lID49IEJpZy5QRSwgISF4LmNbMF0pO1xyXG59O1xyXG5cclxuXHJcbi8qXHJcbiAqIFJldHVybiB0aGUgdmFsdWUgb2YgdGhpcyBCaWcgYXMgYSBwcmltaXR2ZSBudW1iZXIuXHJcbiAqL1xyXG5QLnRvTnVtYmVyID0gZnVuY3Rpb24gKCkge1xyXG4gIHZhciBuID0gTnVtYmVyKHN0cmluZ2lmeSh0aGlzLCB0cnVlLCB0cnVlKSk7XHJcbiAgaWYgKHRoaXMuY29uc3RydWN0b3Iuc3RyaWN0ID09PSB0cnVlICYmICF0aGlzLmVxKG4udG9TdHJpbmcoKSkpIHtcclxuICAgIHRocm93IEVycm9yKE5BTUUgKyAnSW1wcmVjaXNlIGNvbnZlcnNpb24nKTtcclxuICB9XHJcbiAgcmV0dXJuIG47XHJcbn07XHJcblxyXG5cclxuLypcclxuICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgdmFsdWUgb2YgdGhpcyBCaWcgcm91bmRlZCB0byBzZCBzaWduaWZpY2FudCBkaWdpdHMgdXNpbmdcclxuICogcm91bmRpbmcgbW9kZSBybSwgb3IgQmlnLlJNIGlmIHJtIGlzIG5vdCBzcGVjaWZpZWQuXHJcbiAqIFVzZSBleHBvbmVudGlhbCBub3RhdGlvbiBpZiBzZCBpcyBsZXNzIHRoYW4gdGhlIG51bWJlciBvZiBkaWdpdHMgbmVjZXNzYXJ5IHRvIHJlcHJlc2VudFxyXG4gKiB0aGUgaW50ZWdlciBwYXJ0IG9mIHRoZSB2YWx1ZSBpbiBub3JtYWwgbm90YXRpb24uXHJcbiAqXHJcbiAqIHNkIHtudW1iZXJ9IFNpZ25pZmljYW50IGRpZ2l0czogaW50ZWdlciwgMSB0byBNQVhfRFAgaW5jbHVzaXZlLlxyXG4gKiBybT8ge251bWJlcn0gUm91bmRpbmcgbW9kZTogMCAoZG93biksIDEgKGhhbGYtdXApLCAyIChoYWxmLWV2ZW4pIG9yIDMgKHVwKS5cclxuICovXHJcblAudG9QcmVjaXNpb24gPSBmdW5jdGlvbiAoc2QsIHJtKSB7XHJcbiAgdmFyIHggPSB0aGlzLFxyXG4gICAgQmlnID0geC5jb25zdHJ1Y3RvcixcclxuICAgIG4gPSB4LmNbMF07XHJcblxyXG4gIGlmIChzZCAhPT0gVU5ERUZJTkVEKSB7XHJcbiAgICBpZiAoc2QgIT09IH5+c2QgfHwgc2QgPCAxIHx8IHNkID4gTUFYX0RQKSB7XHJcbiAgICAgIHRocm93IEVycm9yKElOVkFMSUQgKyAncHJlY2lzaW9uJyk7XHJcbiAgICB9XHJcbiAgICB4ID0gcm91bmQobmV3IEJpZyh4KSwgc2QsIHJtKTtcclxuICAgIGZvciAoOyB4LmMubGVuZ3RoIDwgc2Q7KSB4LmMucHVzaCgwKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBzdHJpbmdpZnkoeCwgc2QgPD0geC5lIHx8IHguZSA8PSBCaWcuTkUgfHwgeC5lID49IEJpZy5QRSwgISFuKTtcclxufTtcclxuXHJcblxyXG4vKlxyXG4gKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZy5cclxuICogUmV0dXJuIGV4cG9uZW50aWFsIG5vdGF0aW9uIGlmIHRoaXMgQmlnIGhhcyBhIHBvc2l0aXZlIGV4cG9uZW50IGVxdWFsIHRvIG9yIGdyZWF0ZXIgdGhhblxyXG4gKiBCaWcuUEUsIG9yIGEgbmVnYXRpdmUgZXhwb25lbnQgZXF1YWwgdG8gb3IgbGVzcyB0aGFuIEJpZy5ORS5cclxuICogSW5jbHVkZSB0aGUgc2lnbiBmb3IgbmVnYXRpdmUgemVyby5cclxuICovXHJcblAudmFsdWVPZiA9IGZ1bmN0aW9uICgpIHtcclxuICB2YXIgeCA9IHRoaXMsXHJcbiAgICBCaWcgPSB4LmNvbnN0cnVjdG9yO1xyXG4gIGlmIChCaWcuc3RyaWN0ID09PSB0cnVlKSB7XHJcbiAgICB0aHJvdyBFcnJvcihOQU1FICsgJ3ZhbHVlT2YgZGlzYWxsb3dlZCcpO1xyXG4gIH1cclxuICByZXR1cm4gc3RyaW5naWZ5KHgsIHguZSA8PSBCaWcuTkUgfHwgeC5lID49IEJpZy5QRSwgdHJ1ZSk7XHJcbn07XHJcblxyXG5cclxuLy8gRXhwb3J0XHJcblxyXG5cclxuZXhwb3J0IHZhciBCaWcgPSBfQmlnXygpO1xyXG5cclxuLy8vIDxyZWZlcmVuY2UgdHlwZXM9XCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vRGVmaW5pdGVseVR5cGVkL0RlZmluaXRlbHlUeXBlZC9tYXN0ZXIvdHlwZXMvYmlnLmpzL2luZGV4LmQudHNcIiAvPlxyXG5leHBvcnQgZGVmYXVsdCBCaWc7XHJcbiIsImV4cG9ydCBjbGFzcyBTdGFjazxUeXBlPiB7XG4gIHByaXZhdGUgX2lubmVyOiBUeXBlW10gPSBbXTtcblxuICBwdXNoKGl0ZW06IFR5cGUpOiB2b2lkIHtcbiAgICB0aGlzLl9pbm5lci5wdXNoKGl0ZW0pO1xuICB9XG5cbiAgcG9wKCk6IFR5cGUgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLl9pbm5lci5wb3AoKTtcbiAgfVxuXG4gIHRvcCgpOiBUeXBlIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5faW5uZXIuYXQoLTEpO1xuICB9XG5cbiAgZW1wdHkoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2lubmVyLmxlbmd0aCA9PSAwO1xuICB9XG5cbiAgcHJpbnQoKTogdm9pZCB7XG4gICAgY29uc29sZS5sb2codGhpcy5faW5uZXIpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBRdWV1ZTxUeXBlPiB7XG4gIHByaXZhdGUgX2lubmVyOiB7IFtrZXk6IG51bWJlcl06IFR5cGUgfSA9IHt9O1xuICBwcml2YXRlIF9oZWFkOiBudW1iZXIgPSAwO1xuICBwcml2YXRlIF90YWlsOiBudW1iZXIgPSAwO1xuXG4gIGVucXVldWUoaXRlbTogVHlwZSk6IHZvaWQge1xuICAgIHRoaXMuX2lubmVyW3RoaXMuX3RhaWxdID0gaXRlbTtcbiAgICB0aGlzLl90YWlsKys7XG4gIH1cblxuICBkZXF1ZXVlKCk6IFR5cGUgfCB1bmRlZmluZWQge1xuICAgIGlmICh0aGlzLl90YWlsID09PSB0aGlzLl9oZWFkKSByZXR1cm4gdW5kZWZpbmVkO1xuXG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuX2lubmVyW3RoaXMuX2hlYWRdO1xuICAgIGRlbGV0ZSB0aGlzLl9pbm5lclt0aGlzLl9oZWFkXTtcbiAgICB0aGlzLl9oZWFkKys7XG5cbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIHBlZWsoKTogVHlwZSB7XG4gICAgcmV0dXJuIHRoaXMuX2lubmVyW3RoaXMuX2hlYWRdO1xuICB9XG5cbiAgZW1wdHkoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2hlYWQgPT0gdGhpcy5fdGFpbDtcbiAgfVxuXG4gIHByaW50KCk6IHZvaWQge1xuICAgIGNvbnNvbGUubG9nKHRoaXMuX2lubmVyKTtcbiAgfVxufVxuXG5leHBvcnQgZW51bSBFeHBlY3RhdGlvbiB7XG4gIFZBUklBQkxFLFxuICBPUEVSQVRPUixcbiAgVU5ERUYsXG59XG4iLCJleHBvcnQgY2xhc3MgUmVjb21tZW5kZXIge1xuICBwcml2YXRlIF90cmllOiBUcmllTm9kZTtcbiAgcHJpdmF0ZSBfbWluU3VnZ2VzdGlvbkxlbjogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKHZhcmlhYmxlczogTWFwPHN0cmluZywgbnVtYmVyPiwgbWluU3VnZ2VzdGlvbkxlbjogbnVtYmVyKSB7XG4gICAgdGhpcy5fbWluU3VnZ2VzdGlvbkxlbiA9IG1pblN1Z2dlc3Rpb25MZW4gPiAwID8gbWluU3VnZ2VzdGlvbkxlbiA6IDE7XG4gICAgdGhpcy5fdHJpZSA9IG5ldyBUcmllTm9kZSgpO1xuICAgIHRoaXMuX3RyaWUuaW5zZXJ0QWxsKCk7XG5cbiAgICBmb3IgKGxldCB2YXJpYWJsZSBvZiB2YXJpYWJsZXMpIHtcbiAgICAgIHRoaXMuaW5zZXJ0KHZhcmlhYmxlWzBdKTtcbiAgICB9XG4gIH1cblxuICBpbnNlcnQoXG4gICAgd29yZDogc3RyaW5nLFxuICAgIHBvc2l0aW9uOiBudW1iZXIgPSAtMSxcbiAgICBub2RlOiBUcmllTm9kZSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZFxuICApOiB2b2lkIHtcbiAgICBpZiAocG9zaXRpb24gPT0gLTEpIHtcbiAgICAgIHRoaXMuaW5zZXJ0KHdvcmQsIDAsIHRoaXMuX3RyaWUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChwb3NpdGlvbiA9PSB3b3JkLmxlbmd0aCkge1xuICAgICAgbm9kZT8uYWRkQ2hpbGQoXCJcXDBcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFub2RlIS5nZXRDaGlsZCh3b3JkW3Bvc2l0aW9uXSkpIHtcbiAgICAgIG5vZGU/LmFkZENoaWxkKHdvcmRbcG9zaXRpb25dKTtcbiAgICB9XG5cbiAgICB0aGlzLmluc2VydCh3b3JkLCBwb3NpdGlvbiArIDEsIG5vZGUhLmdldENoaWxkKHdvcmRbcG9zaXRpb25dKSk7XG4gIH1cblxuICBnZXRSZWNvbW1lbmRhdGlvbih3b3JkOiBzdHJpbmcpOiBzdHJpbmdbXSB8IG51bGwge1xuICAgIGlmICh3b3JkLmxlbmd0aCA8IHRoaXMuX21pblN1Z2dlc3Rpb25MZW4pIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGxldCByZWNvbW1lbmRhdGlvbnM6IHN0cmluZ1tdID0gW107XG4gICAgbGV0IGN1cnJlbnRQb3NpdGlvbiA9IDA7XG4gICAgbGV0IGN1cnJlbnROb2RlOiBUcmllTm9kZSB8IHVuZGVmaW5lZCA9IHRoaXMuX3RyaWU7XG5cbiAgICB3aGlsZSAoY3VycmVudE5vZGUgJiYgY3VycmVudFBvc2l0aW9uIDwgd29yZC5sZW5ndGgpIHtcbiAgICAgIGN1cnJlbnROb2RlID0gY3VycmVudE5vZGUuZ2V0Q2hpbGQod29yZFtjdXJyZW50UG9zaXRpb25dKTtcbiAgICAgIGN1cnJlbnRQb3NpdGlvbisrO1xuICAgIH1cblxuICAgIGlmICghY3VycmVudE5vZGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHRoaXMuX3RyYXZlcnNlQW5kR2V0KHJlY29tbWVuZGF0aW9ucywgY3VycmVudE5vZGUsIHdvcmQsIGN1cnJlbnRQb3NpdGlvbik7XG5cbiAgICBpZiAoXG4gICAgICByZWNvbW1lbmRhdGlvbnMubGVuZ3RoID09IDAgfHxcbiAgICAgIChyZWNvbW1lbmRhdGlvbnMubGVuZ3RoID09IDEgJiYgcmVjb21tZW5kYXRpb25zWzBdID09IHdvcmQpXG4gICAgKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVjb21tZW5kYXRpb25zO1xuICB9XG5cbiAgX3RyYXZlcnNlQW5kR2V0KFxuICAgIHJlY29tbWVuZGF0aW9uczogc3RyaW5nW10sXG4gICAgbm9kZTogVHJpZU5vZGUsXG4gICAgd29yZDogc3RyaW5nLFxuICAgIHBvc2l0aW9uOiBudW1iZXIsXG4gICAgY3VycmVudFN0cjogc3RyaW5nID0gXCJcIlxuICApIHtcbiAgICAvLyBpZiAoY3VycmVudFN0ciAhPSBcIlwiKSB7XG4gICAgLy8gICByZWNvbW1lbmRhdGlvbnMucHVzaCh3b3JkICsgY3VycmVudFN0cik7XG4gICAgLy8gfVxuXG4gICAgLy8gaWYgKG5vZGUuY2hpbGRyZW4uc2l6ZSA9PSAwKSB7XG4gICAgLy8gICByZXR1cm47XG4gICAgLy8gfVxuXG4gICAgZm9yIChsZXQgY2hpbGQgb2Ygbm9kZS5jaGlsZHJlbikge1xuICAgICAgaWYgKGNoaWxkWzBdID09IFwiXFwwXCIpIHtcbiAgICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2god29yZCArIGN1cnJlbnRTdHIpO1xuICAgICAgICAvLyByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3RyYXZlcnNlQW5kR2V0KFxuICAgICAgICByZWNvbW1lbmRhdGlvbnMsXG4gICAgICAgIGNoaWxkWzFdLFxuICAgICAgICB3b3JkLFxuICAgICAgICBwb3NpdGlvbixcbiAgICAgICAgY3VycmVudFN0ciArIGNoaWxkWzBdXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5jbGFzcyBUcmllTm9kZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2NoaWxkcmVuID0gbmV3IE1hcDxzdHJpbmcsIFRyaWVOb2RlPigpO1xuICB9XG5cbiAgcHJpdmF0ZSBfY2hpbGRyZW46IE1hcDxzdHJpbmcsIFRyaWVOb2RlPjtcbiAgZ2V0IGNoaWxkcmVuKCkge1xuICAgIHJldHVybiB0aGlzLl9jaGlsZHJlbjtcbiAgfVxuXG4gIGluc2VydEFsbCgpIHtcbiAgICBjb25zdCBMT1dFUkNBU0VfQVNDSUlfQkVHSU4gPSA5NztcblxuICAgIGZvciAobGV0IGNoYXIgPSAwOyBjaGFyIDwgMjY7IGNoYXIrKykge1xuICAgICAgdGhpcy5fY2hpbGRyZW4uc2V0KFxuICAgICAgICBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoYXIgKyBMT1dFUkNBU0VfQVNDSUlfQkVHSU4pLFxuICAgICAgICBuZXcgVHJpZU5vZGUoKVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBnZXRDaGlsZChjaGFyOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5fY2hpbGRyZW4uZ2V0KGNoYXIpO1xuICB9XG5cbiAgYWRkQ2hpbGQoY2hhcjogc3RyaW5nKSB7XG4gICAgdGhpcy5fY2hpbGRyZW4uc2V0KGNoYXIsIG5ldyBUcmllTm9kZSgpKTtcbiAgfVxufVxuIiwiaW1wb3J0IEJpZyBmcm9tIFwiYmlnLmpzXCI7XG5pbXBvcnQgeyBFeHBlY3RhdGlvbiwgUXVldWUsIFN0YWNrIH0gZnJvbSBcIi4vaGVscGVycy5qc1wiO1xuaW1wb3J0IHsgUmVjb21tZW5kZXIgfSBmcm9tIFwiLi9yZWNvbW1lbmRvci5qc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBhcnNlT3V0cHV0IHtcbiAgcmVjb21tZW5kYXRpb25zOiBzdHJpbmdbXSB8IG51bGw7XG4gIGZvcm1hdHRlZENvbnRlbnQ6IEhUTUxCb2R5RWxlbWVudCB8IG51bGw7XG4gIGZvcm1hdHRlZFN0cmluZzogc3RyaW5nIHwgbnVsbDtcbiAgbmV3Q3Vyc29yUG9zaXRpb246IG51bWJlcjtcbiAgZXJyb3JTdHI6IHN0cmluZyB8IG51bGw7XG59XG5cbmV4cG9ydCBjbGFzcyBQYXJzZXIge1xuICBjb25zdHJ1Y3Rvcih2YXJpYWJsZXM6IE1hcDxzdHJpbmcsIG51bWJlcj4sIG1pblN1Z2dlc3Rpb25MZW46IG51bWJlcikge1xuICAgIHRoaXMudmFyaWFibGVzID0gdmFyaWFibGVzO1xuXG4gICAgdGhpcy5fcmVjb21tZW5kZXIgPSBuZXcgUmVjb21tZW5kZXIodGhpcy52YXJpYWJsZXMsIG1pblN1Z2dlc3Rpb25MZW4pO1xuICB9XG5cbiAgcHJpdmF0ZSBfcmVjb21tZW5kZXI6IFJlY29tbWVuZGVyO1xuXG4gIHZhcmlhYmxlczogTWFwPHN0cmluZywgbnVtYmVyPjtcbiAgbWF0aGVtYXRpY2FsT3BlcmF0b3JzOiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQoW1wiK1wiLCBcIi1cIiwgXCIqXCIsIFwiL1wiXSk7XG4gIG9wZXJhdG9yUHJlY2VkZW5jZTogeyBba2V5OiBzdHJpbmddOiBudW1iZXIgfSA9IHtcbiAgICBcIl5cIjogMyxcbiAgICBcIi9cIjogMixcbiAgICBcIipcIjogMixcbiAgICBcIitcIjogMSxcbiAgICBcIi1cIjogMSxcbiAgfTtcblxuICBwYXJzZUlucHV0KFxuICAgIGZvcm11bGE6IHN0cmluZyxcbiAgICBwcmV2Q3VyUG9zOiBudW1iZXIgfCBudWxsID0gbnVsbCxcbiAgICByZWNvbW1lbmRhdGlvbjogc3RyaW5nIHwgbnVsbCA9IG51bGxcbiAgKTogUGFyc2VPdXRwdXQge1xuICAgIGxldCB0b2tlbnMgPSBmb3JtdWxhLnNwbGl0KC8oWy0rKCksKi86P1xcc10pL2cpLFxuICAgICAgcGFyZW50aGVzZXMgPSBuZXcgU3RhY2s8bnVtYmVyPigpLFxuICAgICAgZm9ybWF0dGVkU3RyaW5nID0gYGAsXG4gICAgICBleHBlY3RhdGlvbiA9IEV4cGVjdGF0aW9uLlZBUklBQkxFLFxuICAgICAgYnJhY2tldENvdW50ID0gMCxcbiAgICAgIGN1cnJlbnRQb3NpdGlvbiA9IDAsXG4gICAgICBwcmV2VG9rZW4gPSBcIlwiLFxuICAgICAgcGFyc2VPdXRwdXQ6IFBhcnNlT3V0cHV0ID0ge1xuICAgICAgICByZWNvbW1lbmRhdGlvbnM6IG51bGwsXG4gICAgICAgIGZvcm1hdHRlZENvbnRlbnQ6IG51bGwsXG4gICAgICAgIGZvcm1hdHRlZFN0cmluZzogbnVsbCxcbiAgICAgICAgbmV3Q3Vyc29yUG9zaXRpb246IHByZXZDdXJQb3MgPz8gLTEsXG4gICAgICAgIGVycm9yU3RyOiBudWxsLFxuICAgICAgfTtcblxuICAgIC8vIGNvbnNvbGUubG9nKHRva2Vucyk7XG5cbiAgICB0b2tlbnMuZm9yRWFjaCgodG9rZW4pID0+IHtcbiAgICAgIGxldCBpc051bWJlciA9XG4gICAgICAgICAgdGhpcy52YXJpYWJsZXMuaGFzKHRva2VuKSB8fFxuICAgICAgICAgIChyZWNvbW1lbmRhdGlvbiAmJiB0aGlzLnZhcmlhYmxlcy5oYXMocmVjb21tZW5kYXRpb24pKSB8fFxuICAgICAgICAgICFOdW1iZXIuaXNOYU4oTnVtYmVyKHRva2VuKSksXG4gICAgICAgIGlzT3BlcmF0b3IgPSB0aGlzLm1hdGhlbWF0aWNhbE9wZXJhdG9ycy5oYXModG9rZW4pLFxuICAgICAgICBpc1NwYWNlID0gdG9rZW4udHJpbSgpID09IFwiXCIsXG4gICAgICAgIGlzQnJhY2tldCA9IHRva2VuID09IFwiKFwiIHx8IHRva2VuID09IFwiKVwiO1xuXG4gICAgICBpZiAoaXNTcGFjZSkge1xuICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSBgJHtmb3JtYXR0ZWRTdHJpbmd9JHt0b2tlbn1gO1xuICAgICAgICBjdXJyZW50UG9zaXRpb24gKz0gdG9rZW4ubGVuZ3RoO1xuICAgICAgICBjb25zb2xlLmxvZyhcImlzU3BhY2VcIiwgdG9rZW4ubGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIGN1cnJlbnRQb3NpdGlvbiA8PSBwcmV2Q3VyUG9zISAmJlxuICAgICAgICBjdXJyZW50UG9zaXRpb24gKyB0b2tlbi5sZW5ndGggPj0gcHJldkN1clBvcyEgJiZcbiAgICAgICAgIXBhcnNlT3V0cHV0LnJlY29tbWVuZGF0aW9uc1xuICAgICAgKSB7XG4gICAgICAgIC8vIElmIGEgcmVjb21tZW5kYXRpb24gd2FzIHByb3ZpZGVkLCByZXBsYWNlIHRoZSBjb3JyZXNwb2RpbmdcbiAgICAgICAgLy8gd29yZCB3aXRoIGl0IGFuZCBtb3ZlIHRoZSBjdXJzb3IgZm9yd2FyZCwgYWNjb3JkaW5nbHkuXG4gICAgICAgIGlmIChyZWNvbW1lbmRhdGlvbikge1xuICAgICAgICAgIHBhcnNlT3V0cHV0Lm5ld0N1cnNvclBvc2l0aW9uID0gTWF0aC5taW4oXG4gICAgICAgICAgICBwYXJzZU91dHB1dC5uZXdDdXJzb3JQb3NpdGlvbiArXG4gICAgICAgICAgICAgIHJlY29tbWVuZGF0aW9uLmxlbmd0aCAtXG4gICAgICAgICAgICAgIHRva2VuLmxlbmd0aCxcbiAgICAgICAgICAgIGZvcm11bGEubGVuZ3RoICsgcmVjb21tZW5kYXRpb24ubGVuZ3RoIC0gdG9rZW4ubGVuZ3RoXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0b2tlbiA9IHJlY29tbWVuZGF0aW9uO1xuICAgICAgICAgIHJlY29tbWVuZGF0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcnNlT3V0cHV0LnJlY29tbWVuZGF0aW9ucyA9XG4gICAgICAgICAgdGhpcy5fcmVjb21tZW5kZXIuZ2V0UmVjb21tZW5kYXRpb24odG9rZW4pO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhwYXJzZU91dHB1dC5yZWNvbW1lbmRhdGlvbnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gcGFyc2VPdXRwdXQucmVjb21tZW5kYXRpb25zID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgbGV0IHRva2VuQ2xhc3NOYW1lID0gXCJcIjtcblxuICAgICAgaWYgKHRva2VuID09IFwiKFwiKSB7XG4gICAgICAgIGJyYWNrZXRDb3VudCsrO1xuICAgICAgICBwYXJlbnRoZXNlcy5wdXNoKGN1cnJlbnRQb3NpdGlvbik7XG4gICAgICAgIHRva2VuQ2xhc3NOYW1lICs9IFwiIGJyYWNrZXRcIjtcbiAgICAgIH0gZWxzZSBpZiAodG9rZW4gPT0gXCIpXCIpIHtcbiAgICAgICAgcGFyZW50aGVzZXMucG9wKCk7XG4gICAgICAgIGJyYWNrZXRDb3VudC0tO1xuICAgICAgICB0b2tlbkNsYXNzTmFtZSArPSBcIiBicmFja2V0XCI7XG4gICAgICB9IGVsc2UgaWYgKGlzT3BlcmF0b3IpIHtcbiAgICAgICAgdG9rZW5DbGFzc05hbWUgKz0gXCIgb3BlcmF0b3JcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgZXhwZWN0YXRpb24gPT0gRXhwZWN0YXRpb24uVU5ERUYgfHxcbiAgICAgICAgKGV4cGVjdGF0aW9uID09IEV4cGVjdGF0aW9uLlZBUklBQkxFICYmICFpc051bWJlciAmJiAhaXNCcmFja2V0KSB8fFxuICAgICAgICAoZXhwZWN0YXRpb24gPT0gRXhwZWN0YXRpb24uT1BFUkFUT1IgJiYgIWlzT3BlcmF0b3IpIHx8XG4gICAgICAgICh0b2tlbiA9PSBcIilcIiAmJiBwcmV2VG9rZW4gPT0gXCIoXCIpIHx8XG4gICAgICAgICEoaXNOdW1iZXIgfHwgaXNPcGVyYXRvciB8fCBpc0JyYWNrZXQpIHx8XG4gICAgICAgIChpc051bWJlciAmJlxuICAgICAgICAgIHByZXZUb2tlbiA9PSBcIi9cIiAmJlxuICAgICAgICAgICh0aGlzLnZhcmlhYmxlcy5nZXQodG9rZW4pID09IDAgfHwgTnVtYmVyKHRva2VuKSA9PSAwKSlcbiAgICAgICkge1xuICAgICAgICB0b2tlbkNsYXNzTmFtZSArPSBcIiBlcnJvclwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXBhcnNlT3V0cHV0LmVycm9yU3RyKSB7XG4gICAgICAgIGlmIChicmFja2V0Q291bnQgPCAwKSB7XG4gICAgICAgICAgcGFyc2VPdXRwdXQuZXJyb3JTdHIgPSBgVW5leHBlY3RlZCAnKScgYXQgcG9zOiAke2N1cnJlbnRQb3NpdGlvbn1gO1xuICAgICAgICAgIGV4cGVjdGF0aW9uID0gRXhwZWN0YXRpb24uVU5ERUY7XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgZXhwZWN0YXRpb24gPT0gRXhwZWN0YXRpb24uVkFSSUFCTEUgJiZcbiAgICAgICAgICAhaXNOdW1iZXIgJiZcbiAgICAgICAgICAhaXNCcmFja2V0XG4gICAgICAgICkge1xuICAgICAgICAgIHBhcnNlT3V0cHV0LmVycm9yU3RyID0gYEV4cGVjdGVkIHZhcmlhYmxlL251bWJlciBhdCBwb3M6ICR7Y3VycmVudFBvc2l0aW9ufWA7XG4gICAgICAgICAgZXhwZWN0YXRpb24gPSBFeHBlY3RhdGlvbi5VTkRFRjtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICBleHBlY3RhdGlvbiA9PSBFeHBlY3RhdGlvbi5PUEVSQVRPUiAmJlxuICAgICAgICAgICFpc09wZXJhdG9yICYmXG4gICAgICAgICAgdG9rZW4gIT0gXCIpXCJcbiAgICAgICAgKSB7XG4gICAgICAgICAgcGFyc2VPdXRwdXQuZXJyb3JTdHIgPSBgRXhwZWN0ZWQgbWF0aGVtYXRpY2FsIG9wZXJhdG9yIGF0IHBvczogJHtjdXJyZW50UG9zaXRpb259YDtcbiAgICAgICAgICBleHBlY3RhdGlvbiA9IEV4cGVjdGF0aW9uLlVOREVGO1xuICAgICAgICB9IGVsc2UgaWYgKCEoaXNOdW1iZXIgfHwgaXNPcGVyYXRvciB8fCBpc0JyYWNrZXQpKSB7XG4gICAgICAgICAgcGFyc2VPdXRwdXQuZXJyb3JTdHIgPSBgVW5rbm93biB3b3JkIGF0IHBvczogJHtjdXJyZW50UG9zaXRpb259YDtcbiAgICAgICAgICBleHBlY3RhdGlvbiA9IEV4cGVjdGF0aW9uLlVOREVGO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIGlzTnVtYmVyICYmXG4gICAgICAgICAgcHJldlRva2VuID09IFwiL1wiICYmXG4gICAgICAgICAgKHRoaXMudmFyaWFibGVzLmdldCh0b2tlbikgPT0gMCB8fCBOdW1iZXIodG9rZW4pID09IDApXG4gICAgICAgICkge1xuICAgICAgICAgIHBhcnNlT3V0cHV0LmVycm9yU3RyID0gYERpdmlzaW9uIGJ5IHplcm8gYXQgcG9zOiAke2N1cnJlbnRQb3NpdGlvbn1gO1xuICAgICAgICAgIGV4cGVjdGF0aW9uID0gRXhwZWN0YXRpb24uVU5ERUY7XG4gICAgICAgIH0gZWxzZSBpZiAocHJldlRva2VuID09IFwiKFwiICYmIHRva2VuID09IFwiKVwiKSB7XG4gICAgICAgICAgcGFyc2VPdXRwdXQuZXJyb3JTdHIgPSBgRW1wdHkgYnJhY2tldHMgYXQgcG9zaXRpb24gJHtjdXJyZW50UG9zaXRpb259YDtcbiAgICAgICAgICBleHBlY3RhdGlvbiA9IEV4cGVjdGF0aW9uLlVOREVGO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChleHBlY3RhdGlvbiAhPSBFeHBlY3RhdGlvbi5VTkRFRikge1xuICAgICAgICBpZiAodG9rZW4gPT0gXCIoXCIgfHwgaXNPcGVyYXRvcikge1xuICAgICAgICAgIGV4cGVjdGF0aW9uID0gRXhwZWN0YXRpb24uVkFSSUFCTEU7XG4gICAgICAgIH0gZWxzZSBpZiAodG9rZW4gPT0gXCIpXCIgfHwgaXNOdW1iZXIpIHtcbiAgICAgICAgICBleHBlY3RhdGlvbiA9IEV4cGVjdGF0aW9uLk9QRVJBVE9SO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvcm1hdHRlZFN0cmluZyA9IGAke2Zvcm1hdHRlZFN0cmluZ308c3BhbiBjbGFzcz1cInd5c2l3eWdJbnRlcm5hbHMgJHt0b2tlbkNsYXNzTmFtZX1cIj4ke3Rva2VufTwvc3Bhbj5gO1xuXG4gICAgICBjdXJyZW50UG9zaXRpb24gKz0gdG9rZW4ubGVuZ3RoO1xuICAgICAgcHJldlRva2VuID0gdG9rZW47XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5tYXRoZW1hdGljYWxPcGVyYXRvcnMuaGFzKHByZXZUb2tlbikpIHtcbiAgICAgIHBhcnNlT3V0cHV0LmVycm9yU3RyID0gXCJVbmV4cGVjdGVkIGVuZGluZyBvZiBmb3JtdWxhLlwiO1xuICAgIH1cblxuICAgIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcbiAgICBjb25zdCBkb2MgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKGZvcm1hdHRlZFN0cmluZywgXCJ0ZXh0L2h0bWxcIik7XG5cbiAgICBwYXJzZU91dHB1dC5mb3JtYXR0ZWRDb250ZW50ID0gZG9jLnF1ZXJ5U2VsZWN0b3IoXCJib2R5XCIpITtcbiAgICBwYXJzZU91dHB1dC5mb3JtYXR0ZWRTdHJpbmcgPSBmb3JtYXR0ZWRTdHJpbmc7XG5cbiAgICBpZiAoIXBhcmVudGhlc2VzLmVtcHR5KCkpIHtcbiAgICAgIHBhcnNlT3V0cHV0LmVycm9yU3RyID0gYFVuY2xvc2VkICcoJyBhdCBwb3NpdGlvbjogJHtwYXJlbnRoZXNlcy50b3AoKX1gO1xuICAgIH1cblxuICAgIHJldHVybiBwYXJzZU91dHB1dDtcbiAgfVxuXG4gIGJ1aWxkUlBOKGZvcm11bGE6IHN0cmluZyk6IFF1ZXVlPHN0cmluZz4gfCBudWxsIHtcbiAgICBpZiAodGhpcy5wYXJzZUlucHV0KGZvcm11bGEpLmVycm9yU3RyKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBsZXQgdG9rZW5zID0gZm9ybXVsYVxuICAgICAgLnNwbGl0KC8oWy0rKCksKi86P1xcc10pL2cpXG4gICAgICAuZmlsdGVyKChlbDogc3RyaW5nKSA9PiAhL1xccysvLnRlc3QoZWwpICYmIGVsICE9PSBcIlwiKTtcbiAgICAvLyB0aGlzLmNhbGN1bGF0ZWRSZXN1bHQgPSB0aGlzLl9wYXJzZXIuY2FsY3VsYXRlKHRoaXMuY29udGVudCkhO1xuXG4gICAgLy8gSW1wbGVtZW50aW5nIHRoZSBTaHVudGluZyBZYXJkIEFsZ29yaXRobSAoRVcgRGlqa3N0cmEpXG5cbiAgICBjb25zdCBvcGVyYXRvclN0YWNrID0gbmV3IFN0YWNrPHN0cmluZz4oKTtcbiAgICBjb25zdCBvdXRwdXRRdWV1ZSA9IG5ldyBRdWV1ZTxzdHJpbmc+KCk7XG5cbiAgICBmb3IgKGxldCB0b2tlbiBvZiB0b2tlbnMpIHtcbiAgICAgIGlmICh0b2tlbiA9PSBcIihcIikge1xuICAgICAgICBvcGVyYXRvclN0YWNrLnB1c2goXCIoXCIpO1xuICAgICAgfSBlbHNlIGlmICh0b2tlbiA9PSBcIilcIikge1xuICAgICAgICB3aGlsZSAob3BlcmF0b3JTdGFjay50b3AoKSAhPSBcIihcIikge1xuICAgICAgICAgIG91dHB1dFF1ZXVlLmVucXVldWUob3BlcmF0b3JTdGFjay5wb3AoKSEpO1xuICAgICAgICB9XG5cbiAgICAgICAgb3BlcmF0b3JTdGFjay5wb3AoKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5tYXRoZW1hdGljYWxPcGVyYXRvcnMuaGFzKHRva2VuKSkge1xuICAgICAgICB3aGlsZSAoXG4gICAgICAgICAgdGhpcy5tYXRoZW1hdGljYWxPcGVyYXRvcnMuaGFzKG9wZXJhdG9yU3RhY2sudG9wKCkhKSAmJlxuICAgICAgICAgIHRoaXMub3BlcmF0b3JQcmVjZWRlbmNlW3Rva2VuXSA8PVxuICAgICAgICAgICAgdGhpcy5vcGVyYXRvclByZWNlZGVuY2Vbb3BlcmF0b3JTdGFjay50b3AoKSFdXG4gICAgICAgICkge1xuICAgICAgICAgIG91dHB1dFF1ZXVlLmVucXVldWUob3BlcmF0b3JTdGFjay5wb3AoKSEpO1xuICAgICAgICB9XG5cbiAgICAgICAgb3BlcmF0b3JTdGFjay5wdXNoKHRva2VuKTtcbiAgICAgIH0gZWxzZSBpZiAoIU51bWJlci5pc05hTih0b2tlbikgJiYgdG9rZW4gIT0gXCJcIikge1xuICAgICAgICBvdXRwdXRRdWV1ZS5lbnF1ZXVlKHRva2VuKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB3aGlsZSAob3BlcmF0b3JTdGFjay50b3AoKSkge1xuICAgICAgb3V0cHV0UXVldWUuZW5xdWV1ZShvcGVyYXRvclN0YWNrLnBvcCgpISk7XG4gICAgfVxuXG4gICAgKCgpID0+IHtcbiAgICAgIC8vIG91dHB1dFF1ZXVlPy5wcmludCgpO1xuICAgIH0pKCk7XG5cbiAgICByZXR1cm4gb3V0cHV0UXVldWU7XG4gIH1cblxuICBhZGRQYXJlbnMoZm9ybXVsYTogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgY29uc3QgcnBuID0gdGhpcy5idWlsZFJQTihmb3JtdWxhKTtcblxuICAgIGlmICghcnBuKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBsZXQgc3RyaW5nUlBOID0gXCJcIjtcblxuICAgIHdoaWxlICghcnBuLmVtcHR5KCkpIHtcbiAgICAgIHN0cmluZ1JQTiArPSBycG4uZGVxdWV1ZSgpICsgXCIgXCI7XG4gICAgfVxuXG4gICAgbGV0IGxleGVkUlBOID0gc3RyaW5nUlBOXG4gICAgICAvLyAucmVwbGFjZSgvXFxeL2csIFwiKipcIilcbiAgICAgIC5zcGxpdCgvXFxzKy9nKVxuICAgICAgLmZpbHRlcigoZWw6IHN0cmluZykgPT4gIS9cXHMrLy50ZXN0KGVsKSAmJiBlbCAhPT0gXCJcIik7XG5cbiAgICBsZXQgb3BlcmF0b3JTdGFjayA9IG5ldyBTdGFjazxzdHJpbmcgfCBudWxsPigpO1xuICAgIGxldCByZXN1bHRTdGFjayA9IG5ldyBTdGFjazxzdHJpbmc+KCk7XG5cbiAgICBsZXhlZFJQTi5mb3JFYWNoKChzeW1ib2wpID0+IHtcbiAgICAgIGxldCBzdHJhLCBzdHJiO1xuXG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMudmFyaWFibGVzLmhhcyhzeW1ib2wpIHx8XG4gICAgICAgICghaXNOYU4ocGFyc2VGbG9hdChzeW1ib2wpKSAmJiBpc0Zpbml0ZShwYXJzZUZsb2F0KHN5bWJvbCkpKVxuICAgICAgKSB7XG4gICAgICAgIHJlc3VsdFN0YWNrLnB1c2goc3ltYm9sKTtcbiAgICAgICAgb3BlcmF0b3JTdGFjay5wdXNoKG51bGwpO1xuICAgICAgfSBlbHNlIGlmIChPYmplY3Qua2V5cyh0aGlzLm9wZXJhdG9yUHJlY2VkZW5jZSkuaW5jbHVkZXMoc3ltYm9sKSkge1xuICAgICAgICBsZXQgW2EsIGIsIG9wYSwgb3BiXSA9IFtcbiAgICAgICAgICByZXN1bHRTdGFjay5wb3AoKSxcbiAgICAgICAgICByZXN1bHRTdGFjay5wb3AoKSxcbiAgICAgICAgICBvcGVyYXRvclN0YWNrLnBvcCgpISxcbiAgICAgICAgICBvcGVyYXRvclN0YWNrLnBvcCgpISxcbiAgICAgICAgXTtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgdGhpcy5vcGVyYXRvclByZWNlZGVuY2Vbb3BiXSA8PSB0aGlzLm9wZXJhdG9yUHJlY2VkZW5jZVtzeW1ib2xdIHx8XG4gICAgICAgICAgKHRoaXMub3BlcmF0b3JQcmVjZWRlbmNlW29wYl0gPT09IHRoaXMub3BlcmF0b3JQcmVjZWRlbmNlW3N5bWJvbF0gJiZcbiAgICAgICAgICAgIFtcIi9cIiwgXCItXCJdLmluY2x1ZGVzKHN5bWJvbCkpXG4gICAgICAgICkge1xuICAgICAgICAgIHN0cmIgPSBgKCR7Yn0pYDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHJiID0gYCR7Yn1gO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRoaXMub3BlcmF0b3JQcmVjZWRlbmNlW29wYV0gPD0gdGhpcy5vcGVyYXRvclByZWNlZGVuY2Vbc3ltYm9sXSB8fFxuICAgICAgICAgICh0aGlzLm9wZXJhdG9yUHJlY2VkZW5jZVtvcGFdID09PSB0aGlzLm9wZXJhdG9yUHJlY2VkZW5jZVtzeW1ib2xdICYmXG4gICAgICAgICAgICBbXCIvXCIsIFwiLVwiXS5pbmNsdWRlcyhzeW1ib2wpKVxuICAgICAgICApIHtcbiAgICAgICAgICBzdHJhID0gYCgke2F9KWA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyYSA9IGAke2F9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlc3VsdFN0YWNrLnB1c2goYCR7c3RyYn0gJHtzeW1ib2x9ICR7c3RyYX1gKTtcbiAgICAgICAgb3BlcmF0b3JTdGFjay5wdXNoKHN5bWJvbCk7XG4gICAgICB9IGVsc2UgdGhyb3cgYCR7c3ltYm9sfSBpcyBub3QgYSByZWNvZ25pemVkIHN5bWJvbGA7XG4gICAgfSk7XG5cbiAgICBpZiAoIXJlc3VsdFN0YWNrLmVtcHR5KCkpIHtcbiAgICAgIHJldHVybiByZXN1bHRTdGFjay5wb3AoKSE7XG4gICAgfSBlbHNlIHRocm93IGAke3N0cmluZ1JQTn0gaXMgbm90IGEgY29ycmVjdCBSUE5gO1xuICB9XG5cbiAgY2FsY3VsYXRlKGZvcm11bGE6IHN0cmluZyk6IG51bWJlciB8IHVuZGVmaW5lZCB7XG4gICAgbGV0IHJwbiA9IHRoaXMuYnVpbGRSUE4oZm9ybXVsYSk7XG5cbiAgICBpZiAoIXJwbikge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBsZXQgY2FsY1N0YWNrID0gbmV3IFN0YWNrPEJpZz4oKTtcblxuICAgIHdoaWxlICghcnBuLmVtcHR5KCkpIHtcbiAgICAgIGNvbnN0IGZyb250SXRlbSA9IHJwbi5kZXF1ZXVlKCkhO1xuXG4gICAgICBpZiAoIXRoaXMubWF0aGVtYXRpY2FsT3BlcmF0b3JzLmhhcyhmcm9udEl0ZW0pKSB7XG4gICAgICAgIGNhbGNTdGFjay5wdXNoKFxuICAgICAgICAgIEJpZyhcbiAgICAgICAgICAgIE51bWJlci5wYXJzZUZsb2F0KFxuICAgICAgICAgICAgICB0aGlzLnZhcmlhYmxlcy5nZXQoZnJvbnRJdGVtKT8udG9TdHJpbmcoKSA/PyBmcm9udEl0ZW1cbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgb3BlcmF0b3IgPSBmcm9udEl0ZW07XG4gICAgICAgIGxldCBudW1CID0gY2FsY1N0YWNrLnBvcCgpITtcbiAgICAgICAgbGV0IG51bUEgPSBjYWxjU3RhY2sucG9wKCkhO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgc3dpdGNoIChvcGVyYXRvcikge1xuICAgICAgICAgICAgY2FzZSBcIitcIjpcbiAgICAgICAgICAgICAgY2FsY1N0YWNrLnB1c2goQmlnKG51bUEpLmFkZChCaWcobnVtQikpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiLVwiOlxuICAgICAgICAgICAgICBjYWxjU3RhY2sucHVzaChCaWcobnVtQSkuc3ViKEJpZyhudW1CKSkpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCIqXCI6XG4gICAgICAgICAgICAgIGNhbGNTdGFjay5wdXNoKEJpZyhudW1BKS5tdWwoQmlnKG51bUIpKSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIi9cIjpcbiAgICAgICAgICAgICAgY2FsY1N0YWNrLnB1c2goQmlnKG51bUEpLmRpdihCaWcobnVtQikpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY2FsY1N0YWNrLnRvcCgpPy50b051bWJlcigpO1xuICB9XG59XG4iLCJleHBvcnQgY2xhc3MgQ3Vyc29yIHtcbiAgc3RhdGljIGdldEN1cnJlbnRDdXJzb3JQb3NpdGlvbihwYXJlbnRFbGVtZW50OiBhbnkpIHtcbiAgICBsZXQgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbigpLFxuICAgICAgY2hhckNvdW50ID0gLTEsXG4gICAgICBub2RlO1xuXG4gICAgaWYgKHNlbGVjdGlvbj8uZm9jdXNOb2RlKSB7XG4gICAgICBpZiAoQ3Vyc29yLl9pc0NoaWxkT2Yoc2VsZWN0aW9uLmZvY3VzTm9kZSwgcGFyZW50RWxlbWVudCkpIHtcbiAgICAgICAgbm9kZSA9IHNlbGVjdGlvbi5mb2N1c05vZGU7XG4gICAgICAgIGNoYXJDb3VudCA9IHNlbGVjdGlvbi5mb2N1c09mZnNldDtcblxuICAgICAgICB3aGlsZSAobm9kZSkge1xuICAgICAgICAgIGlmIChub2RlID09PSBwYXJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobm9kZS5wcmV2aW91c1NpYmxpbmcpIHtcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLnByZXZpb3VzU2libGluZztcbiAgICAgICAgICAgIGNoYXJDb3VudCArPSBub2RlLnRleHRDb250ZW50Py5sZW5ndGggPz8gMDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgIGlmIChub2RlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjaGFyQ291bnQ7XG4gIH1cblxuICBzdGF0aWMgc2V0Q3VycmVudEN1cnNvclBvc2l0aW9uKGNoYXJzOiBudW1iZXIsIGVsZW1lbnQ6IGFueSkge1xuICAgIGlmIChjaGFycyA+PSAwKSB7XG4gICAgICB2YXIgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICAgICAgbGV0IHJhbmdlID0gQ3Vyc29yLl9jcmVhdGVSYW5nZShlbGVtZW50LCB7IGNvdW50OiBjaGFycyB9LCB1bmRlZmluZWQpO1xuXG4gICAgICBpZiAocmFuZ2UpIHtcbiAgICAgICAgcmFuZ2UuY29sbGFwc2UoZmFsc2UpO1xuICAgICAgICBzZWxlY3Rpb24/LnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgICBzZWxlY3Rpb24/LmFkZFJhbmdlKHJhbmdlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgX2NyZWF0ZVJhbmdlKG5vZGU6IGFueSwgY2hhcnM6IGFueSwgcmFuZ2U6IGFueSkge1xuICAgIGlmICghcmFuZ2UpIHtcbiAgICAgIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICAgIHJhbmdlLnNlbGVjdE5vZGUobm9kZSk7XG4gICAgICByYW5nZS5zZXRTdGFydChub2RlLCAwKTtcbiAgICB9XG5cbiAgICBpZiAoY2hhcnMuY291bnQgPT09IDApIHtcbiAgICAgIHJhbmdlLnNldEVuZChub2RlLCBjaGFycy5jb3VudCk7XG4gICAgfSBlbHNlIGlmIChub2RlICYmIGNoYXJzLmNvdW50ID4gMCkge1xuICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFKSB7XG4gICAgICAgIGlmIChub2RlLnRleHRDb250ZW50Lmxlbmd0aCA8IGNoYXJzLmNvdW50KSB7XG4gICAgICAgICAgY2hhcnMuY291bnQgLT0gbm9kZS50ZXh0Q29udGVudC5sZW5ndGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmFuZ2Uuc2V0RW5kKG5vZGUsIGNoYXJzLmNvdW50KTtcbiAgICAgICAgICBjaGFycy5jb3VudCA9IDA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAodmFyIGxwID0gMDsgbHAgPCBub2RlLmNoaWxkTm9kZXMubGVuZ3RoOyBscCsrKSB7XG4gICAgICAgICAgcmFuZ2UgPSBDdXJzb3IuX2NyZWF0ZVJhbmdlKG5vZGUuY2hpbGROb2Rlc1tscF0sIGNoYXJzLCByYW5nZSk7XG5cbiAgICAgICAgICBpZiAoY2hhcnMuY291bnQgPT09IDApIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByYW5nZTtcbiAgfVxuXG4gIHN0YXRpYyBfaXNDaGlsZE9mKG5vZGU6IGFueSwgcGFyZW50RWxlbWVudDogYW55KSB7XG4gICAgd2hpbGUgKG5vZGUgIT09IG51bGwpIHtcbiAgICAgIGlmIChub2RlID09PSBwYXJlbnRFbGVtZW50KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdGF0aWMgZ2V0Q2FyZXQgPSAoZWxlbWVudDogYW55KSA9PiB7XG4gICAgY29uc3QgcmFuZ2UgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkhLmdldFJhbmdlQXQoMCk7XG4gICAgY29uc3QgcHJlZml4ID0gcmFuZ2UuY2xvbmVSYW5nZSgpO1xuICAgIHByZWZpeC5zZWxlY3ROb2RlQ29udGVudHMoZWxlbWVudCk7XG4gICAgcHJlZml4LnNldEVuZChyYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCk7XG4gICAgcmV0dXJuIHByZWZpeC50b1N0cmluZygpLmxlbmd0aDtcbiAgfTtcblxuICBzdGF0aWMgc2V0Q2FyZXQgPSAocG9zOiBhbnksIHBhcmVudDogYW55KSA9PiB7XG4gICAgZm9yIChjb25zdCBub2RlIG9mIHBhcmVudC5jaGlsZE5vZGVzKSB7XG4gICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSBOb2RlLlRFWFRfTk9ERSkge1xuICAgICAgICBpZiAobm9kZS5sZW5ndGggPj0gcG9zKSB7XG4gICAgICAgICAgY29uc3QgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgICAgICAgIGNvbnN0IHNlbCA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKSE7XG4gICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQobm9kZSwgcG9zKTtcbiAgICAgICAgICByYW5nZS5jb2xsYXBzZSh0cnVlKTtcbiAgICAgICAgICBzZWwucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICAgICAgc2VsLmFkZFJhbmdlKHJhbmdlKTtcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcG9zID0gcG9zIC0gbm9kZS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBvcyA9IHRoaXMuc2V0Q2FyZXQocG9zLCBub2RlKTtcbiAgICAgICAgaWYgKHBvcyA8IDApIHtcbiAgICAgICAgICByZXR1cm4gcG9zO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwb3M7XG4gIH07XG5cbiAgc3RhdGljIGdldEN1cnNvclJlY3QoKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5nZXRTZWxlY3Rpb24oKT8uZ2V0UmFuZ2VBdCgwKT8uZ2V0Q2xpZW50UmVjdHMoKVswXTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgY3NzLCBodG1sLCBMaXRFbGVtZW50IH0gZnJvbSBcImxpdFwiO1xuaW1wb3J0IHsgY3VzdG9tRWxlbWVudCwgcHJvcGVydHkgfSBmcm9tIFwibGl0L2RlY29yYXRvcnMuanNcIjtcblxuQGN1c3RvbUVsZW1lbnQoXCJzdWdnZXN0aW9uLW1lbnVcIilcbmV4cG9ydCBjbGFzcyBTdWdnZXN0aW9uTWVudSBleHRlbmRzIExpdEVsZW1lbnQge1xuICBAcHJvcGVydHkoKVxuICByZWNvbW1lbmRhdGlvbnM6IHN0cmluZ1tdID0gW107XG5cbiAgQHByb3BlcnR5KClcbiAgb25DbGlja1JlY29tbWVuZGF0aW9uOiBGdW5jdGlvbiA9IChyZWNvbW1lbmRhdGlvbjogc3RyaW5nKSA9PiB7fTtcblxuICBzdGF0aWMgc3R5bGVzID0gY3NzYFxuICAgIHVsIHtcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWZlLXN1Z2dlc3Rpb24tY29sb3IsIHdoaXRlKTtcbiAgICAgIGNvbG9yOiB2YXIoLS1mZS1zdWdnZXN0aW9uLWNvbG9yLCAjYmFiNmMwKTtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWZlLXN1Z2dlc3Rpb24tYmFja2dyb3VuZC1jb2xvciwgIzM2MzUzNyk7XG4gICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgd2lkdGg6IGZpdC1jb250ZW50O1xuICAgICAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xuICAgICAgcGFkZGluZzogNHB4IDBweDtcbiAgICAgIG1hcmdpbjogMnB4O1xuICAgIH1cblxuICAgIGxpIHtcbiAgICAgIG1hcmdpbjogMHB4O1xuICAgICAgcGFkZGluZzogMnB4IDZweDtcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICB9XG5cbiAgICBsaTpmb2N1cy12aXNpYmxlIHtcbiAgICAgIC8qIG91dGxpbmU6IDFweCBzb2xpZCByZWQ7ICovXG4gICAgICBvdXRsaW5lOiAwcHg7XG4gICAgICBjb2xvcjogdmFyKC0tZmUtc3VnZ2VzdGlvbi1mb2N1cy1jb2xvciwgI2ZjZTU2Nik7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1mZS1zdWdnZXN0aW9uLWZvY3VzLWJhY2tncm91bmQtY29sb3IsICM2OTY3NmMpO1xuICAgIH1cbiAgYDtcblxuICBoYW5kbGVLZXlkb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50LCByZWNvbW1lbmRhdGlvbjogc3RyaW5nKSB7XG4gICAgaWYgKGV2ZW50LmNvZGUgPT0gXCJFbnRlclwiKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB0aGlzLm9uQ2xpY2tSZWNvbW1lbmRhdGlvbihyZWNvbW1lbmRhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBodG1sYFxuICAgICAgPHVsIGNsYXNzPVwid3lzaXd5Zy1zdWdnZXN0aW9uLW1lbnVcIj5cbiAgICAgICAgJHt0aGlzLnJlY29tbWVuZGF0aW9ucy5tYXAoKHJlY29tbWVuZGF0aW9uKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGh0bWxgPGxpXG4gICAgICAgICAgICB0YWJpbmRleD1cIjBcIlxuICAgICAgICAgICAgQGNsaWNrPSR7KGU6IGFueSkgPT4gdGhpcy5vbkNsaWNrUmVjb21tZW5kYXRpb24ocmVjb21tZW5kYXRpb24pfVxuICAgICAgICAgICAgQGtleWRvd249JHsoZTogYW55KSA9PiB0aGlzLmhhbmRsZUtleWRvd24oZSwgcmVjb21tZW5kYXRpb24pfVxuICAgICAgICAgID5cbiAgICAgICAgICAgICR7cmVjb21tZW5kYXRpb259XG4gICAgICAgICAgPC9saT5gO1xuICAgICAgICB9KX1cbiAgICAgIDwvdWw+XG4gICAgYDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgaHRtbCwgTGl0RWxlbWVudCwgUHJvcGVydHlWYWx1ZU1hcCB9IGZyb20gXCJsaXRcIjtcbmltcG9ydCB7IGN1c3RvbUVsZW1lbnQsIHByb3BlcnR5LCBzdGF0ZSB9IGZyb20gXCJsaXQvZGVjb3JhdG9ycy5qc1wiO1xuaW1wb3J0IHsgRm9ybXVsYUVkaXRvclN0eWxlcyB9IGZyb20gXCIuL3N0eWxlcy9mb3JtdWxhLWVkaXRvci1zdHlsZXMuanNcIjtcbmltcG9ydCB7IFRleHRCdXR0b25TdHlsZXMgfSBmcm9tIFwiLi4vLi4vc3R5bGVzL3NyYy9idXR0b24tc3R5bGVzLmpzXCI7XG5pbXBvcnQgeyBQYXJzZXIgfSBmcm9tIFwiLi9wYXJzZXIuanNcIjtcbmltcG9ydCB7IEN1cnNvciB9IGZyb20gXCIuL2N1cnNvci5qc1wiO1xuaW1wb3J0IFwiLi9zdWdnZXN0aW9uLW1lbnUuanNcIjtcblxuQGN1c3RvbUVsZW1lbnQoXCJmb3JtdWxhLWVkaXRvclwiKVxuZXhwb3J0IGNsYXNzIEZvcm11bGFFZGl0b3IgZXh0ZW5kcyBMaXRFbGVtZW50IHtcbiAgcHJpdmF0ZSBfcGFyc2VyOiBQYXJzZXI7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuX3BhcnNlciA9IG5ldyBQYXJzZXIodGhpcy52YXJpYWJsZXMsIHRoaXMubWluU3VnZ2VzdGlvbkxlbik7XG4gIH1cblxuICBwcm90ZWN0ZWQgZmlyc3RVcGRhdGVkKFxuICAgIF9jaGFuZ2VkUHJvcGVydGllczogUHJvcGVydHlWYWx1ZU1hcDxhbnk+IHwgTWFwPFByb3BlcnR5S2V5LCB1bmtub3duPlxuICApOiB2b2lkIHtcbiAgICB0aGlzLl9wYXJzZXIgPSBuZXcgUGFyc2VyKHRoaXMudmFyaWFibGVzLCB0aGlzLm1pblN1Z2dlc3Rpb25MZW4pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZXNlIGBzdGF0ZXNgIGFuZCBgcHJvcGVydGllc2AgY2FuJ3QgYmUgZGVmaW5lZCBhcyBgc3RhdGljIGdldCBwcm9wZXJ0aWVzYCxcbiAgICogYmVjYXVzZSBUUyBkb2Vzbid0IHN1cHBvcnQgdGhhdC5cbiAgICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vbGl0L2xpdC1lbGVtZW50L2lzc3Vlcy80MTRcbiAgICovXG5cbiAgQHN0YXRlKClcbiAgX2NvbnRlbnQ6IHN0cmluZyA9IFwiXCI7XG5cbiAgQHN0YXRlKClcbiAgX2Zvcm1hdHRlZENvbnRlbnQ6IEVsZW1lbnQgfCBudWxsID0gbnVsbDtcblxuICBAc3RhdGUoKVxuICBfcmVjb21tZW5kYXRpb25zOiBzdHJpbmdbXSB8IG51bGwgPSBudWxsO1xuXG4gIEBzdGF0ZSgpXG4gIF9lcnJvclN0cjogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG5cbiAgQHN0YXRlKClcbiAgX2NhbGN1bGF0ZWRSZXN1bHQ6IG51bWJlciB8IG51bGwgPSBudWxsO1xuXG4gIC8qKlxuICAgKiBJZiBgcGFyc2VJbnB1dGAgaXMgY2FsbGVkIHRvIGFkZCBhIHJlY29tbWVuZGF0aW9uLCBzYXkgYnkgY2xpY2tpbmcsXG4gICAqIGJyb3dzZXIgcmVtb3ZlcyBmb2N1cyBmcm9tIHRoZSBpbnB1dCBib3guIEluIHRoYXQgY2FzZSwgd2UgaGF2ZSBubyB3YXlcbiAgICogb2Yga25vd2luZyB3aGVyZSB0aGUgY3Vyc29yIHByZXZpb3VzbHkgd2FzLCBvdGhlciB0aGFuIHN0b3JpbmcgaXQgc29tZXdoZXJlLlxuICAgKi9cblxuICBAc3RhdGUoKVxuICBjdXJyZW50Q3Vyc29yUG9zaXRpb246IG51bWJlciB8IG51bGwgPSBudWxsO1xuXG4gIEBzdGF0ZSgpXG4gIGN1cnJlbnRDdXJzb3JSZWN0OiBET01SZWN0IHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuXG4gIEBwcm9wZXJ0eSh7XG4gICAgdHlwZTogTWFwPHN0cmluZywgbnVtYmVyPixcbiAgICBjb252ZXJ0ZXI6IHtcbiAgICAgIGZyb21BdHRyaWJ1dGU6ICh2YWx1ZSkgPT4ge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IE1hcDxzdHJpbmcsIG51bWJlcj4oSlNPTi5wYXJzZSh2YWx1ZSkpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdG9BdHRyaWJ1dGU6ICh2YWx1ZTogTWFwPHN0cmluZywgbnVtYmVyPikgPT4ge1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoQXJyYXkuZnJvbSh2YWx1ZS5lbnRyaWVzKCkpKTtcbiAgICAgIH0sXG4gICAgfSxcbiAgfSlcbiAgdmFyaWFibGVzID0gbmV3IE1hcCgpO1xuXG4gIEBwcm9wZXJ0eSgpXG4gIG1pblN1Z2dlc3Rpb25MZW46IG51bWJlciA9IDI7XG5cbiAgaGFuZGxlQ2hhbmdlKGV2ZW50OiBJbnB1dEV2ZW50KSB7XG4gICAgY29uc29sZS5sb2coZXZlbnQpO1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgLy8gY29uc29sZS5sb2codGhpcy52YXJpYWJsZXMpO1xuICAgIHRoaXMuX2NvbnRlbnQgPSAoZXZlbnQudGFyZ2V0IGFzIEhUTUxEaXZFbGVtZW50KS5pbm5lclRleHQ7XG4gICAgdGhpcy5wYXJzZUlucHV0KCk7XG4gICAgKGV2ZW50LnRhcmdldCBhcyBIVE1MRGl2RWxlbWVudCkuZm9jdXMoKTtcbiAgfVxuXG4gIG9uQ2xpY2tSZWNvbW1lbmRhdGlvbihyZWNvbW1lbmRhdGlvbjogc3RyaW5nKSB7XG4gICAgbGV0IGVkaXRvciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwid3lzaXd5Zy1lZGl0b3JcIik7XG4gICAgaWYgKCFlZGl0b3IpIHJldHVybjtcblxuICAgIHRoaXMucGFyc2VJbnB1dChyZWNvbW1lbmRhdGlvbik7XG4gICAgdGhpcy5jdXJyZW50Q3Vyc29yUG9zaXRpb24gPSBudWxsO1xuICB9XG5cbiAgcGFyc2VJbnB1dChhZGRSZWNvbW1lbmRhdGlvbjogc3RyaW5nIHwgbnVsbCA9IG51bGwpIHtcbiAgICBsZXQgZWRpdG9yID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ3eXNpd3lnLWVkaXRvclwiKTtcbiAgICBpZiAoIWVkaXRvcikgcmV0dXJuO1xuXG4gICAgdGhpcy5jdXJyZW50Q3Vyc29yUG9zaXRpb24gPSBhZGRSZWNvbW1lbmRhdGlvblxuICAgICAgPyB0aGlzLmN1cnJlbnRDdXJzb3JQb3NpdGlvblxuICAgICAgOiAvLyA6IEN1cnNvci5nZXRDdXJyZW50Q3Vyc29yUG9zaXRpb24oZWRpdG9yKTtcbiAgICAgICAgQ3Vyc29yLmdldENhcmV0KGVkaXRvcik7XG5cbiAgICBjb25zdCBwYXJzZU91dHB1dCA9IHRoaXMuX3BhcnNlci5wYXJzZUlucHV0KFxuICAgICAgdGhpcy5fY29udGVudCxcbiAgICAgIHRoaXMuY3VycmVudEN1cnNvclBvc2l0aW9uLFxuICAgICAgYWRkUmVjb21tZW5kYXRpb25cbiAgICApO1xuXG4gICAgdGhpcy5fcmVjb21tZW5kYXRpb25zID0gcGFyc2VPdXRwdXQucmVjb21tZW5kYXRpb25zO1xuICAgIHRoaXMuX2Zvcm1hdHRlZENvbnRlbnQgPSBwYXJzZU91dHB1dC5mb3JtYXR0ZWRDb250ZW50O1xuICAgIHRoaXMuX2Vycm9yU3RyID0gcGFyc2VPdXRwdXQuZXJyb3JTdHI7XG4gICAgZWRpdG9yLmlubmVySFRNTCA9IHBhcnNlT3V0cHV0LmZvcm1hdHRlZFN0cmluZyE7XG4gICAgdGhpcy5fY29udGVudCA9IChlZGl0b3IgYXMgSFRNTERpdkVsZW1lbnQpLmlubmVyVGV4dDtcblxuICAgIGlmIChhZGRSZWNvbW1lbmRhdGlvbikge1xuICAgICAgdGhpcy5fcmVjb21tZW5kYXRpb25zID0gbnVsbDtcbiAgICAgIHRoaXMuY3VycmVudEN1cnNvclBvc2l0aW9uID0gcGFyc2VPdXRwdXQubmV3Q3Vyc29yUG9zaXRpb247XG4gICAgfVxuXG4gICAgLy8gQ3Vyc29yLnNldEN1cnJlbnRDdXJzb3JQb3NpdGlvbih0aGlzLmN1cnJlbnRDdXJzb3JQb3NpdGlvbiEsIGVkaXRvcik7XG4gICAgQ3Vyc29yLnNldENhcmV0KHRoaXMuY3VycmVudEN1cnNvclBvc2l0aW9uISwgZWRpdG9yKTtcbiAgICBlZGl0b3I/LmZvY3VzKCk7XG5cbiAgICB0aGlzLmN1cnJlbnRDdXJzb3JSZWN0ID0gQ3Vyc29yLmdldEN1cnNvclJlY3QoKTtcblxuICAgIHRoaXMucmVxdWVzdFVwZGF0ZSgpO1xuICB9XG5cbiAgcmVxdWVzdENhbGN1bGF0ZSgpIHtcbiAgICBpZiAodGhpcy5fcGFyc2VyLnBhcnNlSW5wdXQodGhpcy5fY29udGVudCkuZXJyb3JTdHIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBjYWxjdWxhdGVkUmVzdWx0ID0gdGhpcy5fcGFyc2VyLmNhbGN1bGF0ZSh0aGlzLl9jb250ZW50KTtcblxuICAgIHRoaXMuX2NvbnRlbnQgPSB0aGlzLl9wYXJzZXIuYWRkUGFyZW5zKHRoaXMuX2NvbnRlbnQpID8/IHRoaXMuX2NvbnRlbnQ7XG4gICAgdGhpcy5wYXJzZUlucHV0KCk7XG5cbiAgICB0aGlzLl9jYWxjdWxhdGVkUmVzdWx0ID0gY2FsY3VsYXRlZFJlc3VsdCA/PyBOYU47XG4gICAgdGhpcy5fZXJyb3JTdHIgPVxuICAgICAgY2FsY3VsYXRlZFJlc3VsdCA9PSB1bmRlZmluZWRcbiAgICAgICAgPyBcIkRpdmlzaW9uIGJ5IHplcm8gZW5jb3VudGVyZWRcIlxuICAgICAgICA6IHRoaXMuX2Vycm9yU3RyO1xuXG4gICAgdGhpcy5fcmVjb21tZW5kYXRpb25zID0gbnVsbDtcbiAgICB0aGlzLnJlcXVlc3RVcGRhdGUoKTtcbiAgfVxuXG4gIHJlcXVlc3RGb3JtYXQoKSB7XG4gICAgdGhpcy5fY29udGVudCA9IHRoaXMuX3BhcnNlci5hZGRQYXJlbnModGhpcy5fY29udGVudCkgPz8gdGhpcy5fY29udGVudDtcbiAgICB0aGlzLnBhcnNlSW5wdXQoKTtcbiAgICB0aGlzLl9yZWNvbW1lbmRhdGlvbnMgPSBudWxsO1xuICAgIHRoaXMucmVxdWVzdFVwZGF0ZSgpO1xuICB9XG5cbiAgLy8gRGlzYWJsZSBzaGFkb3ctcm9vdCBhcyBpdCBtZXNzZXMgdXAgY3Vyc29yIGRldGVjdGlvbi5cbiAgY3JlYXRlUmVuZGVyUm9vdCgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gaHRtbGBcbiAgICAgIDxzdHlsZT5cbiAgICAgICAgJHtGb3JtdWxhRWRpdG9yU3R5bGVzfVxuICAgICAgICAke1RleHRCdXR0b25TdHlsZXN9XG4gICAgICA8L3N0eWxlPlxuICAgICAgPGRpdlxuICAgICAgICBjb250ZW50ZWRpdGFibGVcbiAgICAgICAgaWQ9XCJ3eXNpd3lnLWVkaXRvclwiXG4gICAgICAgIHNwZWxsY2hlY2s9XCJmYWxzZVwiXG4gICAgICAgIEBpbnB1dD0ke3RoaXMuaGFuZGxlQ2hhbmdlfVxuICAgICAgPjwvZGl2PlxuICAgICAgJHt0aGlzLl9yZWNvbW1lbmRhdGlvbnNcbiAgICAgICAgPyBodG1sYDxkaXZcbiAgICAgICAgICAgIHN0eWxlPVwiXG4gICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsgXG4gICAgICAgICAgICAgIGxlZnQ6ICR7dGhpcy5jdXJyZW50Q3Vyc29yUmVjdD8ubGVmdCArIFwicHhcIn07IFxuICAgICAgICAgICAgICB0b3A6ICR7KHRoaXMuY3VycmVudEN1cnNvclJlY3Q/LnRvcCA/PyAwKSArXG4gICAgICAgICAgICB3aW5kb3cuc2Nyb2xsWSArXG4gICAgICAgICAgICBcInB4XCJ9O1xuICAgICAgICAgICAgXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8c3VnZ2VzdGlvbi1tZW51XG4gICAgICAgICAgICAgIC5yZWNvbW1lbmRhdGlvbnM9JHt0aGlzLl9yZWNvbW1lbmRhdGlvbnN9XG4gICAgICAgICAgICAgIC5vbkNsaWNrUmVjb21tZW5kYXRpb249JHsoZTogYW55KSA9PlxuICAgICAgICAgICAgICAgIHRoaXMub25DbGlja1JlY29tbWVuZGF0aW9uKGUpfVxuICAgICAgICAgICAgPjwvc3VnZ2VzdGlvbi1tZW51PlxuICAgICAgICAgIDwvZGl2PmBcbiAgICAgICAgOiBodG1sYGB9XG4gICAgICA8ZGl2IGlkPVwid3lzaXd5Zy1lcnJcIiBjbGFzcz1cIiR7dGhpcy5fZXJyb3JTdHIgPz8gXCJ3eXNpd3lnLW5vLWVyclwifVwiPlxuICAgICAgICAke3RoaXMuX2Vycm9yU3RyID8/IFwiTm8gRXJyb3JzXCJ9XG4gICAgICA8L2Rpdj5cbiAgICAgIDxidXR0b24gY2xhc3M9XCJwcmltYXJ5LXRleHQtYnV0dG9uXCIgQGNsaWNrPSR7dGhpcy5yZXF1ZXN0Q2FsY3VsYXRlfT5cbiAgICAgICAgQ2FsY3VsYXRlXG4gICAgICA8L2J1dHRvbj5cbiAgICAgIDxidXR0b24gY2xhc3M9XCJwcmltYXJ5LXRleHQtYnV0dG9uXCIgQGNsaWNrPSR7dGhpcy5yZXF1ZXN0Rm9ybWF0fT5cbiAgICAgICAgRm9ybWF0XG4gICAgICA8L2J1dHRvbj5cbiAgICAgIDxwPiR7dGhpcy5fY2FsY3VsYXRlZFJlc3VsdH08L3A+XG4gICAgYDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTGl0RWxlbWVudCwgaHRtbCB9IGZyb20gXCJsaXRcIjtcbmltcG9ydCB7IGN1c3RvbUVsZW1lbnQgfSBmcm9tIFwibGl0LWVsZW1lbnRcIjtcbmltcG9ydCB7IEZvcm11bGFFZGl0b3IgfSBmcm9tIFwiLi4vLi4vcGFja2FnZXMvZm9ybXVsYS1lZGl0b3Ivc3JjL2Zvcm11bGEtZWRpdG9yXCI7XG5cbkBjdXN0b21FbGVtZW50KFwic2hvd2Nhc2UtZ2FsbGVyeVwiKVxuY2xhc3MgU2hvd2Nhc2VHYWxsZXJ5IGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gIGZtID0gbmV3IEZvcm11bGFFZGl0b3IoKTtcblxuICByZW5kZXIoKSB7XG4gICAgaHRtbGAgPGZvcm11bGEtZWRpdG9yPjwvZm9ybXVsYS1lZGl0b3I+IGA7XG4gIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuY29uc3QgZT1lPT5uPT5cImZ1bmN0aW9uXCI9PXR5cGVvZiBuPygoZSxuKT0+KGN1c3RvbUVsZW1lbnRzLmRlZmluZShlLG4pLG4pKShlLG4pOigoZSxuKT0+e2NvbnN0e2tpbmQ6dCxlbGVtZW50czpzfT1uO3JldHVybntraW5kOnQsZWxlbWVudHM6cyxmaW5pc2hlcihuKXtjdXN0b21FbGVtZW50cy5kZWZpbmUoZSxuKX19fSkoZSxuKTtleHBvcnR7ZSBhcyBjdXN0b21FbGVtZW50fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWN1c3RvbS1lbGVtZW50LmpzLm1hcFxuIl0sIm5hbWVzIjpbIndpbmRvdyIsIlNoYWRvd1Jvb3QiLCJTaGFkeUNTUyIsIm5hdGl2ZVNoYWRvdyIsIkRvY3VtZW50IiwicHJvdG90eXBlIiwiQ1NTU3R5bGVTaGVldCIsInMiLCJTeW1ib2wiLCJuIiwiV2Vha01hcCIsImNvbnN0cnVjdG9yIiwidCIsImUiLCJ0aGlzIiwiXyRjc3NSZXN1bHQkIiwiRXJyb3IiLCJjc3NUZXh0Iiwic3R5bGVTaGVldCIsIm8iLCJsZW5ndGgiLCJnZXQiLCJyZXBsYWNlU3luYyIsInNldCIsInRvU3RyaW5nIiwiYyIsImNzc1J1bGVzIiwiciIsInRydXN0ZWRUeXBlcyIsImgiLCJlbXB0eVNjcmlwdCIsInJlYWN0aXZlRWxlbWVudFBvbHlmaWxsU3VwcG9ydCIsInRvQXR0cmlidXRlIiwiaSIsIkJvb2xlYW4iLCJPYmplY3QiLCJBcnJheSIsIkpTT04iLCJzdHJpbmdpZnkiLCJmcm9tQXR0cmlidXRlIiwiTnVtYmVyIiwicGFyc2UiLCJhIiwibCIsImF0dHJpYnV0ZSIsInR5cGUiLCJTdHJpbmciLCJjb252ZXJ0ZXIiLCJyZWZsZWN0IiwiaGFzQ2hhbmdlZCIsImQiLCJ1IiwiSFRNTEVsZW1lbnQiLCJzdXBlciIsIl8kRWkiLCJNYXAiLCJpc1VwZGF0ZVBlbmRpbmciLCJoYXNVcGRhdGVkIiwiXyRFbCIsInN0YXRpYyIsImZpbmFsaXplIiwicHVzaCIsIm9ic2VydmVkQXR0cmlidXRlcyIsImVsZW1lbnRQcm9wZXJ0aWVzIiwiZm9yRWFjaCIsIl8kRXAiLCJfJEV2Iiwic3RhdGUiLCJub0FjY2Vzc29yIiwiaGFzT3duUHJvcGVydHkiLCJnZXRQcm9wZXJ0eURlc2NyaXB0b3IiLCJkZWZpbmVQcm9wZXJ0eSIsInJlcXVlc3RVcGRhdGUiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0UHJvdG90eXBlT2YiLCJwcm9wZXJ0aWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImNyZWF0ZVByb3BlcnR5IiwiZWxlbWVudFN0eWxlcyIsImZpbmFsaXplU3R5bGVzIiwic3R5bGVzIiwiaXNBcnJheSIsIlNldCIsImZsYXQiLCJyZXZlcnNlIiwidW5zaGlmdCIsInRvTG93ZXJDYXNlIiwiXyRFXyIsIlByb21pc2UiLCJlbmFibGVVcGRhdGluZyIsIl8kQUwiLCJfJEVnIiwiYWRkQ29udHJvbGxlciIsIl8kRVMiLCJyZW5kZXJSb290IiwiaXNDb25uZWN0ZWQiLCJob3N0Q29ubmVjdGVkIiwiY2FsbCIsInJlbW92ZUNvbnRyb2xsZXIiLCJzcGxpY2UiLCJpbmRleE9mIiwiY3JlYXRlUmVuZGVyUm9vdCIsInNoYWRvd1Jvb3QiLCJhdHRhY2hTaGFkb3ciLCJzaGFkb3dSb290T3B0aW9ucyIsImFkb3B0ZWRTdHlsZVNoZWV0cyIsIm1hcCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImxpdE5vbmNlIiwic2V0QXR0cmlidXRlIiwidGV4dENvbnRlbnQiLCJhcHBlbmRDaGlsZCIsImNvbm5lY3RlZENhbGxiYWNrIiwiZGlzY29ubmVjdGVkQ2FsbGJhY2siLCJob3N0RGlzY29ubmVjdGVkIiwiYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrIiwiXyRBSyIsIl8kRU8iLCJyZW1vdmVBdHRyaWJ1dGUiLCJnZXRQcm9wZXJ0eU9wdGlvbnMiLCJoYXMiLCJfJEVDIiwiXyRFaiIsImFzeW5jIiwicmVqZWN0Iiwic2NoZWR1bGVVcGRhdGUiLCJwZXJmb3JtVXBkYXRlIiwic2hvdWxkVXBkYXRlIiwid2lsbFVwZGF0ZSIsImhvc3RVcGRhdGUiLCJ1cGRhdGUiLCJfJEVrIiwiXyRBRSIsImhvc3RVcGRhdGVkIiwiZmlyc3RVcGRhdGVkIiwidXBkYXRlZCIsInVwZGF0ZUNvbXBsZXRlIiwiZ2V0VXBkYXRlQ29tcGxldGUiLCJtb2RlIiwiUmVhY3RpdmVFbGVtZW50IiwicmVhY3RpdmVFbGVtZW50VmVyc2lvbnMiLCJjcmVhdGVQb2xpY3kiLCJjcmVhdGVIVE1MIiwiTWF0aCIsInJhbmRvbSIsInNsaWNlIiwiY3JlYXRlQ29tbWVudCIsImYiLCJfIiwibSIsInAiLCJSZWdFeHAiLCJnIiwiJCIsInkiLCJ3IiwiXyRsaXRUeXBlJCIsInN0cmluZ3MiLCJ2YWx1ZXMiLCJ4IiwiVCIsImZvciIsIkEiLCJFIiwiQyIsImNyZWF0ZVRyZWVXYWxrZXIiLCJQIiwidiIsImxhc3RJbmRleCIsImV4ZWMiLCJ0ZXN0Iiwic3RhcnRzV2l0aCIsIlYiLCJwYXJ0cyIsImVsIiwiY3VycmVudE5vZGUiLCJjb250ZW50IiwiZmlyc3RDaGlsZCIsInJlbW92ZSIsImFwcGVuZCIsImNoaWxkTm9kZXMiLCJuZXh0Tm9kZSIsIm5vZGVUeXBlIiwiaGFzQXR0cmlidXRlcyIsImdldEF0dHJpYnV0ZU5hbWVzIiwiZW5kc1dpdGgiLCJnZXRBdHRyaWJ1dGUiLCJzcGxpdCIsImluZGV4IiwibmFtZSIsImN0b3IiLCJrIiwiSSIsIkwiLCJSIiwidGFnTmFtZSIsImRhdGEiLCJpbm5lckhUTUwiLCJOIiwiXyRDbyIsIl8kQ2wiLCJfJGxpdERpcmVjdGl2ZSQiLCJfJEFPIiwiXyRBVCIsIl8kQVMiLCJfJEFWIiwiXyRBTiIsIl8kQUQiLCJfJEFNIiwicGFyZW50Tm9kZSIsIl8kQVUiLCJjcmVhdGlvblNjb3BlIiwiaW1wb3J0Tm9kZSIsIk0iLCJuZXh0U2libGluZyIsInoiLCJfJEFJIiwiXyRBSCIsIl8kQUEiLCJfJEFCIiwib3B0aW9ucyIsIl8kQ3AiLCJzdGFydE5vZGUiLCJlbmROb2RlIiwiXyRBUiIsIml0ZXJhdG9yIiwiaW5zZXJ0QmVmb3JlIiwiY3JlYXRlVGV4dE5vZGUiLCJfJEFDIiwiXyRBUCIsInNldENvbm5lY3RlZCIsImVsZW1lbnQiLCJmaWxsIiwiaiIsImFyZ3VtZW50cyIsIkgiLCJjYXB0dXJlIiwib25jZSIsInBhc3NpdmUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhbmRsZUV2ZW50IiwiaG9zdCIsImxpdEh0bWxQb2x5ZmlsbFN1cHBvcnQiLCJsaXRIdG1sVmVyc2lvbnMiLCJyZW5kZXJPcHRpb25zIiwiXyREbyIsInJlbmRlckJlZm9yZSIsInJlbmRlciIsIl8kbGl0UGFydCQiLCJmaW5hbGl6ZWQiLCJfJGxpdEVsZW1lbnQkIiwiZ2xvYmFsVGhpcyIsImxpdEVsZW1lbnRIeWRyYXRlU3VwcG9ydCIsIkxpdEVsZW1lbnQiLCJsaXRFbGVtZW50UG9seWZpbGxTdXBwb3J0IiwibGl0RWxlbWVudFZlcnNpb25zIiwiSFRNTFNsb3RFbGVtZW50IiwiYXNzaWduZWRFbGVtZW50cyIsImNvbnNvbGUiLCJ3YXJuIiwicmVkdWNlIiwiY3VzdG9tRWxlbWVudHMiLCJkZWZpbmUiLCJraW5kIiwiZWxlbWVudHMiLCJmaW5pc2hlciIsImRlc2NyaXB0b3IiLCJrZXkiLCJwbGFjZW1lbnQiLCJvcmlnaW5hbEtleSIsImluaXRpYWxpemVyIiwiRm9ybXVsYUVkaXRvclN0eWxlcyIsIlRleHRCdXR0b25TdHlsZXMiLCJNQVhfRFAiLCJOQU1FIiwiSU5WQUxJRCIsIklOVkFMSURfRFAiLCJJTlZBTElEX1JNIiwiRElWX0JZX1pFUk8iLCJVTkRFRklORUQiLCJOVU1FUklDIiwicm91bmQiLCJzZCIsInJtIiwibW9yZSIsInhjIiwiUk0iLCJwb3AiLCJkb0V4cG9uZW50aWFsIiwiaXNOb256ZXJvIiwiam9pbiIsImNoYXJBdCIsImFicyIsImNtcCIsImlzbmVnIiwieWMiLCJkaXYiLCJCaWciLCJiIiwiZHAiLCJEUCIsImJsIiwiYnQiLCJyaSIsImJ6IiwiYWkiLCJhbCIsInJsIiwicSIsInFjIiwicWkiLCJzaGlmdCIsImVxIiwiZ3QiLCJndGUiLCJsdCIsImx0ZSIsIm1pbnVzIiwic3ViIiwieGx0eSIsInBsdXMiLCJ4ZSIsInllIiwibW9kIiwieWd0eCIsInRpbWVzIiwibmVnIiwiYWRkIiwicG93Iiwib25lIiwicHJlYyIsInNxcnQiLCJoYWxmIiwidG9FeHBvbmVudGlhbCIsIm11bCIsInRvRml4ZWQiLCJ0b0pTT04iLCJORSIsIlBFIiwidG9OdW1iZXIiLCJzdHJpY3QiLCJ0b1ByZWNpc2lvbiIsInZhbHVlT2YiLCJfQmlnXyIsIlR5cGVFcnJvciIsIm5sIiwicmVwbGFjZSIsInNlYXJjaCIsInN1YnN0cmluZyIsInJvdW5kRG93biIsInJvdW5kSGFsZlVwIiwicm91bmRIYWxmRXZlbiIsInJvdW5kVXAiLCJTdGFjayIsIl9pbm5lciIsIml0ZW0iLCJ0b3AiLCJhdCIsImVtcHR5IiwicHJpbnQiLCJsb2ciLCJRdWV1ZSIsIl9oZWFkIiwiX3RhaWwiLCJlbnF1ZXVlIiwiZGVxdWV1ZSIsInBlZWsiLCJFeHBlY3RhdGlvbiIsIlJlY29tbWVuZGVyIiwidmFyaWFibGVzIiwibWluU3VnZ2VzdGlvbkxlbiIsIl9taW5TdWdnZXN0aW9uTGVuIiwiX3RyaWUiLCJUcmllTm9kZSIsImluc2VydEFsbCIsInZhcmlhYmxlIiwiaW5zZXJ0Iiwid29yZCIsInBvc2l0aW9uIiwibm9kZSIsInVuZGVmaW5lZCIsImdldENoaWxkIiwiYWRkQ2hpbGQiLCJnZXRSZWNvbW1lbmRhdGlvbiIsInJlY29tbWVuZGF0aW9ucyIsImN1cnJlbnRQb3NpdGlvbiIsIl90cmF2ZXJzZUFuZEdldCIsImN1cnJlbnRTdHIiLCJjaGlsZCIsImNoaWxkcmVuIiwiX2NoaWxkcmVuIiwiY2hhciIsImZyb21DaGFyQ29kZSIsIlBhcnNlciIsIm1hdGhlbWF0aWNhbE9wZXJhdG9ycyIsIm9wZXJhdG9yUHJlY2VkZW5jZSIsIl9yZWNvbW1lbmRlciIsInBhcnNlSW5wdXQiLCJmb3JtdWxhIiwicHJldkN1clBvcyIsInJlY29tbWVuZGF0aW9uIiwidG9rZW5zIiwicGFyZW50aGVzZXMiLCJmb3JtYXR0ZWRTdHJpbmciLCJleHBlY3RhdGlvbiIsIlZBUklBQkxFIiwiYnJhY2tldENvdW50IiwicHJldlRva2VuIiwicGFyc2VPdXRwdXQiLCJmb3JtYXR0ZWRDb250ZW50IiwibmV3Q3Vyc29yUG9zaXRpb24iLCJlcnJvclN0ciIsInRva2VuIiwiaXNOdW1iZXIiLCJpc05hTiIsImlzT3BlcmF0b3IiLCJpc1NwYWNlIiwidHJpbSIsImlzQnJhY2tldCIsIm1pbiIsInRva2VuQ2xhc3NOYW1lIiwiVU5ERUYiLCJPUEVSQVRPUiIsImRvYyIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInF1ZXJ5U2VsZWN0b3IiLCJidWlsZFJQTiIsImZpbHRlciIsIm9wZXJhdG9yU3RhY2siLCJvdXRwdXRRdWV1ZSIsImFkZFBhcmVucyIsInJwbiIsInN0cmluZ1JQTiIsImxleGVkUlBOIiwicmVzdWx0U3RhY2siLCJzeW1ib2wiLCJzdHJhIiwic3RyYiIsInBhcnNlRmxvYXQiLCJpc0Zpbml0ZSIsImtleXMiLCJpbmNsdWRlcyIsIm9wYSIsIm9wYiIsImNhbGN1bGF0ZSIsImNhbGNTdGFjayIsImZyb250SXRlbSIsIm9wZXJhdG9yIiwibnVtQiIsIm51bUEiLCJlcnIiLCJDdXJzb3IiLCJwYXJlbnRFbGVtZW50Iiwic2VsZWN0aW9uIiwiZ2V0U2VsZWN0aW9uIiwiY2hhckNvdW50IiwiZm9jdXNOb2RlIiwiX2lzQ2hpbGRPZiIsImZvY3VzT2Zmc2V0IiwicHJldmlvdXNTaWJsaW5nIiwiY2hhcnMiLCJyYW5nZSIsIl9jcmVhdGVSYW5nZSIsImNvdW50IiwiY29sbGFwc2UiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsImNyZWF0ZVJhbmdlIiwic2VsZWN0Tm9kZSIsInNldFN0YXJ0Iiwic2V0RW5kIiwiTm9kZSIsIlRFWFRfTk9ERSIsImxwIiwiZ2V0UmFuZ2VBdCIsImdldENsaWVudFJlY3RzIiwiZ2V0Q2FyZXQiLCJwcmVmaXgiLCJjbG9uZVJhbmdlIiwic2VsZWN0Tm9kZUNvbnRlbnRzIiwiZW5kQ29udGFpbmVyIiwiZW5kT2Zmc2V0Iiwic2V0Q2FyZXQiLCJwb3MiLCJwYXJlbnQiLCJzZWwiLCJTdWdnZXN0aW9uTWVudSIsIm9uQ2xpY2tSZWNvbW1lbmRhdGlvbiIsImhhbmRsZUtleWRvd24iLCJldmVudCIsImNvZGUiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsIkZvcm11bGFFZGl0b3IiLCJfY29udGVudCIsIl9mb3JtYXR0ZWRDb250ZW50IiwiX3JlY29tbWVuZGF0aW9ucyIsIl9lcnJvclN0ciIsIl9jYWxjdWxhdGVkUmVzdWx0IiwiY3VycmVudEN1cnNvclBvc2l0aW9uIiwiY3VycmVudEN1cnNvclJlY3QiLCJfcGFyc2VyIiwiX2NoYW5nZWRQcm9wZXJ0aWVzIiwiaGFuZGxlQ2hhbmdlIiwidGFyZ2V0IiwiaW5uZXJUZXh0IiwiZm9jdXMiLCJnZXRFbGVtZW50QnlJZCIsImFkZFJlY29tbWVuZGF0aW9uIiwiZWRpdG9yIiwiZ2V0Q3Vyc29yUmVjdCIsInJlcXVlc3RDYWxjdWxhdGUiLCJjYWxjdWxhdGVkUmVzdWx0IiwiTmFOIiwicmVxdWVzdEZvcm1hdCIsImxlZnQiLCJzY3JvbGxZIiwidmFsdWUiLCJmcm9tIiwiZW50cmllcyIsIlNob3djYXNlR2FsbGVyeSIsImZtIl0sInNvdXJjZVJvb3QiOiIifQ==