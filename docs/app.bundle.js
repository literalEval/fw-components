/*! For license information please see app.bundle.js.LICENSE.txt */
(()=>{"use strict";const t=window,e=t.ShadowRoot&&(void 0===t.ShadyCSS||t.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,i=Symbol(),s=new WeakMap;class r{constructor(t,e,s){if(this._$cssResult$=!0,s!==i)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const i=this.t;if(e&&void 0===t){const e=void 0!==i&&1===i.length;e&&(t=s.get(i)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),e&&s.set(i,t))}return t}toString(){return this.cssText}}const n=e?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const i of t.cssRules)e+=i.cssText;return(t=>new r("string"==typeof t?t:t+"",void 0,i))(e)})(t):t;var o;const l=window,h=l.trustedTypes,a=h?h.emptyScript:"",c=l.reactiveElementPolyfillSupport,d={toAttribute(t,e){switch(e){case Boolean:t=t?a:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){let i=t;switch(e){case Boolean:i=null!==t;break;case Number:i=null===t?null:Number(t);break;case Object:case Array:try{i=JSON.parse(t)}catch(t){i=null}}return i}},u=(t,e)=>e!==t&&(e==e||t==t),p={attribute:!0,type:String,converter:d,reflect:!1,hasChanged:u},v="finalized";class f extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(t){var e;this.finalize(),(null!==(e=this.h)&&void 0!==e?e:this.h=[]).push(t)}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((e,i)=>{const s=this._$Ep(i,e);void 0!==s&&(this._$Ev.set(s,i),t.push(s))})),t}static createProperty(t,e=p){if(e.state&&(e.attribute=!1),this.finalize(),this.elementProperties.set(t,e),!e.noAccessor&&!this.prototype.hasOwnProperty(t)){const i="symbol"==typeof t?Symbol():"__"+t,s=this.getPropertyDescriptor(t,i,e);void 0!==s&&Object.defineProperty(this.prototype,t,s)}}static getPropertyDescriptor(t,e,i){return{get(){return this[e]},set(s){const r=this[t];this[e]=s,this.requestUpdate(t,r,i)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||p}static finalize(){if(this.hasOwnProperty(v))return!1;this[v]=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),void 0!==t.h&&(this.h=[...t.h]),this.elementProperties=new Map(t.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const t=this.properties,e=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const i of e)this.createProperty(i,t[i])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(t){const e=[];if(Array.isArray(t)){const i=new Set(t.flat(1/0).reverse());for(const t of i)e.unshift(n(t))}else void 0!==t&&e.push(n(t));return e}static _$Ep(t,e){const i=e.attribute;return!1===i?void 0:"string"==typeof i?i:"string"==typeof t?t.toLowerCase():void 0}u(){var t;this._$E_=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(t=this.constructor.h)||void 0===t||t.forEach((t=>t(this)))}addController(t){var e,i;(null!==(e=this._$ES)&&void 0!==e?e:this._$ES=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(i=t.hostConnected)||void 0===i||i.call(t))}removeController(t){var e;null===(e=this._$ES)||void 0===e||e.splice(this._$ES.indexOf(t)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((t,e)=>{this.hasOwnProperty(e)&&(this._$Ei.set(e,this[e]),delete this[e])}))}createRenderRoot(){var i;const s=null!==(i=this.shadowRoot)&&void 0!==i?i:this.attachShadow(this.constructor.shadowRootOptions);return((i,s)=>{e?i.adoptedStyleSheets=s.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):s.forEach((e=>{const s=document.createElement("style"),r=t.litNonce;void 0!==r&&s.setAttribute("nonce",r),s.textContent=e.cssText,i.appendChild(s)}))})(s,this.constructor.elementStyles),s}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostConnected)||void 0===e?void 0:e.call(t)}))}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostDisconnected)||void 0===e?void 0:e.call(t)}))}attributeChangedCallback(t,e,i){this._$AK(t,i)}_$EO(t,e,i=p){var s;const r=this.constructor._$Ep(t,i);if(void 0!==r&&!0===i.reflect){const n=(void 0!==(null===(s=i.converter)||void 0===s?void 0:s.toAttribute)?i.converter:d).toAttribute(e,i.type);this._$El=t,null==n?this.removeAttribute(r):this.setAttribute(r,n),this._$El=null}}_$AK(t,e){var i;const s=this.constructor,r=s._$Ev.get(t);if(void 0!==r&&this._$El!==r){const t=s.getPropertyOptions(r),n="function"==typeof t.converter?{fromAttribute:t.converter}:void 0!==(null===(i=t.converter)||void 0===i?void 0:i.fromAttribute)?t.converter:d;this._$El=r,this[r]=n.fromAttribute(e,t.type),this._$El=null}}requestUpdate(t,e,i){let s=!0;void 0!==t&&(((i=i||this.constructor.getPropertyOptions(t)).hasChanged||u)(this[t],e)?(this._$AL.has(t)||this._$AL.set(t,e),!0===i.reflect&&this._$El!==t&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(t,i))):s=!1),!this.isUpdatePending&&s&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((t,e)=>this[e]=t)),this._$Ei=void 0);let e=!1;const i=this._$AL;try{e=this.shouldUpdate(i),e?(this.willUpdate(i),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostUpdate)||void 0===e?void 0:e.call(t)})),this.update(i)):this._$Ek()}catch(t){throw e=!1,this._$Ek(),t}e&&this._$AE(i)}willUpdate(t){}_$AE(t){var e;null===(e=this._$ES)||void 0===e||e.forEach((t=>{var e;return null===(e=t.hostUpdated)||void 0===e?void 0:e.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(t){return!0}update(t){void 0!==this._$EC&&(this._$EC.forEach(((t,e)=>this._$EO(e,this[e],t))),this._$EC=void 0),this._$Ek()}updated(t){}firstUpdated(t){}}var _;f[v]=!0,f.elementProperties=new Map,f.elementStyles=[],f.shadowRootOptions={mode:"open"},null==c||c({ReactiveElement:f}),(null!==(o=l.reactiveElementVersions)&&void 0!==o?o:l.reactiveElementVersions=[]).push("1.6.2");const $=window,m=$.trustedTypes,g=m?m.createPolicy("lit-html",{createHTML:t=>t}):void 0,y="$lit$",A=`lit$${(Math.random()+"").slice(9)}$`,E="?"+A,b=`<${E}>`,w=document,S=()=>w.createComment(""),C=t=>null===t||"object"!=typeof t&&"function"!=typeof t,P=Array.isArray,x="[ \t\n\f\r]",R=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,U=/-->/g,O=/>/g,N=RegExp(`>|${x}(?:([^\\s"'>=/]+)(${x}*=${x}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),k=/'/g,T=/"/g,H=/^(?:script|style|textarea|title)$/i,M=t=>(e,...i)=>({_$litType$:t,strings:e,values:i}),D=M(1),j=(M(2),Symbol.for("lit-noChange")),L=Symbol.for("lit-nothing"),I=new WeakMap,z=w.createTreeWalker(w,129,null,!1),B=(t,e)=>{const i=t.length-1,s=[];let r,n=2===e?"<svg>":"",o=R;for(let e=0;e<i;e++){const i=t[e];let l,h,a=-1,c=0;for(;c<i.length&&(o.lastIndex=c,h=o.exec(i),null!==h);)c=o.lastIndex,o===R?"!--"===h[1]?o=U:void 0!==h[1]?o=O:void 0!==h[2]?(H.test(h[2])&&(r=RegExp("</"+h[2],"g")),o=N):void 0!==h[3]&&(o=N):o===N?">"===h[0]?(o=null!=r?r:R,a=-1):void 0===h[1]?a=-2:(a=o.lastIndex-h[2].length,l=h[1],o=void 0===h[3]?N:'"'===h[3]?T:k):o===T||o===k?o=N:o===U||o===O?o=R:(o=N,r=void 0);const d=o===N&&t[e+1].startsWith("/>")?" ":"";n+=o===R?i+b:a>=0?(s.push(l),i.slice(0,a)+y+i.slice(a)+A+d):i+A+(-2===a?(s.push(void 0),e):d)}const l=n+(t[i]||"<?>")+(2===e?"</svg>":"");if(!Array.isArray(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return[void 0!==g?g.createHTML(l):l,s]};class F{constructor({strings:t,_$litType$:e},i){let s;this.parts=[];let r=0,n=0;const o=t.length-1,l=this.parts,[h,a]=B(t,e);if(this.el=F.createElement(h,i),z.currentNode=this.el.content,2===e){const t=this.el.content,e=t.firstChild;e.remove(),t.append(...e.childNodes)}for(;null!==(s=z.nextNode())&&l.length<o;){if(1===s.nodeType){if(s.hasAttributes()){const t=[];for(const e of s.getAttributeNames())if(e.endsWith(y)||e.startsWith(A)){const i=a[n++];if(t.push(e),void 0!==i){const t=s.getAttribute(i.toLowerCase()+y).split(A),e=/([.?@])?(.*)/.exec(i);l.push({type:1,index:r,name:e[2],strings:t,ctor:"."===e[1]?K:"?"===e[1]?G:"@"===e[1]?X:J})}else l.push({type:6,index:r})}for(const e of t)s.removeAttribute(e)}if(H.test(s.tagName)){const t=s.textContent.split(A),e=t.length-1;if(e>0){s.textContent=m?m.emptyScript:"";for(let i=0;i<e;i++)s.append(t[i],S()),z.nextNode(),l.push({type:2,index:++r});s.append(t[e],S())}}}else if(8===s.nodeType)if(s.data===E)l.push({type:2,index:r});else{let t=-1;for(;-1!==(t=s.data.indexOf(A,t+1));)l.push({type:7,index:r}),t+=A.length-1}r++}}static createElement(t,e){const i=w.createElement("template");return i.innerHTML=t,i}}function q(t,e,i=t,s){var r,n,o,l;if(e===j)return e;let h=void 0!==s?null===(r=i._$Co)||void 0===r?void 0:r[s]:i._$Cl;const a=C(e)?void 0:e._$litDirective$;return(null==h?void 0:h.constructor)!==a&&(null===(n=null==h?void 0:h._$AO)||void 0===n||n.call(h,!1),void 0===a?h=void 0:(h=new a(t),h._$AT(t,i,s)),void 0!==s?(null!==(o=(l=i)._$Co)&&void 0!==o?o:l._$Co=[])[s]=h:i._$Cl=h),void 0!==h&&(e=q(t,h._$AS(t,e.values),h,s)),e}class V{constructor(t,e){this._$AV=[],this._$AN=void 0,this._$AD=t,this._$AM=e}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(t){var e;const{el:{content:i},parts:s}=this._$AD,r=(null!==(e=null==t?void 0:t.creationScope)&&void 0!==e?e:w).importNode(i,!0);z.currentNode=r;let n=z.nextNode(),o=0,l=0,h=s[0];for(;void 0!==h;){if(o===h.index){let e;2===h.type?e=new W(n,n.nextSibling,this,t):1===h.type?e=new h.ctor(n,h.name,h.strings,this,t):6===h.type&&(e=new Q(n,this,t)),this._$AV.push(e),h=s[++l]}o!==(null==h?void 0:h.index)&&(n=z.nextNode(),o++)}return z.currentNode=w,r}v(t){let e=0;for(const i of this._$AV)void 0!==i&&(void 0!==i.strings?(i._$AI(t,i,e),e+=i.strings.length-2):i._$AI(t[e])),e++}}class W{constructor(t,e,i,s){var r;this.type=2,this._$AH=L,this._$AN=void 0,this._$AA=t,this._$AB=e,this._$AM=i,this.options=s,this._$Cp=null===(r=null==s?void 0:s.isConnected)||void 0===r||r}get _$AU(){var t,e;return null!==(e=null===(t=this._$AM)||void 0===t?void 0:t._$AU)&&void 0!==e?e:this._$Cp}get parentNode(){let t=this._$AA.parentNode;const e=this._$AM;return void 0!==e&&11===(null==t?void 0:t.nodeType)&&(t=e.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,e=this){t=q(this,t,e),C(t)?t===L||null==t||""===t?(this._$AH!==L&&this._$AR(),this._$AH=L):t!==this._$AH&&t!==j&&this._(t):void 0!==t._$litType$?this.g(t):void 0!==t.nodeType?this.$(t):(t=>P(t)||"function"==typeof(null==t?void 0:t[Symbol.iterator]))(t)?this.T(t):this._(t)}k(t){return this._$AA.parentNode.insertBefore(t,this._$AB)}$(t){this._$AH!==t&&(this._$AR(),this._$AH=this.k(t))}_(t){this._$AH!==L&&C(this._$AH)?this._$AA.nextSibling.data=t:this.$(w.createTextNode(t)),this._$AH=t}g(t){var e;const{values:i,_$litType$:s}=t,r="number"==typeof s?this._$AC(t):(void 0===s.el&&(s.el=F.createElement(s.h,this.options)),s);if((null===(e=this._$AH)||void 0===e?void 0:e._$AD)===r)this._$AH.v(i);else{const t=new V(r,this),e=t.u(this.options);t.v(i),this.$(e),this._$AH=t}}_$AC(t){let e=I.get(t.strings);return void 0===e&&I.set(t.strings,e=new F(t)),e}T(t){P(this._$AH)||(this._$AH=[],this._$AR());const e=this._$AH;let i,s=0;for(const r of t)s===e.length?e.push(i=new W(this.k(S()),this.k(S()),this,this.options)):i=e[s],i._$AI(r),s++;s<e.length&&(this._$AR(i&&i._$AB.nextSibling,s),e.length=s)}_$AR(t=this._$AA.nextSibling,e){var i;for(null===(i=this._$AP)||void 0===i||i.call(this,!1,!0,e);t&&t!==this._$AB;){const e=t.nextSibling;t.remove(),t=e}}setConnected(t){var e;void 0===this._$AM&&(this._$Cp=t,null===(e=this._$AP)||void 0===e||e.call(this,t))}}class J{constructor(t,e,i,s,r){this.type=1,this._$AH=L,this._$AN=void 0,this.element=t,this.name=e,this._$AM=s,this.options=r,i.length>2||""!==i[0]||""!==i[1]?(this._$AH=Array(i.length-1).fill(new String),this.strings=i):this._$AH=L}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(t,e=this,i,s){const r=this.strings;let n=!1;if(void 0===r)t=q(this,t,e,0),n=!C(t)||t!==this._$AH&&t!==j,n&&(this._$AH=t);else{const s=t;let o,l;for(t=r[0],o=0;o<r.length-1;o++)l=q(this,s[i+o],e,o),l===j&&(l=this._$AH[o]),n||(n=!C(l)||l!==this._$AH[o]),l===L?t=L:t!==L&&(t+=(null!=l?l:"")+r[o+1]),this._$AH[o]=l}n&&!s&&this.j(t)}j(t){t===L?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=t?t:"")}}class K extends J{constructor(){super(...arguments),this.type=3}j(t){this.element[this.name]=t===L?void 0:t}}const Z=m?m.emptyScript:"";class G extends J{constructor(){super(...arguments),this.type=4}j(t){t&&t!==L?this.element.setAttribute(this.name,Z):this.element.removeAttribute(this.name)}}class X extends J{constructor(t,e,i,s,r){super(t,e,i,s,r),this.type=5}_$AI(t,e=this){var i;if((t=null!==(i=q(this,t,e,0))&&void 0!==i?i:L)===j)return;const s=this._$AH,r=t===L&&s!==L||t.capture!==s.capture||t.once!==s.once||t.passive!==s.passive,n=t!==L&&(s===L||r);r&&this.element.removeEventListener(this.name,this,s),n&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){var e,i;"function"==typeof this._$AH?this._$AH.call(null!==(i=null===(e=this.options)||void 0===e?void 0:e.host)&&void 0!==i?i:this.element,t):this._$AH.handleEvent(t)}}class Q{constructor(t,e,i){this.element=t,this.type=6,this._$AN=void 0,this._$AM=e,this.options=i}get _$AU(){return this._$AM._$AU}_$AI(t){q(this,t)}}const Y=$.litHtmlPolyfillSupport;var tt,et;null==Y||Y(F,W),(null!==(_=$.litHtmlVersions)&&void 0!==_?_:$.litHtmlVersions=[]).push("2.7.4");class it extends f{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var t,e;const i=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=i.firstChild),i}update(t){const e=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=((t,e,i)=>{var s,r;const n=null!==(s=null==i?void 0:i.renderBefore)&&void 0!==s?s:e;let o=n._$litPart$;if(void 0===o){const t=null!==(r=null==i?void 0:i.renderBefore)&&void 0!==r?r:null;n._$litPart$=o=new W(e.insertBefore(S(),t),t,void 0,null!=i?i:{})}return o._$AI(t),o})(e,this.renderRoot,this.renderOptions)}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!0)}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!1)}render(){return j}}it.finalized=!0,it._$litElement$=!0,null===(tt=globalThis.litElementHydrateSupport)||void 0===tt||tt.call(globalThis,{LitElement:it});const st=globalThis.litElementPolyfillSupport;var rt;null==st||st({LitElement:it}),(null!==(et=globalThis.litElementVersions)&&void 0!==et?et:globalThis.litElementVersions=[]).push("3.3.2"),null===(rt=window.HTMLSlotElement)||void 0===rt||rt.prototype.assignedElements,console.warn("The main 'lit-element' module entrypoint is deprecated. Please update your imports to use the 'lit' package: 'lit' and 'lit/decorators.ts' or import from 'lit-element/lit-element.ts'. See https://lit.dev/msg/deprecated-import-path for more information.");const nt=window,ot=nt.ShadowRoot&&(void 0===nt.ShadyCSS||nt.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,lt=Symbol(),ht=new WeakMap;class at{constructor(t,e,i){if(this._$cssResult$=!0,i!==lt)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const e=this.t;if(ot&&void 0===t){const i=void 0!==e&&1===e.length;i&&(t=ht.get(e)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),i&&ht.set(e,t))}return t}toString(){return this.cssText}}const ct=ot?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const i of t.cssRules)e+=i.cssText;return(t=>new at("string"==typeof t?t:t+"",void 0,lt))(e)})(t):t;var dt;const ut=window,pt=ut.trustedTypes,vt=pt?pt.emptyScript:"",ft=ut.reactiveElementPolyfillSupport,_t={toAttribute(t,e){switch(e){case Boolean:t=t?vt:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){let i=t;switch(e){case Boolean:i=null!==t;break;case Number:i=null===t?null:Number(t);break;case Object:case Array:try{i=JSON.parse(t)}catch(t){i=null}}return i}},$t=(t,e)=>e!==t&&(e==e||t==t),mt={attribute:!0,type:String,converter:_t,reflect:!1,hasChanged:$t};class gt extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(t){var e;this.finalize(),(null!==(e=this.h)&&void 0!==e?e:this.h=[]).push(t)}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((e,i)=>{const s=this._$Ep(i,e);void 0!==s&&(this._$Ev.set(s,i),t.push(s))})),t}static createProperty(t,e=mt){if(e.state&&(e.attribute=!1),this.finalize(),this.elementProperties.set(t,e),!e.noAccessor&&!this.prototype.hasOwnProperty(t)){const i="symbol"==typeof t?Symbol():"__"+t,s=this.getPropertyDescriptor(t,i,e);void 0!==s&&Object.defineProperty(this.prototype,t,s)}}static getPropertyDescriptor(t,e,i){return{get(){return this[e]},set(s){const r=this[t];this[e]=s,this.requestUpdate(t,r,i)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||mt}static finalize(){if(this.hasOwnProperty("finalized"))return!1;this.finalized=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),void 0!==t.h&&(this.h=[...t.h]),this.elementProperties=new Map(t.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const t=this.properties,e=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const i of e)this.createProperty(i,t[i])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(t){const e=[];if(Array.isArray(t)){const i=new Set(t.flat(1/0).reverse());for(const t of i)e.unshift(ct(t))}else void 0!==t&&e.push(ct(t));return e}static _$Ep(t,e){const i=e.attribute;return!1===i?void 0:"string"==typeof i?i:"string"==typeof t?t.toLowerCase():void 0}u(){var t;this._$E_=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(t=this.constructor.h)||void 0===t||t.forEach((t=>t(this)))}addController(t){var e,i;(null!==(e=this._$ES)&&void 0!==e?e:this._$ES=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(i=t.hostConnected)||void 0===i||i.call(t))}removeController(t){var e;null===(e=this._$ES)||void 0===e||e.splice(this._$ES.indexOf(t)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((t,e)=>{this.hasOwnProperty(e)&&(this._$Ei.set(e,this[e]),delete this[e])}))}createRenderRoot(){var t;const e=null!==(t=this.shadowRoot)&&void 0!==t?t:this.attachShadow(this.constructor.shadowRootOptions);return((t,e)=>{ot?t.adoptedStyleSheets=e.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):e.forEach((e=>{const i=document.createElement("style"),s=nt.litNonce;void 0!==s&&i.setAttribute("nonce",s),i.textContent=e.cssText,t.appendChild(i)}))})(e,this.constructor.elementStyles),e}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostConnected)||void 0===e?void 0:e.call(t)}))}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostDisconnected)||void 0===e?void 0:e.call(t)}))}attributeChangedCallback(t,e,i){this._$AK(t,i)}_$EO(t,e,i=mt){var s;const r=this.constructor._$Ep(t,i);if(void 0!==r&&!0===i.reflect){const n=(void 0!==(null===(s=i.converter)||void 0===s?void 0:s.toAttribute)?i.converter:_t).toAttribute(e,i.type);this._$El=t,null==n?this.removeAttribute(r):this.setAttribute(r,n),this._$El=null}}_$AK(t,e){var i;const s=this.constructor,r=s._$Ev.get(t);if(void 0!==r&&this._$El!==r){const t=s.getPropertyOptions(r),n="function"==typeof t.converter?{fromAttribute:t.converter}:void 0!==(null===(i=t.converter)||void 0===i?void 0:i.fromAttribute)?t.converter:_t;this._$El=r,this[r]=n.fromAttribute(e,t.type),this._$El=null}}requestUpdate(t,e,i){let s=!0;void 0!==t&&(((i=i||this.constructor.getPropertyOptions(t)).hasChanged||$t)(this[t],e)?(this._$AL.has(t)||this._$AL.set(t,e),!0===i.reflect&&this._$El!==t&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(t,i))):s=!1),!this.isUpdatePending&&s&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((t,e)=>this[e]=t)),this._$Ei=void 0);let e=!1;const i=this._$AL;try{e=this.shouldUpdate(i),e?(this.willUpdate(i),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostUpdate)||void 0===e?void 0:e.call(t)})),this.update(i)):this._$Ek()}catch(t){throw e=!1,this._$Ek(),t}e&&this._$AE(i)}willUpdate(t){}_$AE(t){var e;null===(e=this._$ES)||void 0===e||e.forEach((t=>{var e;return null===(e=t.hostUpdated)||void 0===e?void 0:e.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(t){return!0}update(t){void 0!==this._$EC&&(this._$EC.forEach(((t,e)=>this._$EO(e,this[e],t))),this._$EC=void 0),this._$Ek()}updated(t){}firstUpdated(t){}}var yt;gt.finalized=!0,gt.elementProperties=new Map,gt.elementStyles=[],gt.shadowRootOptions={mode:"open"},null==ft||ft({ReactiveElement:gt}),(null!==(dt=ut.reactiveElementVersions)&&void 0!==dt?dt:ut.reactiveElementVersions=[]).push("1.6.1");const At=window,Et=At.trustedTypes,bt=Et?Et.createPolicy("lit-html",{createHTML:t=>t}):void 0,wt="$lit$",St=`lit$${(Math.random()+"").slice(9)}$`,Ct="?"+St,Pt=`<${Ct}>`,xt=document,Rt=()=>xt.createComment(""),Ut=t=>null===t||"object"!=typeof t&&"function"!=typeof t,Ot=Array.isArray,Nt="[ \t\n\f\r]",kt=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,Tt=/-->/g,Ht=/>/g,Mt=RegExp(`>|${Nt}(?:([^\\s"'>=/]+)(${Nt}*=${Nt}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),Dt=/'/g,jt=/"/g,Lt=/^(?:script|style|textarea|title)$/i,It=t=>(e,...i)=>({_$litType$:t,strings:e,values:i}),zt=It(1),Bt=(It(2),Symbol.for("lit-noChange")),Ft=Symbol.for("lit-nothing"),qt=new WeakMap,Vt=xt.createTreeWalker(xt,129,null,!1);class Wt{constructor({strings:t,_$litType$:e},i){let s;this.parts=[];let r=0,n=0;const o=t.length-1,l=this.parts,[h,a]=((t,e)=>{const i=t.length-1,s=[];let r,n=2===e?"<svg>":"",o=kt;for(let e=0;e<i;e++){const i=t[e];let l,h,a=-1,c=0;for(;c<i.length&&(o.lastIndex=c,h=o.exec(i),null!==h);)c=o.lastIndex,o===kt?"!--"===h[1]?o=Tt:void 0!==h[1]?o=Ht:void 0!==h[2]?(Lt.test(h[2])&&(r=RegExp("</"+h[2],"g")),o=Mt):void 0!==h[3]&&(o=Mt):o===Mt?">"===h[0]?(o=null!=r?r:kt,a=-1):void 0===h[1]?a=-2:(a=o.lastIndex-h[2].length,l=h[1],o=void 0===h[3]?Mt:'"'===h[3]?jt:Dt):o===jt||o===Dt?o=Mt:o===Tt||o===Ht?o=kt:(o=Mt,r=void 0);const d=o===Mt&&t[e+1].startsWith("/>")?" ":"";n+=o===kt?i+Pt:a>=0?(s.push(l),i.slice(0,a)+wt+i.slice(a)+St+d):i+St+(-2===a?(s.push(void 0),e):d)}const l=n+(t[i]||"<?>")+(2===e?"</svg>":"");if(!Array.isArray(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return[void 0!==bt?bt.createHTML(l):l,s]})(t,e);if(this.el=Wt.createElement(h,i),Vt.currentNode=this.el.content,2===e){const t=this.el.content,e=t.firstChild;e.remove(),t.append(...e.childNodes)}for(;null!==(s=Vt.nextNode())&&l.length<o;){if(1===s.nodeType){if(s.hasAttributes()){const t=[];for(const e of s.getAttributeNames())if(e.endsWith(wt)||e.startsWith(St)){const i=a[n++];if(t.push(e),void 0!==i){const t=s.getAttribute(i.toLowerCase()+wt).split(St),e=/([.?@])?(.*)/.exec(i);l.push({type:1,index:r,name:e[2],strings:t,ctor:"."===e[1]?Xt:"?"===e[1]?Yt:"@"===e[1]?te:Gt})}else l.push({type:6,index:r})}for(const e of t)s.removeAttribute(e)}if(Lt.test(s.tagName)){const t=s.textContent.split(St),e=t.length-1;if(e>0){s.textContent=Et?Et.emptyScript:"";for(let i=0;i<e;i++)s.append(t[i],Rt()),Vt.nextNode(),l.push({type:2,index:++r});s.append(t[e],Rt())}}}else if(8===s.nodeType)if(s.data===Ct)l.push({type:2,index:r});else{let t=-1;for(;-1!==(t=s.data.indexOf(St,t+1));)l.push({type:7,index:r}),t+=St.length-1}r++}}static createElement(t,e){const i=xt.createElement("template");return i.innerHTML=t,i}}function Jt(t,e,i=t,s){var r,n,o,l;if(e===Bt)return e;let h=void 0!==s?null===(r=i._$Co)||void 0===r?void 0:r[s]:i._$Cl;const a=Ut(e)?void 0:e._$litDirective$;return(null==h?void 0:h.constructor)!==a&&(null===(n=null==h?void 0:h._$AO)||void 0===n||n.call(h,!1),void 0===a?h=void 0:(h=new a(t),h._$AT(t,i,s)),void 0!==s?(null!==(o=(l=i)._$Co)&&void 0!==o?o:l._$Co=[])[s]=h:i._$Cl=h),void 0!==h&&(e=Jt(t,h._$AS(t,e.values),h,s)),e}class Kt{constructor(t,e){this._$AV=[],this._$AN=void 0,this._$AD=t,this._$AM=e}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(t){var e;const{el:{content:i},parts:s}=this._$AD,r=(null!==(e=null==t?void 0:t.creationScope)&&void 0!==e?e:xt).importNode(i,!0);Vt.currentNode=r;let n=Vt.nextNode(),o=0,l=0,h=s[0];for(;void 0!==h;){if(o===h.index){let e;2===h.type?e=new Zt(n,n.nextSibling,this,t):1===h.type?e=new h.ctor(n,h.name,h.strings,this,t):6===h.type&&(e=new ee(n,this,t)),this._$AV.push(e),h=s[++l]}o!==(null==h?void 0:h.index)&&(n=Vt.nextNode(),o++)}return Vt.currentNode=xt,r}v(t){let e=0;for(const i of this._$AV)void 0!==i&&(void 0!==i.strings?(i._$AI(t,i,e),e+=i.strings.length-2):i._$AI(t[e])),e++}}class Zt{constructor(t,e,i,s){var r;this.type=2,this._$AH=Ft,this._$AN=void 0,this._$AA=t,this._$AB=e,this._$AM=i,this.options=s,this._$Cp=null===(r=null==s?void 0:s.isConnected)||void 0===r||r}get _$AU(){var t,e;return null!==(e=null===(t=this._$AM)||void 0===t?void 0:t._$AU)&&void 0!==e?e:this._$Cp}get parentNode(){let t=this._$AA.parentNode;const e=this._$AM;return void 0!==e&&11===(null==t?void 0:t.nodeType)&&(t=e.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,e=this){t=Jt(this,t,e),Ut(t)?t===Ft||null==t||""===t?(this._$AH!==Ft&&this._$AR(),this._$AH=Ft):t!==this._$AH&&t!==Bt&&this._(t):void 0!==t._$litType$?this.g(t):void 0!==t.nodeType?this.$(t):(t=>Ot(t)||"function"==typeof(null==t?void 0:t[Symbol.iterator]))(t)?this.T(t):this._(t)}k(t){return this._$AA.parentNode.insertBefore(t,this._$AB)}$(t){this._$AH!==t&&(this._$AR(),this._$AH=this.k(t))}_(t){this._$AH!==Ft&&Ut(this._$AH)?this._$AA.nextSibling.data=t:this.$(xt.createTextNode(t)),this._$AH=t}g(t){var e;const{values:i,_$litType$:s}=t,r="number"==typeof s?this._$AC(t):(void 0===s.el&&(s.el=Wt.createElement(s.h,this.options)),s);if((null===(e=this._$AH)||void 0===e?void 0:e._$AD)===r)this._$AH.v(i);else{const t=new Kt(r,this),e=t.u(this.options);t.v(i),this.$(e),this._$AH=t}}_$AC(t){let e=qt.get(t.strings);return void 0===e&&qt.set(t.strings,e=new Wt(t)),e}T(t){Ot(this._$AH)||(this._$AH=[],this._$AR());const e=this._$AH;let i,s=0;for(const r of t)s===e.length?e.push(i=new Zt(this.k(Rt()),this.k(Rt()),this,this.options)):i=e[s],i._$AI(r),s++;s<e.length&&(this._$AR(i&&i._$AB.nextSibling,s),e.length=s)}_$AR(t=this._$AA.nextSibling,e){var i;for(null===(i=this._$AP)||void 0===i||i.call(this,!1,!0,e);t&&t!==this._$AB;){const e=t.nextSibling;t.remove(),t=e}}setConnected(t){var e;void 0===this._$AM&&(this._$Cp=t,null===(e=this._$AP)||void 0===e||e.call(this,t))}}class Gt{constructor(t,e,i,s,r){this.type=1,this._$AH=Ft,this._$AN=void 0,this.element=t,this.name=e,this._$AM=s,this.options=r,i.length>2||""!==i[0]||""!==i[1]?(this._$AH=Array(i.length-1).fill(new String),this.strings=i):this._$AH=Ft}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(t,e=this,i,s){const r=this.strings;let n=!1;if(void 0===r)t=Jt(this,t,e,0),n=!Ut(t)||t!==this._$AH&&t!==Bt,n&&(this._$AH=t);else{const s=t;let o,l;for(t=r[0],o=0;o<r.length-1;o++)l=Jt(this,s[i+o],e,o),l===Bt&&(l=this._$AH[o]),n||(n=!Ut(l)||l!==this._$AH[o]),l===Ft?t=Ft:t!==Ft&&(t+=(null!=l?l:"")+r[o+1]),this._$AH[o]=l}n&&!s&&this.j(t)}j(t){t===Ft?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=t?t:"")}}class Xt extends Gt{constructor(){super(...arguments),this.type=3}j(t){this.element[this.name]=t===Ft?void 0:t}}const Qt=Et?Et.emptyScript:"";class Yt extends Gt{constructor(){super(...arguments),this.type=4}j(t){t&&t!==Ft?this.element.setAttribute(this.name,Qt):this.element.removeAttribute(this.name)}}class te extends Gt{constructor(t,e,i,s,r){super(t,e,i,s,r),this.type=5}_$AI(t,e=this){var i;if((t=null!==(i=Jt(this,t,e,0))&&void 0!==i?i:Ft)===Bt)return;const s=this._$AH,r=t===Ft&&s!==Ft||t.capture!==s.capture||t.once!==s.once||t.passive!==s.passive,n=t!==Ft&&(s===Ft||r);r&&this.element.removeEventListener(this.name,this,s),n&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){var e,i;"function"==typeof this._$AH?this._$AH.call(null!==(i=null===(e=this.options)||void 0===e?void 0:e.host)&&void 0!==i?i:this.element,t):this._$AH.handleEvent(t)}}class ee{constructor(t,e,i){this.element=t,this.type=6,this._$AN=void 0,this._$AM=e,this.options=i}get _$AU(){return this._$AM._$AU}_$AI(t){Jt(this,t)}}const ie=At.litHtmlPolyfillSupport;null==ie||ie(Wt,Zt),(null!==(yt=At.litHtmlVersions)&&void 0!==yt?yt:At.litHtmlVersions=[]).push("2.7.4");const se=window,re=se.ShadowRoot&&(void 0===se.ShadyCSS||se.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,ne=Symbol(),oe=new WeakMap;class le{constructor(t,e,i){if(this._$cssResult$=!0,i!==ne)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const e=this.t;if(re&&void 0===t){const i=void 0!==e&&1===e.length;i&&(t=oe.get(e)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),i&&oe.set(e,t))}return t}toString(){return this.cssText}}const he=re?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const i of t.cssRules)e+=i.cssText;return(t=>new le("string"==typeof t?t:t+"",void 0,ne))(e)})(t):t;var ae;const ce=window,de=ce.trustedTypes,ue=de?de.emptyScript:"",pe=ce.reactiveElementPolyfillSupport,ve={toAttribute(t,e){switch(e){case Boolean:t=t?ue:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){let i=t;switch(e){case Boolean:i=null!==t;break;case Number:i=null===t?null:Number(t);break;case Object:case Array:try{i=JSON.parse(t)}catch(t){i=null}}return i}},fe=(t,e)=>e!==t&&(e==e||t==t),_e={attribute:!0,type:String,converter:ve,reflect:!1,hasChanged:fe};class $e extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(t){var e;this.finalize(),(null!==(e=this.h)&&void 0!==e?e:this.h=[]).push(t)}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((e,i)=>{const s=this._$Ep(i,e);void 0!==s&&(this._$Ev.set(s,i),t.push(s))})),t}static createProperty(t,e=_e){if(e.state&&(e.attribute=!1),this.finalize(),this.elementProperties.set(t,e),!e.noAccessor&&!this.prototype.hasOwnProperty(t)){const i="symbol"==typeof t?Symbol():"__"+t,s=this.getPropertyDescriptor(t,i,e);void 0!==s&&Object.defineProperty(this.prototype,t,s)}}static getPropertyDescriptor(t,e,i){return{get(){return this[e]},set(s){const r=this[t];this[e]=s,this.requestUpdate(t,r,i)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||_e}static finalize(){if(this.hasOwnProperty("finalized"))return!1;this.finalized=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),void 0!==t.h&&(this.h=[...t.h]),this.elementProperties=new Map(t.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const t=this.properties,e=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const i of e)this.createProperty(i,t[i])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(t){const e=[];if(Array.isArray(t)){const i=new Set(t.flat(1/0).reverse());for(const t of i)e.unshift(he(t))}else void 0!==t&&e.push(he(t));return e}static _$Ep(t,e){const i=e.attribute;return!1===i?void 0:"string"==typeof i?i:"string"==typeof t?t.toLowerCase():void 0}u(){var t;this._$E_=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(t=this.constructor.h)||void 0===t||t.forEach((t=>t(this)))}addController(t){var e,i;(null!==(e=this._$ES)&&void 0!==e?e:this._$ES=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(i=t.hostConnected)||void 0===i||i.call(t))}removeController(t){var e;null===(e=this._$ES)||void 0===e||e.splice(this._$ES.indexOf(t)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((t,e)=>{this.hasOwnProperty(e)&&(this._$Ei.set(e,this[e]),delete this[e])}))}createRenderRoot(){var t;const e=null!==(t=this.shadowRoot)&&void 0!==t?t:this.attachShadow(this.constructor.shadowRootOptions);return((t,e)=>{re?t.adoptedStyleSheets=e.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):e.forEach((e=>{const i=document.createElement("style"),s=se.litNonce;void 0!==s&&i.setAttribute("nonce",s),i.textContent=e.cssText,t.appendChild(i)}))})(e,this.constructor.elementStyles),e}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostConnected)||void 0===e?void 0:e.call(t)}))}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostDisconnected)||void 0===e?void 0:e.call(t)}))}attributeChangedCallback(t,e,i){this._$AK(t,i)}_$EO(t,e,i=_e){var s;const r=this.constructor._$Ep(t,i);if(void 0!==r&&!0===i.reflect){const n=(void 0!==(null===(s=i.converter)||void 0===s?void 0:s.toAttribute)?i.converter:ve).toAttribute(e,i.type);this._$El=t,null==n?this.removeAttribute(r):this.setAttribute(r,n),this._$El=null}}_$AK(t,e){var i;const s=this.constructor,r=s._$Ev.get(t);if(void 0!==r&&this._$El!==r){const t=s.getPropertyOptions(r),n="function"==typeof t.converter?{fromAttribute:t.converter}:void 0!==(null===(i=t.converter)||void 0===i?void 0:i.fromAttribute)?t.converter:ve;this._$El=r,this[r]=n.fromAttribute(e,t.type),this._$El=null}}requestUpdate(t,e,i){let s=!0;void 0!==t&&(((i=i||this.constructor.getPropertyOptions(t)).hasChanged||fe)(this[t],e)?(this._$AL.has(t)||this._$AL.set(t,e),!0===i.reflect&&this._$El!==t&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(t,i))):s=!1),!this.isUpdatePending&&s&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((t,e)=>this[e]=t)),this._$Ei=void 0);let e=!1;const i=this._$AL;try{e=this.shouldUpdate(i),e?(this.willUpdate(i),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostUpdate)||void 0===e?void 0:e.call(t)})),this.update(i)):this._$Ek()}catch(t){throw e=!1,this._$Ek(),t}e&&this._$AE(i)}willUpdate(t){}_$AE(t){var e;null===(e=this._$ES)||void 0===e||e.forEach((t=>{var e;return null===(e=t.hostUpdated)||void 0===e?void 0:e.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(t){return!0}update(t){void 0!==this._$EC&&(this._$EC.forEach(((t,e)=>this._$EO(e,this[e],t))),this._$EC=void 0),this._$Ek()}updated(t){}firstUpdated(t){}}var me,ge;$e.finalized=!0,$e.elementProperties=new Map,$e.elementStyles=[],$e.shadowRootOptions={mode:"open"},null==pe||pe({ReactiveElement:$e}),(null!==(ae=ce.reactiveElementVersions)&&void 0!==ae?ae:ce.reactiveElementVersions=[]).push("1.6.1");class ye extends $e{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var t,e;const i=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=i.firstChild),i}update(t){const e=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=((t,e,i)=>{var s,r;const n=null!==(s=null==i?void 0:i.renderBefore)&&void 0!==s?s:e;let o=n._$litPart$;if(void 0===o){const t=null!==(r=null==i?void 0:i.renderBefore)&&void 0!==r?r:null;n._$litPart$=o=new Zt(e.insertBefore(Rt(),t),t,void 0,null!=i?i:{})}return o._$AI(t),o})(e,this.renderRoot,this.renderOptions)}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!0)}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!1)}render(){return Bt}}ye.finalized=!0,ye._$litElement$=!0,null===(me=globalThis.litElementHydrateSupport)||void 0===me||me.call(globalThis,{LitElement:ye});const Ae=globalThis.litElementPolyfillSupport;null==Ae||Ae({LitElement:ye}),(null!==(ge=globalThis.litElementVersions)&&void 0!==ge?ge:globalThis.litElementVersions=[]).push("3.3.2");const Ee=t=>e=>"function"==typeof e?((t,e)=>(customElements.define(t,e),e))(t,e):((t,e)=>{const{kind:i,elements:s}=e;return{kind:i,elements:s,finisher(e){customElements.define(t,e)}}})(t,e),be=(t,e)=>"method"===e.kind&&e.descriptor&&!("value"in e.descriptor)?{...e,finisher(i){i.createProperty(e.key,t)}}:{kind:"field",key:Symbol(),placement:"own",descriptor:{},originalKey:e.key,initializer(){"function"==typeof e.initializer&&(this[e.key]=e.initializer.call(this))},finisher(i){i.createProperty(e.key,t)}};function we(t){return(e,i)=>void 0!==i?((t,e,i)=>{e.constructor.createProperty(i,t)})(t,e,i):be(t,e)}function Se(t){return we({...t,state:!0})}var Ce;null===(Ce=window.HTMLSlotElement)||void 0===Ce||Ce.prototype.assignedElements;var Pe=1e6,xe="[big.js] ",Re=xe+"Invalid ",Ue=Re+"decimal places",Oe=Re+"rounding mode",Ne=xe+"Division by zero",ke={},Te=void 0,He=/^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;function Me(t,e,i,s){var r=t.c;if(i===Te&&(i=t.constructor.RM),0!==i&&1!==i&&2!==i&&3!==i)throw Error(Oe);if(e<1)s=3===i&&(s||!!r[0])||0===e&&(1===i&&r[0]>=5||2===i&&(r[0]>5||5===r[0]&&(s||r[1]!==Te))),r.length=1,s?(t.e=t.e-e+1,r[0]=1):r[0]=t.e=0;else if(e<r.length){if(s=1===i&&r[e]>=5||2===i&&(r[e]>5||5===r[e]&&(s||r[e+1]!==Te||1&r[e-1]))||3===i&&(s||!!r[0]),r.length=e,s)for(;++r[--e]>9;)if(r[e]=0,0===e){++t.e,r.unshift(1);break}for(e=r.length;!r[--e];)r.pop()}return t}function De(t,e,i){var s=t.e,r=t.c.join(""),n=r.length;if(e)r=r.charAt(0)+(n>1?"."+r.slice(1):"")+(s<0?"e":"e+")+s;else if(s<0){for(;++s;)r="0"+r;r="0."+r}else if(s>0)if(++s>n)for(s-=n;s--;)r+="0";else s<n&&(r=r.slice(0,s)+"."+r.slice(s));else n>1&&(r=r.charAt(0)+"."+r.slice(1));return t.s<0&&i?"-"+r:r}ke.abs=function(){var t=new this.constructor(this);return t.s=1,t},ke.cmp=function(t){var e,i=this,s=i.c,r=(t=new i.constructor(t)).c,n=i.s,o=t.s,l=i.e,h=t.e;if(!s[0]||!r[0])return s[0]?n:r[0]?-o:0;if(n!=o)return n;if(e=n<0,l!=h)return l>h^e?1:-1;for(o=(l=s.length)<(h=r.length)?l:h,n=-1;++n<o;)if(s[n]!=r[n])return s[n]>r[n]^e?1:-1;return l==h?0:l>h^e?1:-1},ke.div=function(t){var e=this,i=e.constructor,s=e.c,r=(t=new i(t)).c,n=e.s==t.s?1:-1,o=i.DP;if(o!==~~o||o<0||o>Pe)throw Error(Ue);if(!r[0])throw Error(Ne);if(!s[0])return t.s=n,t.c=[t.e=0],t;var l,h,a,c,d,u=r.slice(),p=l=r.length,v=s.length,f=s.slice(0,l),_=f.length,$=t,m=$.c=[],g=0,y=o+($.e=e.e-t.e)+1;for($.s=n,n=y<0?0:y,u.unshift(0);_++<l;)f.push(0);do{for(a=0;a<10;a++){if(l!=(_=f.length))c=l>_?1:-1;else for(d=-1,c=0;++d<l;)if(r[d]!=f[d]){c=r[d]>f[d]?1:-1;break}if(!(c<0))break;for(h=_==l?r:u;_;){if(f[--_]<h[_]){for(d=_;d&&!f[--d];)f[d]=9;--f[d],f[_]+=10}f[_]-=h[_]}for(;!f[0];)f.shift()}m[g++]=c?a:++a,f[0]&&c?f[_]=s[p]||0:f=[s[p]]}while((p++<v||f[0]!==Te)&&n--);return m[0]||1==g||(m.shift(),$.e--,y--),g>y&&Me($,y,i.RM,f[0]!==Te),$},ke.eq=function(t){return 0===this.cmp(t)},ke.gt=function(t){return this.cmp(t)>0},ke.gte=function(t){return this.cmp(t)>-1},ke.lt=function(t){return this.cmp(t)<0},ke.lte=function(t){return this.cmp(t)<1},ke.minus=ke.sub=function(t){var e,i,s,r,n=this,o=n.constructor,l=n.s,h=(t=new o(t)).s;if(l!=h)return t.s=-h,n.plus(t);var a=n.c.slice(),c=n.e,d=t.c,u=t.e;if(!a[0]||!d[0])return d[0]?t.s=-h:a[0]?t=new o(n):t.s=1,t;if(l=c-u){for((r=l<0)?(l=-l,s=a):(u=c,s=d),s.reverse(),h=l;h--;)s.push(0);s.reverse()}else for(i=((r=a.length<d.length)?a:d).length,l=h=0;h<i;h++)if(a[h]!=d[h]){r=a[h]<d[h];break}if(r&&(s=a,a=d,d=s,t.s=-t.s),(h=(i=d.length)-(e=a.length))>0)for(;h--;)a[e++]=0;for(h=e;i>l;){if(a[--i]<d[i]){for(e=i;e&&!a[--e];)a[e]=9;--a[e],a[i]+=10}a[i]-=d[i]}for(;0===a[--h];)a.pop();for(;0===a[0];)a.shift(),--u;return a[0]||(t.s=1,a=[u=0]),t.c=a,t.e=u,t},ke.mod=function(t){var e,i=this,s=i.constructor,r=i.s,n=(t=new s(t)).s;if(!t.c[0])throw Error(Ne);return i.s=t.s=1,e=1==t.cmp(i),i.s=r,t.s=n,e?new s(i):(r=s.DP,n=s.RM,s.DP=s.RM=0,i=i.div(t),s.DP=r,s.RM=n,this.minus(i.times(t)))},ke.neg=function(){var t=new this.constructor(this);return t.s=-t.s,t},ke.plus=ke.add=function(t){var e,i,s,r=this,n=r.constructor;if(t=new n(t),r.s!=t.s)return t.s=-t.s,r.minus(t);var o=r.e,l=r.c,h=t.e,a=t.c;if(!l[0]||!a[0])return a[0]||(l[0]?t=new n(r):t.s=r.s),t;if(l=l.slice(),e=o-h){for(e>0?(h=o,s=a):(e=-e,s=l),s.reverse();e--;)s.push(0);s.reverse()}for(l.length-a.length<0&&(s=a,a=l,l=s),e=a.length,i=0;e;l[e]%=10)i=(l[--e]=l[e]+a[e]+i)/10|0;for(i&&(l.unshift(i),++h),e=l.length;0===l[--e];)l.pop();return t.c=l,t.e=h,t},ke.pow=function(t){var e=this,i=new e.constructor("1"),s=i,r=t<0;if(t!==~~t||t<-1e6||t>1e6)throw Error(Re+"exponent");for(r&&(t=-t);1&t&&(s=s.times(e)),t>>=1;)e=e.times(e);return r?i.div(s):s},ke.prec=function(t,e){if(t!==~~t||t<1||t>Pe)throw Error(Re+"precision");return Me(new this.constructor(this),t,e)},ke.round=function(t,e){if(t===Te)t=0;else if(t!==~~t||t<-Pe||t>Pe)throw Error(Ue);return Me(new this.constructor(this),t+this.e+1,e)},ke.sqrt=function(){var t,e,i,s=this,r=s.constructor,n=s.s,o=s.e,l=new r("0.5");if(!s.c[0])return new r(s);if(n<0)throw Error(xe+"No square root");0===(n=Math.sqrt(s+""))||n===1/0?((e=s.c.join("")).length+o&1||(e+="0"),o=((o+1)/2|0)-(o<0||1&o),t=new r(((n=Math.sqrt(e))==1/0?"5e":(n=n.toExponential()).slice(0,n.indexOf("e")+1))+o)):t=new r(n+""),o=t.e+(r.DP+=4);do{i=t,t=l.times(i.plus(s.div(i)))}while(i.c.slice(0,o).join("")!==t.c.slice(0,o).join(""));return Me(t,(r.DP-=4)+t.e+1,r.RM)},ke.times=ke.mul=function(t){var e,i=this,s=i.constructor,r=i.c,n=(t=new s(t)).c,o=r.length,l=n.length,h=i.e,a=t.e;if(t.s=i.s==t.s?1:-1,!r[0]||!n[0])return t.c=[t.e=0],t;for(t.e=h+a,o<l&&(e=r,r=n,n=e,a=o,o=l,l=a),e=new Array(a=o+l);a--;)e[a]=0;for(h=l;h--;){for(l=0,a=o+h;a>h;)l=e[a]+n[h]*r[a-h-1]+l,e[a--]=l%10,l=l/10|0;e[a]=l}for(l?++t.e:e.shift(),h=e.length;!e[--h];)e.pop();return t.c=e,t},ke.toExponential=function(t,e){var i=this,s=i.c[0];if(t!==Te){if(t!==~~t||t<0||t>Pe)throw Error(Ue);for(i=Me(new i.constructor(i),++t,e);i.c.length<t;)i.c.push(0)}return De(i,!0,!!s)},ke.toFixed=function(t,e){var i=this,s=i.c[0];if(t!==Te){if(t!==~~t||t<0||t>Pe)throw Error(Ue);for(t=t+(i=Me(new i.constructor(i),t+i.e+1,e)).e+1;i.c.length<t;)i.c.push(0)}return De(i,!1,!!s)},ke[Symbol.for("nodejs.util.inspect.custom")]=ke.toJSON=ke.toString=function(){var t=this,e=t.constructor;return De(t,t.e<=e.NE||t.e>=e.PE,!!t.c[0])},ke.toNumber=function(){var t=Number(De(this,!0,!0));if(!0===this.constructor.strict&&!this.eq(t.toString()))throw Error(xe+"Imprecise conversion");return t},ke.toPrecision=function(t,e){var i=this,s=i.constructor,r=i.c[0];if(t!==Te){if(t!==~~t||t<1||t>Pe)throw Error(Re+"precision");for(i=Me(new s(i),t,e);i.c.length<t;)i.c.push(0)}return De(i,t<=i.e||i.e<=s.NE||i.e>=s.PE,!!r)},ke.valueOf=function(){var t=this,e=t.constructor;if(!0===e.strict)throw Error(xe+"valueOf disallowed");return De(t,t.e<=e.NE||t.e>=e.PE,!0)};var je=function t(){function e(i){var s=this;if(!(s instanceof e))return i===Te?t():new e(i);if(i instanceof e)s.s=i.s,s.e=i.e,s.c=i.c.slice();else{if("string"!=typeof i){if(!0===e.strict&&"bigint"!=typeof i)throw TypeError(Re+"value");i=0===i&&1/i<0?"-0":String(i)}!function(t,e){var i,s,r;if(!He.test(e))throw Error(Re+"number");for(t.s="-"==e.charAt(0)?(e=e.slice(1),-1):1,(i=e.indexOf("."))>-1&&(e=e.replace(".","")),(s=e.search(/e/i))>0?(i<0&&(i=s),i+=+e.slice(s+1),e=e.substring(0,s)):i<0&&(i=e.length),r=e.length,s=0;s<r&&"0"==e.charAt(s);)++s;if(s==r)t.c=[t.e=0];else{for(;r>0&&"0"==e.charAt(--r););for(t.e=i-s-1,t.c=[],i=0;s<=r;)t.c[i++]=+e.charAt(s++)}}(s,i)}s.constructor=e}return e.prototype=ke,e.DP=20,e.RM=1,e.NE=-7,e.PE=21,e.strict=!1,e.roundDown=0,e.roundHalfUp=1,e.roundHalfEven=2,e.roundUp=3,e}();const Le=je;class Ie{constructor(){this._inner=[]}push(t){this._inner.push(t)}pop(){return this._inner.pop()}top(){return this._inner.at(-1)}empty(){return 0==this._inner.length}print(){console.log(this._inner)}}class ze{constructor(){this._inner={},this._head=0,this._tail=0}enqueue(t){this._inner[this._tail]=t,this._tail++}dequeue(){if(this._tail===this._head)return;const t=this._inner[this._head];return delete this._inner[this._head],this._head++,t}peek(){return this._inner[this._head]}empty(){return this._head==this._tail}print(){console.log(this._inner)}}var Be;!function(t){t[t.VARIABLE=0]="VARIABLE",t[t.OPERATOR=1]="OPERATOR",t[t.UNDEF=2]="UNDEF"}(Be||(Be={}));class Fe{constructor(t,e){this._minSuggestionLen=e>0?e:1,this._trie=new qe,this._trie.insertAll();for(let e of t)this.insert(e[0])}insert(t,e=-1,i=void 0){-1!=e?e!=t.length?(i.getChild(t[e])||null==i||i.addChild(t[e]),this.insert(t,e+1,i.getChild(t[e]))):null==i||i.addChild("\0"):this.insert(t,0,this._trie)}getRecommendation(t){if(t.length<this._minSuggestionLen)return null;let e=[],i=0,s=this._trie;for(;s&&i<t.length;)s=s.getChild(t[i]),i++;return s?(this._traverseAndGet(e,s,t,i),e):null}_traverseAndGet(t,e,i,s,r=""){for(let n of e.children)"\0"==n[0]&&t.push(i+r),this._traverseAndGet(t,n[1],i,s,r+n[0])}}class qe{constructor(){this._children=new Map}get children(){return this._children}insertAll(){for(let t=0;t<26;t++)this._children.set(String.fromCharCode(t+97),new qe)}getChild(t){return this._children.get(t)}addChild(t){this._children.set(t,new qe)}}class Ve{constructor(t,e){this.mathematicalOperators=new Set(["+","-","*","/"]),this.operatorPrecedence={"^":3,"/":2,"*":2,"+":1,"-":1},this.variables=t,this._recommender=new Fe(this.variables,e)}parseInput(t,e=null,i=null){let s=t.split(/([-+(),*/:?\s])/g),r=new Ie,n="",o=Be.VARIABLE,l=0,h=0,a="",c={recommendations:null,formattedContent:null,formattedString:null,newCursorPosition:null!=e?e:-1,errorStr:null};s.forEach((t=>{let s=this.variables.has(t)||!Number.isNaN(Number.parseFloat(t)),d=this.mathematicalOperators.has(t),u=""==t.trim(),p="("==t||")"==t;if(u)return n=`${n}${t}`,void(h+=t.length);h<=e&&h+t.length+1>=e&&!c.recommendations&&(i&&(c.newCursorPosition+=i.length-t.length+1,t=i),c.recommendations=this._recommender.getRecommendation(t));let v="";"("==t?(l++,r.push(h),v+=" bracket"):")"==t?(r.pop(),l--,v+=" bracket"):d&&(v+=" operator"),(o==Be.UNDEF||o==Be.VARIABLE&&!s&&!p||o==Be.OPERATOR&&!d||!s&&!d||s&&"/"==a&&(0==this.variables.get(t)||0==Number.parseFloat(t)))&&(v+=" error"),c.errorStr||(l<0?(c.errorStr=`Unexpected ')' at pos: ${h}`,o=Be.UNDEF):o!=Be.VARIABLE||s||p?o!=Be.OPERATOR||d||")"==t?s||d||p?!s||"/"!=a||0!=this.variables.get(t)&&0!=Number.parseFloat(t)||(c.errorStr=`Division by zero at pos: ${h}`,o=Be.UNDEF):(c.errorStr=`Unknown word at pos: ${h}`,o=Be.UNDEF):(c.errorStr=`Expected mathematical operator at pos: ${h}`,o=Be.UNDEF):(c.errorStr=`Expected variable/number at pos: ${h}`,o=Be.UNDEF)),o!=Be.UNDEF&&("("==t||d?o=Be.VARIABLE:(")"==t||s)&&(o=Be.OPERATOR)),n=`${n}<span class="wysiwygInternals ${v}">${t}</span>${i?" ":""}`,h+=t.length,a=t}));const d=(new DOMParser).parseFromString(n,"text/html");return c.formattedContent=d.querySelector("body"),c.formattedString=n,r.empty()||(c.errorStr=`Unclosed '(' at position: ${r.top()}`),c}buildRPN(t){if(this.parseInput(t).errorStr)return null;let e=t.split(/([-+(),*/:?\s])/g).filter((t=>!/\s+/.test(t)&&""!==t));const i=new Ie,s=new ze;for(let t of e)if("("==t)i.push("(");else if(")"==t){for(;"("!=i.top();)s.enqueue(i.pop());i.pop()}else if(this.mathematicalOperators.has(t)){for(;this.mathematicalOperators.has(i.top())&&this.operatorPrecedence[t]<=this.operatorPrecedence[i.top()];)s.enqueue(i.pop());i.push(t)}else Number.isNaN(t)||""==t||s.enqueue(t);for(;i.top();)s.enqueue(i.pop());return s}addParens(t){const e=this.buildRPN(t);if(!e)return null;let i="";for(;!e.empty();)i+=e.dequeue()+" ";let s=i.split(/\s+/g).filter((t=>!/\s+/.test(t)&&""!==t)),r=new Ie,n=new Ie;if(s.forEach((t=>{let e,i;if(this.variables.has(t)||!isNaN(parseFloat(t))&&isFinite(parseFloat(t)))n.push(t),r.push(null);else{if(!Object.keys(this.operatorPrecedence).includes(t))throw`${t} is not a recognized symbol`;{let[s,o,l,h]=[n.pop(),n.pop(),r.pop(),r.pop()];i=this.operatorPrecedence[h]<=this.operatorPrecedence[t]||this.operatorPrecedence[h]===this.operatorPrecedence[t]&&["/","-"].includes(t)?`(${o})`:`${o}`,e=this.operatorPrecedence[l]<=this.operatorPrecedence[t]||this.operatorPrecedence[l]===this.operatorPrecedence[t]&&["/","-"].includes(t)?`(${s})`:`${s}`,n.push(`${i} ${t} ${e}`),r.push(t)}}})),n.empty())throw`${i} is not a correct RPN`;return n.pop()}calculate(t){var e,i,s;let r=this.buildRPN(t);if(!r)return;let n=new Ie;for(;!r.empty();){const t=r.dequeue();if(this.mathematicalOperators.has(t)){let e=t,i=n.pop(),s=n.pop();try{switch(e){case"+":n.push(Le(s).add(Le(i)));break;case"-":n.push(Le(s).sub(Le(i)));break;case"*":n.push(Le(s).mul(Le(i)));break;case"/":n.push(Le(s).div(Le(i)))}}catch(t){return}}else n.push(Le(Number.parseFloat(null!==(i=null===(e=this.variables.get(t))||void 0===e?void 0:e.toString())&&void 0!==i?i:t)))}return null===(s=n.top())||void 0===s?void 0:s.toNumber()}}class We{static getCurrentCursorPosition(t){var e,i;let s,r=window.getSelection(),n=-1;if((null==r?void 0:r.focusNode)&&We._isChildOf(r.focusNode,t))for(s=r.focusNode,n=r.focusOffset;s&&s!==t;)if(s.previousSibling)s=s.previousSibling,n+=null!==(i=null===(e=s.textContent)||void 0===e?void 0:e.length)&&void 0!==i?i:0;else if(s=s.parentNode,null===s)break;return n}static setCurrentCursorPosition(t,e){if(t>=0){var i=window.getSelection();let s=We._createRange(e,{count:t},void 0);s&&(s.collapse(!1),null==i||i.removeAllRanges(),null==i||i.addRange(s))}}static _createRange(t,e,i){if(i||((i=document.createRange()).selectNode(t),i.setStart(t,0)),0===e.count)i.setEnd(t,e.count);else if(t&&e.count>0)if(t.nodeType===Node.TEXT_NODE)t.textContent.length<e.count?e.count-=t.textContent.length:(i.setEnd(t,e.count),e.count=0);else for(var s=0;s<t.childNodes.length&&(i=We._createRange(t.childNodes[s],e,i),0!==e.count);s++);return i}static _isChildOf(t,e){for(;null!==t;){if(t===e)return!0;t=t.parentNode}return!1}}var Je=function(t,e,i,s){var r,n=arguments.length,o=n<3?e:null===s?s=Object.getOwnPropertyDescriptor(e,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,i,s);else for(var l=t.length-1;l>=0;l--)(r=t[l])&&(o=(n<3?r(o):n>3?r(e,i,o):r(e,i))||o);return n>3&&o&&Object.defineProperty(e,i,o),o};let Ke=class extends ye{constructor(){super(...arguments),this.recommendations="",this.onClickRecommendation=t=>{}}handleKeydown(t,e){"Enter"==t.code&&(t.preventDefault(),t.stopPropagation(),this.onClickRecommendation(e))}render(){return zt`
      <ul class="wysiwyg-suggestion-menu">
        ${this.recommendations.split(",").map((t=>zt`<li
            tabindex="0"
            @click=${e=>this.onClickRecommendation(t)}
            @keydown=${e=>this.handleKeydown(e,t)}
          >
            ${t}
          </li>`))}
      </ul>
    `}};Ke.styles=((t,...e)=>{const i=1===t.length?t[0]:e.reduce(((e,i,s)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if("number"==typeof t)return t;throw Error("Value passed to 'css' function must be a 'css' function result: "+t+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(i)+t[s+1]),t[0]);return new le(i,t,ne)})`
    ul {
      border: 1px solid white;
      color: #bab6c0;
      background-color: #363537;
      box-sizing: border-box;
      width: fit-content;
      list-style-type: none;
      padding: 4px 0px;
      margin: 2px;
    }

    li {
      margin: 0px;
      padding: 2px 6px;
    }

    li:focus-visible {
      /* outline: 1px solid red; */
      outline: 0px;
      color: #fce566;
      background-color: #69676c;
    }
  `,Je([we()],Ke.prototype,"recommendations",void 0),Je([we()],Ke.prototype,"onClickRecommendation",void 0),Ke=Je([Ee("suggestion-menu")],Ke);var Ze=function(t,e,i,s){var r,n=arguments.length,o=n<3?e:null===s?s=Object.getOwnPropertyDescriptor(e,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,i,s);else for(var l=t.length-1;l>=0;l--)(r=t[l])&&(o=(n<3?r(o):n>3?r(e,i,o):r(e,i))||o);return n>3&&o&&Object.defineProperty(e,i,o),o};let Ge=class extends ye{constructor(){super(),this._content="",this._formattedContent=null,this._recommendations=null,this._errorStr=null,this._calculatedResult=null,this.currentCursorPosition=null,this.currentCursorRect=void 0,this.variables=new Map,this.minSuggestionLen=2,this.styles="\n    #wysiwyg-editor {\n      display: inline-block;\n      border: none;\n      padding: 4px;\n      caret-color: #fff;\n      color: #F7F1FF;\n      line-height: 1.1;\n    }\n\n    #wysiwyg-editor:focus {\n      border: none;\n    }\n\n    .wysiwygInternals.error {\n      text-decoration: underline;\n      -webkit-text-decoration-color: #FC514F;\n      text-decoration-color: #FC514F;\n      -webkit-text-decoration-style: wavy;\n      text-decoration-style: wavy;\n      text-decoration-thickness: 1px;\n      text-decoration-color: red;\n\n    }\n\n    .wysiwygInternals.bracket {\n      color: #FC514F;\n    }\n\n    .wysiwygInternals.operator {\n      font-weight: bold;\n      color: #FC618D;\n    }\n\n    .wysiwygInternals.variable {\n      color: #FC618D;\n    }\n  ",this._parser=new Ve(this.variables,this.minSuggestionLen)}firstUpdated(t){this._parser=new Ve(this.variables,this.minSuggestionLen)}handleChange(t){t.preventDefault(),this._content=t.target.innerText,this.parseInput(),t.target.focus()}onClickRecommendation(t){document.getElementById("wysiwyg-editor")&&(this.parseInput(t),this.currentCursorPosition=null)}parseInput(t=null){let e=document.getElementById("wysiwyg-editor");if(!e)return;this.currentCursorPosition=t?this.currentCursorPosition:We.getCurrentCursorPosition(e);const i=this._parser.parseInput(this._content,this.currentCursorPosition,t);this._recommendations=i.recommendations,this._formattedContent=i.formattedContent,this._errorStr=i.errorStr,e.innerHTML=i.formattedString,this._content=e.innerText,t&&(this._recommendations=null,this.currentCursorPosition=i.newCursorPosition),We.setCurrentCursorPosition(this.currentCursorPosition,e),null==e||e.focus();let s=window.getSelection(),r=null==s?void 0:s.getRangeAt(0),n=null==r?void 0:r.getClientRects()[0];this.currentCursorRect=n,this.requestUpdate()}requestCalculate(){var t;const e=this._parser.calculate(this._content);this._content=null!==(t=this._parser.addParens(this._content))&&void 0!==t?t:this._content,this.parseInput(),this._calculatedResult=null!=e?e:NaN,this._errorStr=null==e?"Division by zero encountered":this._errorStr,this._recommendations=null,this.requestUpdate()}requestFormat(){var t;this._content=null!==(t=this._parser.addParens(this._content))&&void 0!==t?t:this._content,this.parseInput(),this._recommendations=null,this.requestUpdate()}createRenderRoot(){return this}render(){var t,e;return zt`
      <style>
        ${this.styles}
      </style>
      <div>
        <div
          contenteditable
          id="wysiwyg-editor"
          style="width: 320px; min-height: 320px; border-radius: 4px; border: 0px solid black; outline: 2px solid black; white-space: pre-wrap; background-color: #222222"
          spellcheck="false"
          @input=${this.handleChange}
        ></div>
      </div>
      ${this._recommendations?zt`<div
            style="position: absolute; left: ${(null===(t=this.currentCursorRect)||void 0===t?void 0:t.left)+"px"}; top: ${(null===(e=this.currentCursorRect)||void 0===e?void 0:e.top)+"px"}"
          >
            <suggestion-menu
              .recommendations=${this._recommendations.join(",")}
              .onClickRecommendation=${t=>this.onClickRecommendation(t)}
            ></suggestion-menu>
          </div>`:zt``}
      <div
        style="color: #FC514F; outline: 2px solid black; background-color: #222222; padding: 4px 4px; margin: 0px 0px 8px 0px;"
      >
        ${this._errorStr}
      </div>
      <button @click=${this.requestCalculate}>Calculate</button>
      <button @click=${this.requestFormat}>Format</button>
      <p>${this._calculatedResult}</p>
    `}};Ze([Se()],Ge.prototype,"_content",void 0),Ze([Se()],Ge.prototype,"_formattedContent",void 0),Ze([Se()],Ge.prototype,"_recommendations",void 0),Ze([Se()],Ge.prototype,"_errorStr",void 0),Ze([Se()],Ge.prototype,"_calculatedResult",void 0),Ze([Se()],Ge.prototype,"currentCursorPosition",void 0),Ze([Se()],Ge.prototype,"currentCursorRect",void 0),Ze([we({type:Map,converter:{fromAttribute:t=>{if(t)return new Map(JSON.parse(t))},toAttribute:t=>JSON.stringify(Array.from(t.entries()))}})],Ge.prototype,"variables",void 0),Ze([we()],Ge.prototype,"minSuggestionLen",void 0),Ge=Ze([Ee("formula-editor")],Ge);let Xe=class extends it{constructor(){super(...arguments),this.fm=new Ge}render(){D` <formula-editor></formula-editor> `}};var Qe;Xe=function(t,e,i,s){var r,n=arguments.length,o=n<3?e:null===s?s=Object.getOwnPropertyDescriptor(e,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,i,s);else for(var l=t.length-1;l>=0;l--)(r=t[l])&&(o=(n<3?r(o):n>3?r(e,i,o):r(e,i))||o);return n>3&&o&&Object.defineProperty(e,i,o),o}([(Qe="showcase-gallery",t=>"function"==typeof t?((t,e)=>(customElements.define(t,e),e))(Qe,t):((t,e)=>{const{kind:i,elements:s}=e;return{kind:i,elements:s,finisher(e){customElements.define(t,e)}}})(Qe,t))],Xe)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,