/*! For license information please see app.bundle.js.LICENSE.txt */
(()=>{"use strict";const t=window,e=t.ShadowRoot&&(void 0===t.ShadyCSS||t.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,r=Symbol(),o=new WeakMap;class i{constructor(t,e,o){if(this._$cssResult$=!0,o!==r)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const r=this.t;if(e&&void 0===t){const e=void 0!==r&&1===r.length;e&&(t=o.get(r)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),e&&o.set(r,t))}return t}toString(){return this.cssText}}const s=e?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const r of t.cssRules)e+=r.cssText;return(t=>new i("string"==typeof t?t:t+"",void 0,r))(e)})(t):t;var n;const l=window,a=l.trustedTypes,h=a?a.emptyScript:"",c=l.reactiveElementPolyfillSupport,d={toAttribute(t,e){switch(e){case Boolean:t=t?h:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){let r=t;switch(e){case Boolean:r=null!==t;break;case Number:r=null===t?null:Number(t);break;case Object:case Array:try{r=JSON.parse(t)}catch(t){r=null}}return r}},u=(t,e)=>e!==t&&(e==e||t==t),p={attribute:!0,type:String,converter:d,reflect:!1,hasChanged:u},f="finalized";class v extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(t){var e;this.finalize(),(null!==(e=this.h)&&void 0!==e?e:this.h=[]).push(t)}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((e,r)=>{const o=this._$Ep(r,e);void 0!==o&&(this._$Ev.set(o,r),t.push(o))})),t}static createProperty(t,e=p){if(e.state&&(e.attribute=!1),this.finalize(),this.elementProperties.set(t,e),!e.noAccessor&&!this.prototype.hasOwnProperty(t)){const r="symbol"==typeof t?Symbol():"__"+t,o=this.getPropertyDescriptor(t,r,e);void 0!==o&&Object.defineProperty(this.prototype,t,o)}}static getPropertyDescriptor(t,e,r){return{get(){return this[e]},set(o){const i=this[t];this[e]=o,this.requestUpdate(t,i,r)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||p}static finalize(){if(this.hasOwnProperty(f))return!1;this[f]=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),void 0!==t.h&&(this.h=[...t.h]),this.elementProperties=new Map(t.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const t=this.properties,e=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const r of e)this.createProperty(r,t[r])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(t){const e=[];if(Array.isArray(t)){const r=new Set(t.flat(1/0).reverse());for(const t of r)e.unshift(s(t))}else void 0!==t&&e.push(s(t));return e}static _$Ep(t,e){const r=e.attribute;return!1===r?void 0:"string"==typeof r?r:"string"==typeof t?t.toLowerCase():void 0}u(){var t;this._$E_=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(t=this.constructor.h)||void 0===t||t.forEach((t=>t(this)))}addController(t){var e,r;(null!==(e=this._$ES)&&void 0!==e?e:this._$ES=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(r=t.hostConnected)||void 0===r||r.call(t))}removeController(t){var e;null===(e=this._$ES)||void 0===e||e.splice(this._$ES.indexOf(t)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((t,e)=>{this.hasOwnProperty(e)&&(this._$Ei.set(e,this[e]),delete this[e])}))}createRenderRoot(){var r;const o=null!==(r=this.shadowRoot)&&void 0!==r?r:this.attachShadow(this.constructor.shadowRootOptions);return((r,o)=>{e?r.adoptedStyleSheets=o.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):o.forEach((e=>{const o=document.createElement("style"),i=t.litNonce;void 0!==i&&o.setAttribute("nonce",i),o.textContent=e.cssText,r.appendChild(o)}))})(o,this.constructor.elementStyles),o}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostConnected)||void 0===e?void 0:e.call(t)}))}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostDisconnected)||void 0===e?void 0:e.call(t)}))}attributeChangedCallback(t,e,r){this._$AK(t,r)}_$EO(t,e,r=p){var o;const i=this.constructor._$Ep(t,r);if(void 0!==i&&!0===r.reflect){const s=(void 0!==(null===(o=r.converter)||void 0===o?void 0:o.toAttribute)?r.converter:d).toAttribute(e,r.type);this._$El=t,null==s?this.removeAttribute(i):this.setAttribute(i,s),this._$El=null}}_$AK(t,e){var r;const o=this.constructor,i=o._$Ev.get(t);if(void 0!==i&&this._$El!==i){const t=o.getPropertyOptions(i),s="function"==typeof t.converter?{fromAttribute:t.converter}:void 0!==(null===(r=t.converter)||void 0===r?void 0:r.fromAttribute)?t.converter:d;this._$El=i,this[i]=s.fromAttribute(e,t.type),this._$El=null}}requestUpdate(t,e,r){let o=!0;void 0!==t&&(((r=r||this.constructor.getPropertyOptions(t)).hasChanged||u)(this[t],e)?(this._$AL.has(t)||this._$AL.set(t,e),!0===r.reflect&&this._$El!==t&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(t,r))):o=!1),!this.isUpdatePending&&o&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((t,e)=>this[e]=t)),this._$Ei=void 0);let e=!1;const r=this._$AL;try{e=this.shouldUpdate(r),e?(this.willUpdate(r),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostUpdate)||void 0===e?void 0:e.call(t)})),this.update(r)):this._$Ek()}catch(t){throw e=!1,this._$Ek(),t}e&&this._$AE(r)}willUpdate(t){}_$AE(t){var e;null===(e=this._$ES)||void 0===e||e.forEach((t=>{var e;return null===(e=t.hostUpdated)||void 0===e?void 0:e.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(t){return!0}update(t){void 0!==this._$EC&&(this._$EC.forEach(((t,e)=>this._$EO(e,this[e],t))),this._$EC=void 0),this._$Ek()}updated(t){}firstUpdated(t){}}var g;v[f]=!0,v.elementProperties=new Map,v.elementStyles=[],v.shadowRootOptions={mode:"open"},null==c||c({ReactiveElement:v}),(null!==(n=l.reactiveElementVersions)&&void 0!==n?n:l.reactiveElementVersions=[]).push("1.6.2");const m=window,y=m.trustedTypes,_=y?y.createPolicy("lit-html",{createHTML:t=>t}):void 0,$="$lit$",b=`lit$${(Math.random()+"").slice(9)}$`,w="?"+b,A=`<${w}>`,x=document,E=()=>x.createComment(""),S=t=>null===t||"object"!=typeof t&&"function"!=typeof t,C=Array.isArray,P="[ \t\n\f\r]",R=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,k=/-->/g,N=/>/g,U=RegExp(`>|${P}(?:([^\\s"'>=/]+)(${P}*=${P}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),O=/'/g,T=/"/g,z=/^(?:script|style|textarea|title)$/i,H=t=>(e,...r)=>({_$litType$:t,strings:e,values:r}),M=H(1),D=(H(2),Symbol.for("lit-noChange")),I=Symbol.for("lit-nothing"),j=new WeakMap,L=x.createTreeWalker(x,129,null,!1),B=(t,e)=>{const r=t.length-1,o=[];let i,s=2===e?"<svg>":"",n=R;for(let e=0;e<r;e++){const r=t[e];let l,a,h=-1,c=0;for(;c<r.length&&(n.lastIndex=c,a=n.exec(r),null!==a);)c=n.lastIndex,n===R?"!--"===a[1]?n=k:void 0!==a[1]?n=N:void 0!==a[2]?(z.test(a[2])&&(i=RegExp("</"+a[2],"g")),n=U):void 0!==a[3]&&(n=U):n===U?">"===a[0]?(n=null!=i?i:R,h=-1):void 0===a[1]?h=-2:(h=n.lastIndex-a[2].length,l=a[1],n=void 0===a[3]?U:'"'===a[3]?T:O):n===T||n===O?n=U:n===k||n===N?n=R:(n=U,i=void 0);const d=n===U&&t[e+1].startsWith("/>")?" ":"";s+=n===R?r+A:h>=0?(o.push(l),r.slice(0,h)+$+r.slice(h)+b+d):r+b+(-2===h?(o.push(void 0),e):d)}const l=s+(t[r]||"<?>")+(2===e?"</svg>":"");if(!Array.isArray(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return[void 0!==_?_.createHTML(l):l,o]};class q{constructor({strings:t,_$litType$:e},r){let o;this.parts=[];let i=0,s=0;const n=t.length-1,l=this.parts,[a,h]=B(t,e);if(this.el=q.createElement(a,r),L.currentNode=this.el.content,2===e){const t=this.el.content,e=t.firstChild;e.remove(),t.append(...e.childNodes)}for(;null!==(o=L.nextNode())&&l.length<n;){if(1===o.nodeType){if(o.hasAttributes()){const t=[];for(const e of o.getAttributeNames())if(e.endsWith($)||e.startsWith(b)){const r=h[s++];if(t.push(e),void 0!==r){const t=o.getAttribute(r.toLowerCase()+$).split(b),e=/([.?@])?(.*)/.exec(r);l.push({type:1,index:i,name:e[2],strings:t,ctor:"."===e[1]?K:"?"===e[1]?G:"@"===e[1]?X:J})}else l.push({type:6,index:i})}for(const e of t)o.removeAttribute(e)}if(z.test(o.tagName)){const t=o.textContent.split(b),e=t.length-1;if(e>0){o.textContent=y?y.emptyScript:"";for(let r=0;r<e;r++)o.append(t[r],E()),L.nextNode(),l.push({type:2,index:++i});o.append(t[e],E())}}}else if(8===o.nodeType)if(o.data===w)l.push({type:2,index:i});else{let t=-1;for(;-1!==(t=o.data.indexOf(b,t+1));)l.push({type:7,index:i}),t+=b.length-1}i++}}static createElement(t,e){const r=x.createElement("template");return r.innerHTML=t,r}}function V(t,e,r=t,o){var i,s,n,l;if(e===D)return e;let a=void 0!==o?null===(i=r._$Co)||void 0===i?void 0:i[o]:r._$Cl;const h=S(e)?void 0:e._$litDirective$;return(null==a?void 0:a.constructor)!==h&&(null===(s=null==a?void 0:a._$AO)||void 0===s||s.call(a,!1),void 0===h?a=void 0:(a=new h(t),a._$AT(t,r,o)),void 0!==o?(null!==(n=(l=r)._$Co)&&void 0!==n?n:l._$Co=[])[o]=a:r._$Cl=a),void 0!==a&&(e=V(t,a._$AS(t,e.values),a,o)),e}class F{constructor(t,e){this._$AV=[],this._$AN=void 0,this._$AD=t,this._$AM=e}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(t){var e;const{el:{content:r},parts:o}=this._$AD,i=(null!==(e=null==t?void 0:t.creationScope)&&void 0!==e?e:x).importNode(r,!0);L.currentNode=i;let s=L.nextNode(),n=0,l=0,a=o[0];for(;void 0!==a;){if(n===a.index){let e;2===a.type?e=new W(s,s.nextSibling,this,t):1===a.type?e=new a.ctor(s,a.name,a.strings,this,t):6===a.type&&(e=new Y(s,this,t)),this._$AV.push(e),a=o[++l]}n!==(null==a?void 0:a.index)&&(s=L.nextNode(),n++)}return L.currentNode=x,i}v(t){let e=0;for(const r of this._$AV)void 0!==r&&(void 0!==r.strings?(r._$AI(t,r,e),e+=r.strings.length-2):r._$AI(t[e])),e++}}class W{constructor(t,e,r,o){var i;this.type=2,this._$AH=I,this._$AN=void 0,this._$AA=t,this._$AB=e,this._$AM=r,this.options=o,this._$Cp=null===(i=null==o?void 0:o.isConnected)||void 0===i||i}get _$AU(){var t,e;return null!==(e=null===(t=this._$AM)||void 0===t?void 0:t._$AU)&&void 0!==e?e:this._$Cp}get parentNode(){let t=this._$AA.parentNode;const e=this._$AM;return void 0!==e&&11===(null==t?void 0:t.nodeType)&&(t=e.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,e=this){t=V(this,t,e),S(t)?t===I||null==t||""===t?(this._$AH!==I&&this._$AR(),this._$AH=I):t!==this._$AH&&t!==D&&this._(t):void 0!==t._$litType$?this.g(t):void 0!==t.nodeType?this.$(t):(t=>C(t)||"function"==typeof(null==t?void 0:t[Symbol.iterator]))(t)?this.T(t):this._(t)}k(t){return this._$AA.parentNode.insertBefore(t,this._$AB)}$(t){this._$AH!==t&&(this._$AR(),this._$AH=this.k(t))}_(t){this._$AH!==I&&S(this._$AH)?this._$AA.nextSibling.data=t:this.$(x.createTextNode(t)),this._$AH=t}g(t){var e;const{values:r,_$litType$:o}=t,i="number"==typeof o?this._$AC(t):(void 0===o.el&&(o.el=q.createElement(o.h,this.options)),o);if((null===(e=this._$AH)||void 0===e?void 0:e._$AD)===i)this._$AH.v(r);else{const t=new F(i,this),e=t.u(this.options);t.v(r),this.$(e),this._$AH=t}}_$AC(t){let e=j.get(t.strings);return void 0===e&&j.set(t.strings,e=new q(t)),e}T(t){C(this._$AH)||(this._$AH=[],this._$AR());const e=this._$AH;let r,o=0;for(const i of t)o===e.length?e.push(r=new W(this.k(E()),this.k(E()),this,this.options)):r=e[o],r._$AI(i),o++;o<e.length&&(this._$AR(r&&r._$AB.nextSibling,o),e.length=o)}_$AR(t=this._$AA.nextSibling,e){var r;for(null===(r=this._$AP)||void 0===r||r.call(this,!1,!0,e);t&&t!==this._$AB;){const e=t.nextSibling;t.remove(),t=e}}setConnected(t){var e;void 0===this._$AM&&(this._$Cp=t,null===(e=this._$AP)||void 0===e||e.call(this,t))}}class J{constructor(t,e,r,o,i){this.type=1,this._$AH=I,this._$AN=void 0,this.element=t,this.name=e,this._$AM=o,this.options=i,r.length>2||""!==r[0]||""!==r[1]?(this._$AH=Array(r.length-1).fill(new String),this.strings=r):this._$AH=I}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(t,e=this,r,o){const i=this.strings;let s=!1;if(void 0===i)t=V(this,t,e,0),s=!S(t)||t!==this._$AH&&t!==D,s&&(this._$AH=t);else{const o=t;let n,l;for(t=i[0],n=0;n<i.length-1;n++)l=V(this,o[r+n],e,n),l===D&&(l=this._$AH[n]),s||(s=!S(l)||l!==this._$AH[n]),l===I?t=I:t!==I&&(t+=(null!=l?l:"")+i[n+1]),this._$AH[n]=l}s&&!o&&this.j(t)}j(t){t===I?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=t?t:"")}}class K extends J{constructor(){super(...arguments),this.type=3}j(t){this.element[this.name]=t===I?void 0:t}}const Z=y?y.emptyScript:"";class G extends J{constructor(){super(...arguments),this.type=4}j(t){t&&t!==I?this.element.setAttribute(this.name,Z):this.element.removeAttribute(this.name)}}class X extends J{constructor(t,e,r,o,i){super(t,e,r,o,i),this.type=5}_$AI(t,e=this){var r;if((t=null!==(r=V(this,t,e,0))&&void 0!==r?r:I)===D)return;const o=this._$AH,i=t===I&&o!==I||t.capture!==o.capture||t.once!==o.once||t.passive!==o.passive,s=t!==I&&(o===I||i);i&&this.element.removeEventListener(this.name,this,o),s&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){var e,r;"function"==typeof this._$AH?this._$AH.call(null!==(r=null===(e=this.options)||void 0===e?void 0:e.host)&&void 0!==r?r:this.element,t):this._$AH.handleEvent(t)}}class Y{constructor(t,e,r){this.element=t,this.type=6,this._$AN=void 0,this._$AM=e,this.options=r}get _$AU(){return this._$AM._$AU}_$AI(t){V(this,t)}}const Q=m.litHtmlPolyfillSupport;var tt,et;null==Q||Q(q,W),(null!==(g=m.litHtmlVersions)&&void 0!==g?g:m.litHtmlVersions=[]).push("2.7.4");class rt extends v{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var t,e;const r=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=r.firstChild),r}update(t){const e=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=((t,e,r)=>{var o,i;const s=null!==(o=null==r?void 0:r.renderBefore)&&void 0!==o?o:e;let n=s._$litPart$;if(void 0===n){const t=null!==(i=null==r?void 0:r.renderBefore)&&void 0!==i?i:null;s._$litPart$=n=new W(e.insertBefore(E(),t),t,void 0,null!=r?r:{})}return n._$AI(t),n})(e,this.renderRoot,this.renderOptions)}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!0)}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!1)}render(){return D}}rt.finalized=!0,rt._$litElement$=!0,null===(tt=globalThis.litElementHydrateSupport)||void 0===tt||tt.call(globalThis,{LitElement:rt});const ot=globalThis.litElementPolyfillSupport;var it;null==ot||ot({LitElement:rt}),(null!==(et=globalThis.litElementVersions)&&void 0!==et?et:globalThis.litElementVersions=[]).push("3.3.2"),null===(it=window.HTMLSlotElement)||void 0===it||it.prototype.assignedElements,console.warn("The main 'lit-element' module entrypoint is deprecated. Please update your imports to use the 'lit' package: 'lit' and 'lit/decorators.ts' or import from 'lit-element/lit-element.ts'. See https://lit.dev/msg/deprecated-import-path for more information.");const st=window,nt=st.ShadowRoot&&(void 0===st.ShadyCSS||st.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,lt=Symbol(),at=new WeakMap;class ht{constructor(t,e,r){if(this._$cssResult$=!0,r!==lt)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const e=this.t;if(nt&&void 0===t){const r=void 0!==e&&1===e.length;r&&(t=at.get(e)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),r&&at.set(e,t))}return t}toString(){return this.cssText}}const ct=nt?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const r of t.cssRules)e+=r.cssText;return(t=>new ht("string"==typeof t?t:t+"",void 0,lt))(e)})(t):t;var dt;const ut=window,pt=ut.trustedTypes,ft=pt?pt.emptyScript:"",vt=ut.reactiveElementPolyfillSupport,gt={toAttribute(t,e){switch(e){case Boolean:t=t?ft:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){let r=t;switch(e){case Boolean:r=null!==t;break;case Number:r=null===t?null:Number(t);break;case Object:case Array:try{r=JSON.parse(t)}catch(t){r=null}}return r}},mt=(t,e)=>e!==t&&(e==e||t==t),yt={attribute:!0,type:String,converter:gt,reflect:!1,hasChanged:mt};class _t extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(t){var e;this.finalize(),(null!==(e=this.h)&&void 0!==e?e:this.h=[]).push(t)}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((e,r)=>{const o=this._$Ep(r,e);void 0!==o&&(this._$Ev.set(o,r),t.push(o))})),t}static createProperty(t,e=yt){if(e.state&&(e.attribute=!1),this.finalize(),this.elementProperties.set(t,e),!e.noAccessor&&!this.prototype.hasOwnProperty(t)){const r="symbol"==typeof t?Symbol():"__"+t,o=this.getPropertyDescriptor(t,r,e);void 0!==o&&Object.defineProperty(this.prototype,t,o)}}static getPropertyDescriptor(t,e,r){return{get(){return this[e]},set(o){const i=this[t];this[e]=o,this.requestUpdate(t,i,r)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||yt}static finalize(){if(this.hasOwnProperty("finalized"))return!1;this.finalized=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),void 0!==t.h&&(this.h=[...t.h]),this.elementProperties=new Map(t.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const t=this.properties,e=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const r of e)this.createProperty(r,t[r])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(t){const e=[];if(Array.isArray(t)){const r=new Set(t.flat(1/0).reverse());for(const t of r)e.unshift(ct(t))}else void 0!==t&&e.push(ct(t));return e}static _$Ep(t,e){const r=e.attribute;return!1===r?void 0:"string"==typeof r?r:"string"==typeof t?t.toLowerCase():void 0}u(){var t;this._$E_=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(t=this.constructor.h)||void 0===t||t.forEach((t=>t(this)))}addController(t){var e,r;(null!==(e=this._$ES)&&void 0!==e?e:this._$ES=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(r=t.hostConnected)||void 0===r||r.call(t))}removeController(t){var e;null===(e=this._$ES)||void 0===e||e.splice(this._$ES.indexOf(t)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((t,e)=>{this.hasOwnProperty(e)&&(this._$Ei.set(e,this[e]),delete this[e])}))}createRenderRoot(){var t;const e=null!==(t=this.shadowRoot)&&void 0!==t?t:this.attachShadow(this.constructor.shadowRootOptions);return((t,e)=>{nt?t.adoptedStyleSheets=e.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):e.forEach((e=>{const r=document.createElement("style"),o=st.litNonce;void 0!==o&&r.setAttribute("nonce",o),r.textContent=e.cssText,t.appendChild(r)}))})(e,this.constructor.elementStyles),e}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostConnected)||void 0===e?void 0:e.call(t)}))}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostDisconnected)||void 0===e?void 0:e.call(t)}))}attributeChangedCallback(t,e,r){this._$AK(t,r)}_$EO(t,e,r=yt){var o;const i=this.constructor._$Ep(t,r);if(void 0!==i&&!0===r.reflect){const s=(void 0!==(null===(o=r.converter)||void 0===o?void 0:o.toAttribute)?r.converter:gt).toAttribute(e,r.type);this._$El=t,null==s?this.removeAttribute(i):this.setAttribute(i,s),this._$El=null}}_$AK(t,e){var r;const o=this.constructor,i=o._$Ev.get(t);if(void 0!==i&&this._$El!==i){const t=o.getPropertyOptions(i),s="function"==typeof t.converter?{fromAttribute:t.converter}:void 0!==(null===(r=t.converter)||void 0===r?void 0:r.fromAttribute)?t.converter:gt;this._$El=i,this[i]=s.fromAttribute(e,t.type),this._$El=null}}requestUpdate(t,e,r){let o=!0;void 0!==t&&(((r=r||this.constructor.getPropertyOptions(t)).hasChanged||mt)(this[t],e)?(this._$AL.has(t)||this._$AL.set(t,e),!0===r.reflect&&this._$El!==t&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(t,r))):o=!1),!this.isUpdatePending&&o&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((t,e)=>this[e]=t)),this._$Ei=void 0);let e=!1;const r=this._$AL;try{e=this.shouldUpdate(r),e?(this.willUpdate(r),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostUpdate)||void 0===e?void 0:e.call(t)})),this.update(r)):this._$Ek()}catch(t){throw e=!1,this._$Ek(),t}e&&this._$AE(r)}willUpdate(t){}_$AE(t){var e;null===(e=this._$ES)||void 0===e||e.forEach((t=>{var e;return null===(e=t.hostUpdated)||void 0===e?void 0:e.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(t){return!0}update(t){void 0!==this._$EC&&(this._$EC.forEach(((t,e)=>this._$EO(e,this[e],t))),this._$EC=void 0),this._$Ek()}updated(t){}firstUpdated(t){}}var $t;_t.finalized=!0,_t.elementProperties=new Map,_t.elementStyles=[],_t.shadowRootOptions={mode:"open"},null==vt||vt({ReactiveElement:_t}),(null!==(dt=ut.reactiveElementVersions)&&void 0!==dt?dt:ut.reactiveElementVersions=[]).push("1.6.1");const bt=window,wt=bt.trustedTypes,At=wt?wt.createPolicy("lit-html",{createHTML:t=>t}):void 0,xt="$lit$",Et=`lit$${(Math.random()+"").slice(9)}$`,St="?"+Et,Ct=`<${St}>`,Pt=document,Rt=()=>Pt.createComment(""),kt=t=>null===t||"object"!=typeof t&&"function"!=typeof t,Nt=Array.isArray,Ut="[ \t\n\f\r]",Ot=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,Tt=/-->/g,zt=/>/g,Ht=RegExp(`>|${Ut}(?:([^\\s"'>=/]+)(${Ut}*=${Ut}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),Mt=/'/g,Dt=/"/g,It=/^(?:script|style|textarea|title)$/i,jt=t=>(e,...r)=>({_$litType$:t,strings:e,values:r}),Lt=jt(1),Bt=(jt(2),Symbol.for("lit-noChange")),qt=Symbol.for("lit-nothing"),Vt=new WeakMap,Ft=Pt.createTreeWalker(Pt,129,null,!1);class Wt{constructor({strings:t,_$litType$:e},r){let o;this.parts=[];let i=0,s=0;const n=t.length-1,l=this.parts,[a,h]=((t,e)=>{const r=t.length-1,o=[];let i,s=2===e?"<svg>":"",n=Ot;for(let e=0;e<r;e++){const r=t[e];let l,a,h=-1,c=0;for(;c<r.length&&(n.lastIndex=c,a=n.exec(r),null!==a);)c=n.lastIndex,n===Ot?"!--"===a[1]?n=Tt:void 0!==a[1]?n=zt:void 0!==a[2]?(It.test(a[2])&&(i=RegExp("</"+a[2],"g")),n=Ht):void 0!==a[3]&&(n=Ht):n===Ht?">"===a[0]?(n=null!=i?i:Ot,h=-1):void 0===a[1]?h=-2:(h=n.lastIndex-a[2].length,l=a[1],n=void 0===a[3]?Ht:'"'===a[3]?Dt:Mt):n===Dt||n===Mt?n=Ht:n===Tt||n===zt?n=Ot:(n=Ht,i=void 0);const d=n===Ht&&t[e+1].startsWith("/>")?" ":"";s+=n===Ot?r+Ct:h>=0?(o.push(l),r.slice(0,h)+xt+r.slice(h)+Et+d):r+Et+(-2===h?(o.push(void 0),e):d)}const l=s+(t[r]||"<?>")+(2===e?"</svg>":"");if(!Array.isArray(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return[void 0!==At?At.createHTML(l):l,o]})(t,e);if(this.el=Wt.createElement(a,r),Ft.currentNode=this.el.content,2===e){const t=this.el.content,e=t.firstChild;e.remove(),t.append(...e.childNodes)}for(;null!==(o=Ft.nextNode())&&l.length<n;){if(1===o.nodeType){if(o.hasAttributes()){const t=[];for(const e of o.getAttributeNames())if(e.endsWith(xt)||e.startsWith(Et)){const r=h[s++];if(t.push(e),void 0!==r){const t=o.getAttribute(r.toLowerCase()+xt).split(Et),e=/([.?@])?(.*)/.exec(r);l.push({type:1,index:i,name:e[2],strings:t,ctor:"."===e[1]?Xt:"?"===e[1]?Qt:"@"===e[1]?te:Gt})}else l.push({type:6,index:i})}for(const e of t)o.removeAttribute(e)}if(It.test(o.tagName)){const t=o.textContent.split(Et),e=t.length-1;if(e>0){o.textContent=wt?wt.emptyScript:"";for(let r=0;r<e;r++)o.append(t[r],Rt()),Ft.nextNode(),l.push({type:2,index:++i});o.append(t[e],Rt())}}}else if(8===o.nodeType)if(o.data===St)l.push({type:2,index:i});else{let t=-1;for(;-1!==(t=o.data.indexOf(Et,t+1));)l.push({type:7,index:i}),t+=Et.length-1}i++}}static createElement(t,e){const r=Pt.createElement("template");return r.innerHTML=t,r}}function Jt(t,e,r=t,o){var i,s,n,l;if(e===Bt)return e;let a=void 0!==o?null===(i=r._$Co)||void 0===i?void 0:i[o]:r._$Cl;const h=kt(e)?void 0:e._$litDirective$;return(null==a?void 0:a.constructor)!==h&&(null===(s=null==a?void 0:a._$AO)||void 0===s||s.call(a,!1),void 0===h?a=void 0:(a=new h(t),a._$AT(t,r,o)),void 0!==o?(null!==(n=(l=r)._$Co)&&void 0!==n?n:l._$Co=[])[o]=a:r._$Cl=a),void 0!==a&&(e=Jt(t,a._$AS(t,e.values),a,o)),e}class Kt{constructor(t,e){this._$AV=[],this._$AN=void 0,this._$AD=t,this._$AM=e}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(t){var e;const{el:{content:r},parts:o}=this._$AD,i=(null!==(e=null==t?void 0:t.creationScope)&&void 0!==e?e:Pt).importNode(r,!0);Ft.currentNode=i;let s=Ft.nextNode(),n=0,l=0,a=o[0];for(;void 0!==a;){if(n===a.index){let e;2===a.type?e=new Zt(s,s.nextSibling,this,t):1===a.type?e=new a.ctor(s,a.name,a.strings,this,t):6===a.type&&(e=new ee(s,this,t)),this._$AV.push(e),a=o[++l]}n!==(null==a?void 0:a.index)&&(s=Ft.nextNode(),n++)}return Ft.currentNode=Pt,i}v(t){let e=0;for(const r of this._$AV)void 0!==r&&(void 0!==r.strings?(r._$AI(t,r,e),e+=r.strings.length-2):r._$AI(t[e])),e++}}class Zt{constructor(t,e,r,o){var i;this.type=2,this._$AH=qt,this._$AN=void 0,this._$AA=t,this._$AB=e,this._$AM=r,this.options=o,this._$Cp=null===(i=null==o?void 0:o.isConnected)||void 0===i||i}get _$AU(){var t,e;return null!==(e=null===(t=this._$AM)||void 0===t?void 0:t._$AU)&&void 0!==e?e:this._$Cp}get parentNode(){let t=this._$AA.parentNode;const e=this._$AM;return void 0!==e&&11===(null==t?void 0:t.nodeType)&&(t=e.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,e=this){t=Jt(this,t,e),kt(t)?t===qt||null==t||""===t?(this._$AH!==qt&&this._$AR(),this._$AH=qt):t!==this._$AH&&t!==Bt&&this._(t):void 0!==t._$litType$?this.g(t):void 0!==t.nodeType?this.$(t):(t=>Nt(t)||"function"==typeof(null==t?void 0:t[Symbol.iterator]))(t)?this.T(t):this._(t)}k(t){return this._$AA.parentNode.insertBefore(t,this._$AB)}$(t){this._$AH!==t&&(this._$AR(),this._$AH=this.k(t))}_(t){this._$AH!==qt&&kt(this._$AH)?this._$AA.nextSibling.data=t:this.$(Pt.createTextNode(t)),this._$AH=t}g(t){var e;const{values:r,_$litType$:o}=t,i="number"==typeof o?this._$AC(t):(void 0===o.el&&(o.el=Wt.createElement(o.h,this.options)),o);if((null===(e=this._$AH)||void 0===e?void 0:e._$AD)===i)this._$AH.v(r);else{const t=new Kt(i,this),e=t.u(this.options);t.v(r),this.$(e),this._$AH=t}}_$AC(t){let e=Vt.get(t.strings);return void 0===e&&Vt.set(t.strings,e=new Wt(t)),e}T(t){Nt(this._$AH)||(this._$AH=[],this._$AR());const e=this._$AH;let r,o=0;for(const i of t)o===e.length?e.push(r=new Zt(this.k(Rt()),this.k(Rt()),this,this.options)):r=e[o],r._$AI(i),o++;o<e.length&&(this._$AR(r&&r._$AB.nextSibling,o),e.length=o)}_$AR(t=this._$AA.nextSibling,e){var r;for(null===(r=this._$AP)||void 0===r||r.call(this,!1,!0,e);t&&t!==this._$AB;){const e=t.nextSibling;t.remove(),t=e}}setConnected(t){var e;void 0===this._$AM&&(this._$Cp=t,null===(e=this._$AP)||void 0===e||e.call(this,t))}}class Gt{constructor(t,e,r,o,i){this.type=1,this._$AH=qt,this._$AN=void 0,this.element=t,this.name=e,this._$AM=o,this.options=i,r.length>2||""!==r[0]||""!==r[1]?(this._$AH=Array(r.length-1).fill(new String),this.strings=r):this._$AH=qt}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(t,e=this,r,o){const i=this.strings;let s=!1;if(void 0===i)t=Jt(this,t,e,0),s=!kt(t)||t!==this._$AH&&t!==Bt,s&&(this._$AH=t);else{const o=t;let n,l;for(t=i[0],n=0;n<i.length-1;n++)l=Jt(this,o[r+n],e,n),l===Bt&&(l=this._$AH[n]),s||(s=!kt(l)||l!==this._$AH[n]),l===qt?t=qt:t!==qt&&(t+=(null!=l?l:"")+i[n+1]),this._$AH[n]=l}s&&!o&&this.j(t)}j(t){t===qt?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=t?t:"")}}class Xt extends Gt{constructor(){super(...arguments),this.type=3}j(t){this.element[this.name]=t===qt?void 0:t}}const Yt=wt?wt.emptyScript:"";class Qt extends Gt{constructor(){super(...arguments),this.type=4}j(t){t&&t!==qt?this.element.setAttribute(this.name,Yt):this.element.removeAttribute(this.name)}}class te extends Gt{constructor(t,e,r,o,i){super(t,e,r,o,i),this.type=5}_$AI(t,e=this){var r;if((t=null!==(r=Jt(this,t,e,0))&&void 0!==r?r:qt)===Bt)return;const o=this._$AH,i=t===qt&&o!==qt||t.capture!==o.capture||t.once!==o.once||t.passive!==o.passive,s=t!==qt&&(o===qt||i);i&&this.element.removeEventListener(this.name,this,o),s&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){var e,r;"function"==typeof this._$AH?this._$AH.call(null!==(r=null===(e=this.options)||void 0===e?void 0:e.host)&&void 0!==r?r:this.element,t):this._$AH.handleEvent(t)}}class ee{constructor(t,e,r){this.element=t,this.type=6,this._$AN=void 0,this._$AM=e,this.options=r}get _$AU(){return this._$AM._$AU}_$AI(t){Jt(this,t)}}const re=bt.litHtmlPolyfillSupport;null==re||re(Wt,Zt),(null!==($t=bt.litHtmlVersions)&&void 0!==$t?$t:bt.litHtmlVersions=[]).push("2.7.4");const oe=window,ie=oe.ShadowRoot&&(void 0===oe.ShadyCSS||oe.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,se=Symbol(),ne=new WeakMap;class le{constructor(t,e,r){if(this._$cssResult$=!0,r!==se)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const e=this.t;if(ie&&void 0===t){const r=void 0!==e&&1===e.length;r&&(t=ne.get(e)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),r&&ne.set(e,t))}return t}toString(){return this.cssText}}const ae=(t,...e)=>{const r=1===t.length?t[0]:e.reduce(((e,r,o)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if("number"==typeof t)return t;throw Error("Value passed to 'css' function must be a 'css' function result: "+t+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(r)+t[o+1]),t[0]);return new le(r,t,se)},he=ie?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const r of t.cssRules)e+=r.cssText;return(t=>new le("string"==typeof t?t:t+"",void 0,se))(e)})(t):t;var ce;const de=window,ue=de.trustedTypes,pe=ue?ue.emptyScript:"",fe=de.reactiveElementPolyfillSupport,ve={toAttribute(t,e){switch(e){case Boolean:t=t?pe:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){let r=t;switch(e){case Boolean:r=null!==t;break;case Number:r=null===t?null:Number(t);break;case Object:case Array:try{r=JSON.parse(t)}catch(t){r=null}}return r}},ge=(t,e)=>e!==t&&(e==e||t==t),me={attribute:!0,type:String,converter:ve,reflect:!1,hasChanged:ge};class ye extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(t){var e;this.finalize(),(null!==(e=this.h)&&void 0!==e?e:this.h=[]).push(t)}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((e,r)=>{const o=this._$Ep(r,e);void 0!==o&&(this._$Ev.set(o,r),t.push(o))})),t}static createProperty(t,e=me){if(e.state&&(e.attribute=!1),this.finalize(),this.elementProperties.set(t,e),!e.noAccessor&&!this.prototype.hasOwnProperty(t)){const r="symbol"==typeof t?Symbol():"__"+t,o=this.getPropertyDescriptor(t,r,e);void 0!==o&&Object.defineProperty(this.prototype,t,o)}}static getPropertyDescriptor(t,e,r){return{get(){return this[e]},set(o){const i=this[t];this[e]=o,this.requestUpdate(t,i,r)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||me}static finalize(){if(this.hasOwnProperty("finalized"))return!1;this.finalized=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),void 0!==t.h&&(this.h=[...t.h]),this.elementProperties=new Map(t.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const t=this.properties,e=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const r of e)this.createProperty(r,t[r])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(t){const e=[];if(Array.isArray(t)){const r=new Set(t.flat(1/0).reverse());for(const t of r)e.unshift(he(t))}else void 0!==t&&e.push(he(t));return e}static _$Ep(t,e){const r=e.attribute;return!1===r?void 0:"string"==typeof r?r:"string"==typeof t?t.toLowerCase():void 0}u(){var t;this._$E_=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(t=this.constructor.h)||void 0===t||t.forEach((t=>t(this)))}addController(t){var e,r;(null!==(e=this._$ES)&&void 0!==e?e:this._$ES=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(r=t.hostConnected)||void 0===r||r.call(t))}removeController(t){var e;null===(e=this._$ES)||void 0===e||e.splice(this._$ES.indexOf(t)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((t,e)=>{this.hasOwnProperty(e)&&(this._$Ei.set(e,this[e]),delete this[e])}))}createRenderRoot(){var t;const e=null!==(t=this.shadowRoot)&&void 0!==t?t:this.attachShadow(this.constructor.shadowRootOptions);return((t,e)=>{ie?t.adoptedStyleSheets=e.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):e.forEach((e=>{const r=document.createElement("style"),o=oe.litNonce;void 0!==o&&r.setAttribute("nonce",o),r.textContent=e.cssText,t.appendChild(r)}))})(e,this.constructor.elementStyles),e}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostConnected)||void 0===e?void 0:e.call(t)}))}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostDisconnected)||void 0===e?void 0:e.call(t)}))}attributeChangedCallback(t,e,r){this._$AK(t,r)}_$EO(t,e,r=me){var o;const i=this.constructor._$Ep(t,r);if(void 0!==i&&!0===r.reflect){const s=(void 0!==(null===(o=r.converter)||void 0===o?void 0:o.toAttribute)?r.converter:ve).toAttribute(e,r.type);this._$El=t,null==s?this.removeAttribute(i):this.setAttribute(i,s),this._$El=null}}_$AK(t,e){var r;const o=this.constructor,i=o._$Ev.get(t);if(void 0!==i&&this._$El!==i){const t=o.getPropertyOptions(i),s="function"==typeof t.converter?{fromAttribute:t.converter}:void 0!==(null===(r=t.converter)||void 0===r?void 0:r.fromAttribute)?t.converter:ve;this._$El=i,this[i]=s.fromAttribute(e,t.type),this._$El=null}}requestUpdate(t,e,r){let o=!0;void 0!==t&&(((r=r||this.constructor.getPropertyOptions(t)).hasChanged||ge)(this[t],e)?(this._$AL.has(t)||this._$AL.set(t,e),!0===r.reflect&&this._$El!==t&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(t,r))):o=!1),!this.isUpdatePending&&o&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((t,e)=>this[e]=t)),this._$Ei=void 0);let e=!1;const r=this._$AL;try{e=this.shouldUpdate(r),e?(this.willUpdate(r),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostUpdate)||void 0===e?void 0:e.call(t)})),this.update(r)):this._$Ek()}catch(t){throw e=!1,this._$Ek(),t}e&&this._$AE(r)}willUpdate(t){}_$AE(t){var e;null===(e=this._$ES)||void 0===e||e.forEach((t=>{var e;return null===(e=t.hostUpdated)||void 0===e?void 0:e.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(t){return!0}update(t){void 0!==this._$EC&&(this._$EC.forEach(((t,e)=>this._$EO(e,this[e],t))),this._$EC=void 0),this._$Ek()}updated(t){}firstUpdated(t){}}var _e,$e;ye.finalized=!0,ye.elementProperties=new Map,ye.elementStyles=[],ye.shadowRootOptions={mode:"open"},null==fe||fe({ReactiveElement:ye}),(null!==(ce=de.reactiveElementVersions)&&void 0!==ce?ce:de.reactiveElementVersions=[]).push("1.6.1");class be extends ye{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var t,e;const r=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=r.firstChild),r}update(t){const e=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=((t,e,r)=>{var o,i;const s=null!==(o=null==r?void 0:r.renderBefore)&&void 0!==o?o:e;let n=s._$litPart$;if(void 0===n){const t=null!==(i=null==r?void 0:r.renderBefore)&&void 0!==i?i:null;s._$litPart$=n=new Zt(e.insertBefore(Rt(),t),t,void 0,null!=r?r:{})}return n._$AI(t),n})(e,this.renderRoot,this.renderOptions)}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!0)}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!1)}render(){return Bt}}be.finalized=!0,be._$litElement$=!0,null===(_e=globalThis.litElementHydrateSupport)||void 0===_e||_e.call(globalThis,{LitElement:be});const we=globalThis.litElementPolyfillSupport;null==we||we({LitElement:be}),(null!==($e=globalThis.litElementVersions)&&void 0!==$e?$e:globalThis.litElementVersions=[]).push("3.3.2");const Ae=t=>e=>"function"==typeof e?((t,e)=>(customElements.define(t,e),e))(t,e):((t,e)=>{const{kind:r,elements:o}=e;return{kind:r,elements:o,finisher(e){customElements.define(t,e)}}})(t,e),xe=(t,e)=>"method"===e.kind&&e.descriptor&&!("value"in e.descriptor)?{...e,finisher(r){r.createProperty(e.key,t)}}:{kind:"field",key:Symbol(),placement:"own",descriptor:{},originalKey:e.key,initializer(){"function"==typeof e.initializer&&(this[e.key]=e.initializer.call(this))},finisher(r){r.createProperty(e.key,t)}};function Ee(t){return(e,r)=>void 0!==r?((t,e,r)=>{e.constructor.createProperty(r,t)})(t,e,r):xe(t,e)}function Se(t){return Ee({...t,state:!0})}var Ce;null===(Ce=window.HTMLSlotElement)||void 0===Ce||Ce.prototype.assignedElements;const Pe=ae`
  #wysiwyg-editor {
    display: inline-block;
    border: none;
    padding: 4px;
    caret-color: var(--fe-caret-color, #fff);
    color: var(--fe-text-color, #f7f1ff);
    line-height: 1.1;
    width: 100%;
    height: 100%;
    border-radius: var(--fe-border-radius, 4px) var(--fe-border-radius, 4px) 0px
      0px;
    overflow: auto;
    border: 2px solid black;
    outline: 0px solid black;
    white-space: pre-wrap;
    background-color: var(--fe-background-color, #222222);
    margin: 0px;
  }

  #wysiwyg-err {
    width: 100%;
    border-radius: 0px 0px var(--fe-border-radius, 4px)
      var(--fe-border-radius, 4px);
    color: var(--fe-err-text-color, #fc514f);
    border: 2px solid black;
    /* border-top: 0px; */
    background-color: var(--fe-background-color, #222222);
    padding: 4px;
    margin: 0px 0px 8px 0px;
  }

  .wysiwyg-no-err {
    color: #098668 !important;
  }

  .wysiwygInternals.error {
    text-decoration: underline;
    -webkit-text-decoration-color: var(--fe-err-underline-color, #fc514f);
    text-decoration-color: var(--fe-err-underline-color, #fc514f);
    -webkit-text-decoration-style: wavy;
    text-decoration-style: wavy;
    text-decoration-thickness: 1px;
    text-decoration-color: var(--fe-err-underline-color, red);
  }

  .wysiwygInternals.bracket {
    color: var(--fe-bracket-color, #fc514f);
  }

  .wysiwygInternals.operator {
    font-weight: bold;
    color: var(--fe-operator-color, #fc618d);
  }

  .wysiwygInternals.variable {
    color: var(--fe-variable-color, #fc618d);
  }
`,Re=(Lt`
  <style>
    .primary-text-underlined {
      font-family: var(--theme-font);
      border: none;
      font-size: var(--secondary-font-size, 16px);
      color: var(--primary-color, #205081);
      padding: 0;
      margin: 0;
      border-radius: 0;
      min-width: max-content;
      text-transform: none;
      border-bottom: 1px solid rgba(var(--secondary-color-rgb), 0.3);
    }

    .secondary-text-underlined {
      font-family: var(--theme-font);
      border: none;
      font-size: var(--secondary-font-size, 16px);
      color: var(--secondary-color, #515151);
      margin: 0;
      padding: 0;
      border-radius: 0;
      min-width: max-content;
      text-transform: none;
      border-bottom: 1px solid rgba(var(--secondary-color-rgb), 0.3);
    }
  </style>
`,Lt`
  <style>
    .primary-text-button {
      font-family: var(--theme-font);
      border: none;
      font-size: var(--secondary-font-size, 16px);
      color: var(--primary-color, #205081);
      padding: 0 8px;
      min-width: 64px;
      height: var(--button-height, 36px);
      margin: 0;
      text-transform: none;
    }

    .secondary-text-button {
      font-family: var(--theme-font);
      border: none;
      font-size: var(--secondary-font-size, 16px);
      color: var(--secondary-color, #515151);
      padding: 0 8px;
      min-width: 64px;
      margin: 0;
      height: var(--button-height, 36px);
      text-transform: none;
    }

    .primary-text-button:hover {
      font-weight: bold;
    }

    .secondary-text-button:hover {
      font-weight: bold;
    }

    .primary-text-button[disabled], .secondary-text-button[disabled] {
        opacity: 0.5;
    }
  </style>
`);Lt`
  <style>
    .primary-outlined {
      font-family: var(--theme-font);
      border: 1px solid var(--primary-color, #205081);
      border-radius: 5px;
      font-size: var(--secondary-font-size, 16px);
      color: var(--secondary-color, #515151);
      padding: 0 var(--button-padding, 16px);
      min-width: 64px;
      margin: 0;
      height: var(--button-height, 36px);
      text-transform: none;
    }
    .primary-outlined:hover {
      background-color: var(--primary-color, #205081);
      color: var(--light-color, #fff);
    }
    .primary-colored {
      font-family: var(--theme-font);
      background-color: var(--primary-color, #205081);
      border-radius: 5px;
      font-size: var(--secondary-font-size, 16px);
      color: var(--light-color, #fff);
      margin: 0;
      padding: 0 var(--button-padding, 16px);
      min-width: 64px;
      height: var(--button-height, 36px);
      text-transform: none;
    }
    .primary-colored:hover {
      box-shadow: 0 1px 2px 1px var(--primary-color, #205081);
    }
    .primary-outlined[disabled], .primary-colored[disabled] {
        opacity: 0.5;
    }
  </style>
`,Lt`
  <style>
    .secondary-outlined {
      font-family: var(--theme-font);
      border: 1px solid rgba(var(--secondary-color-rgb), 0.3);
      border-radius: 5px;
      font-size: var(--secondary-font-size, 16px);
      color: var(--secondary-color, #515151);
      padding: 0 var(--button-padding, 16px);
      margin: 0;
      min-width: 64px;
      height: var(--button-height, 36px);
      text-transform: none;
    }

    .secondary-outlined:hover {
      background-color: var(--secondary-color, #515151);
      color: var(--light-color, #fff);
    }

    .secondary-colored {
      font-family: var(--theme-font);
      background-color: var(--secondary-color, #515151);
      border-radius: 5px;
      font-size: var(--secondary-font-size, 16px);
      color: var(--light-color, #fff);
      padding: 0 var(--button-padding, 16px);
      margin: 0;
      min-width: 64px;
      height: var(--button-height, 36px);
      text-transform: none;
    }

    .secondary-colored:hover {
      box-shadow: 0 1px 2px 1px var(--secondary-color, #515151);
    }

    .secondary-outlined[disabled], .secondary-colored[disabled] {
        opacity: 0.5;
    }
  </style>
`,Lt`
  <style>
    .alert-outlined {
      font-family: var(--theme-font);
      border: 1px solid var(--error-color);
      border-radius: 5px;
      font-size: var(--secondary-font-size, 16px);
      color: var(--error-color, #d50000);
      padding: 0 var(--button-padding, 16px);
      margin: 0;
      min-width: 64px;
      height: var(--button-height, 36px);
      text-transform: none;
    }

    .alert-outlined:hover {
      background-color: var(--error-color-l1, #db4437);
      color: var(--light-color, #fff);
    }

    .alert-colored {
      font-family: var(--theme-font);
      background-color: var(--error-color, #d50000);
      border-radius: 5px;
      font-size: var(--secondary-font-size, 16px);
      color: var(--light-color, #fff);
      padding: 0 var(--button-padding, 16px);
      margin: 0;
      min-width: 64px;
      height: var(--button-height, 36px);
      text-transform: none;
    }

    .alert-colored:hover {
      box-shadow: 0 1px 2px 1px var(--error-color, #d50000);
    }

    .alert-outlined[disabled], .alert-colored[disabled] {
        opacity: 0.5;
    }
  </style>
`,Lt`
  <style>
    .toggle-group {
      display: flex; justify-content: flex-end; align-items: center; flex-wrap: wrap;
    }

    .toggle-group .toggle:first-child{
      border-top-left-radius: 5px; border-bottom-left-radius: 5px;
    }
    .toggle-group .toggle:last-child{
      border-top-right-radius: 5px; border-bottom-right-radius: 5px;
    }

    .toggle {
      text-transform: none;
      margin: 0px;
      border-radius: 0px;
      background-color: transparent;
      border: 1px solid var(--secondary-color-l3);
      color: var(--secondary-color);
      font-size: var(--secondary-font-size, 16px);
      font-family: var(--theme-font);
      display: flex;
      justify-content: space-around;
      min-width: 64px;
      align-items: center;
    }

    .toggle.small {
      height: 30px;
      font-size: var(--tertiary-font-size, 14px);
    }

    .toggle:hover {
      box-shadow: 0 1px 2px 1px rgba(var(--secondary-color-rgb), 0.1);
    }

    .selected-toggle {
      background-color: var(--secondary-color);
      color: var(--light-color, #fff);
    }

    .toggle iron-icon{
      --iron-icon-height: var(--body-font-size, 16px);
      margin-right: 5px;
    }

    .toggle mwc-icon{
      --mdc-icon-size: var(--body-font-size, 16px);
      margin-right: 5px;
    }
  </style>
`,Lt`
  <style>
    paper-fab {
      position: fixed;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      bottom: 3%;
      right: 2%;
    }

    paper-fab[disabled], .fab[disabled] {
        opacity: 0.5;
    }

    .fab {
      font-size: var(--secondary-font-size, 16px);
      position: fixed;
      display: flex;
      justify-content: center;
      align-items: center;
      bottom: 3%;
      right: 2%;
      box-shadow: var(--paper-material-elevation-2_-_box-shadow);
      font-family: var(--theme-font);
    }

    .colored-fab {
      background-color: var(--secondary-color, #515151);
      --iron-icon-height: var(--h2-font-size, 26px);
      --iron-icon-width: var(--h2-font-size, 26px);
      color: var(--light-color, #fff);
    }

    .light-colored-fab {
      background-color: var(--light-color, #fff);
      --iron-icon-height: var(--h2-font-size, 20px);
      --iron-icon-width: var(--h2-font-size, 20px);
      color: var(--secondary-color);
      /* --iron-icon-stroke-color: var(--secondary-color); */
    }

    .light-colored-fab:hover,
    .colored-fab:hover {
      box-shadow: var(--paper-material-elevation-3_-_box-shadow);
      font-weight: bold;
    }

    .rectangular-fab {
      height:  var(--rectangular-fab-height, 50px);
      width: var(--rectangular-fab-width, 120px);
      border-radius:  var(--rectangular-fab-height, 50px);
      padding: var(--rectangular-fab-padding, 0px);
      max-height: var(--rectangular-fab-max-height, 50px);
      z-index:  var(--rectangular-fab-z-index, 1);
    }
    .small-fab {
      height: 50px;
      width: 50px;
      padding: 5px;
    }
    @media all and (max-width: 767px) {
      .rectangular-fab {
        height: var(--rectangular-fab-height, 40px);
        width: var(--rectangular-fab-width, 120px);
        border-radius: 50px;
        padding: 0;
        --fab-icon-height: 40px;
      }
    }
  </style>
`,Lt`
  <style>
    .colored-bt-spinner {
      width: 18px;
      height: 18px;
      --paper-spinner-color: var(--light-color, #fff);
      --paper-spinner-stroke-width: 3px;
      margin-right: 8px;
    }

    .secondary-outlined-bt-spinner {
      width: 18px;
      height: 18px;
      --paper-spinner-color: var(--secondary-color, #fff);
      --paper-spinner-stroke-width: 3px;
      margin-right: 8px;
    }

    .primary-outlined-bt-spinner {
      width: 18px;
      height: 18px;
      --paper-spinner-color: var(--primary-color, #fff);
      --paper-spinner-stroke-width: 3px;
      margin-right: 8px;
    }

    .button-prefix-icon {
      --iron-icon-height: var(--body-font-size, 16px);
      --mdc-icon-size: var(--body-font-size, 16px);
      margin-right: 5px;
    }
  </style>
`,Lt`
  <style>
    .small-button {
      height: 25px !important;
      width: auto !important;
      padding: 0px !important;
      font-size: var(--tertiary-font-size) !important;
    }
    @media all and (max-width: 767px) {
      .small-button{
        height: 20px !important;
      }
    }
  </style>
`,Lt`
  <custom-style>
    <style>
      paper-toggle-button {
        font-family: var(--theme-font);
        cursor: pointer;
        --paper-toggle-button-checked-button: {
          height: 15px;
          width: 50%;
          border-radius: 0;
          bottom: 2px;
          box-shadow: none;
          border-bottom-right-radius : 8px;
          border-top-right-radius: 8px;
        }
        --paper-toggle-button-unchecked-button: {
          height: 15px;
          width: 50%;
          border-radius: 0;
          bottom: 2px;
          box-shadow: none;
          border-bottom-left-radius : 8px;
          border-top-left-radius: 8px;
        }
        --paper-toggle-button-unchecked-bar: {
          height: 15px;
          bottom: 2px;
          box-shadow: none;
        }
        --paper-toggle-button-checked-bar: {
          height: 15px;
          bottom: 2px;
          box-shadow: none;
        }
        --paper-toggle-button-label-color: var(--secondary-color);
        align-items: flex-start;
      }

      paper-toggle-button.primary-colored {
        --paper-toggle-button-unchecked-bar-color: var(--secondary-color-l1);
        --paper-toggle-button-unchecked-button-color:  var(--secondary-color-l1);
        --paper-toggle-button-checked-bar-color:  var(--primary-color-l1);
        --paper-toggle-button-checked-button-color:  var(--primary-color);
      }

      paper-toggle-button.secondary-colored {
        --paper-toggle-button-unchecked-bar-color: var(--secondary-color-l2);
        --paper-toggle-button-unchecked-button-color:  var(--secondary-color-l2);
        --paper-toggle-button-checked-bar-color:  var(--secondary-color-l1);
        --paper-toggle-button-checked-button-color:  var(--secondary-color);
      }
    </style>
  </custom-style>
`;var ke=1e6,Ne="[big.js] ",Ue=Ne+"Invalid ",Oe=Ue+"decimal places",Te=Ue+"rounding mode",ze=Ne+"Division by zero",He={},Me=void 0,De=/^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;function Ie(t,e,r,o){var i=t.c;if(r===Me&&(r=t.constructor.RM),0!==r&&1!==r&&2!==r&&3!==r)throw Error(Te);if(e<1)o=3===r&&(o||!!i[0])||0===e&&(1===r&&i[0]>=5||2===r&&(i[0]>5||5===i[0]&&(o||i[1]!==Me))),i.length=1,o?(t.e=t.e-e+1,i[0]=1):i[0]=t.e=0;else if(e<i.length){if(o=1===r&&i[e]>=5||2===r&&(i[e]>5||5===i[e]&&(o||i[e+1]!==Me||1&i[e-1]))||3===r&&(o||!!i[0]),i.length=e,o)for(;++i[--e]>9;)if(i[e]=0,0===e){++t.e,i.unshift(1);break}for(e=i.length;!i[--e];)i.pop()}return t}function je(t,e,r){var o=t.e,i=t.c.join(""),s=i.length;if(e)i=i.charAt(0)+(s>1?"."+i.slice(1):"")+(o<0?"e":"e+")+o;else if(o<0){for(;++o;)i="0"+i;i="0."+i}else if(o>0)if(++o>s)for(o-=s;o--;)i+="0";else o<s&&(i=i.slice(0,o)+"."+i.slice(o));else s>1&&(i=i.charAt(0)+"."+i.slice(1));return t.s<0&&r?"-"+i:i}He.abs=function(){var t=new this.constructor(this);return t.s=1,t},He.cmp=function(t){var e,r=this,o=r.c,i=(t=new r.constructor(t)).c,s=r.s,n=t.s,l=r.e,a=t.e;if(!o[0]||!i[0])return o[0]?s:i[0]?-n:0;if(s!=n)return s;if(e=s<0,l!=a)return l>a^e?1:-1;for(n=(l=o.length)<(a=i.length)?l:a,s=-1;++s<n;)if(o[s]!=i[s])return o[s]>i[s]^e?1:-1;return l==a?0:l>a^e?1:-1},He.div=function(t){var e=this,r=e.constructor,o=e.c,i=(t=new r(t)).c,s=e.s==t.s?1:-1,n=r.DP;if(n!==~~n||n<0||n>ke)throw Error(Oe);if(!i[0])throw Error(ze);if(!o[0])return t.s=s,t.c=[t.e=0],t;var l,a,h,c,d,u=i.slice(),p=l=i.length,f=o.length,v=o.slice(0,l),g=v.length,m=t,y=m.c=[],_=0,$=n+(m.e=e.e-t.e)+1;for(m.s=s,s=$<0?0:$,u.unshift(0);g++<l;)v.push(0);do{for(h=0;h<10;h++){if(l!=(g=v.length))c=l>g?1:-1;else for(d=-1,c=0;++d<l;)if(i[d]!=v[d]){c=i[d]>v[d]?1:-1;break}if(!(c<0))break;for(a=g==l?i:u;g;){if(v[--g]<a[g]){for(d=g;d&&!v[--d];)v[d]=9;--v[d],v[g]+=10}v[g]-=a[g]}for(;!v[0];)v.shift()}y[_++]=c?h:++h,v[0]&&c?v[g]=o[p]||0:v=[o[p]]}while((p++<f||v[0]!==Me)&&s--);return y[0]||1==_||(y.shift(),m.e--,$--),_>$&&Ie(m,$,r.RM,v[0]!==Me),m},He.eq=function(t){return 0===this.cmp(t)},He.gt=function(t){return this.cmp(t)>0},He.gte=function(t){return this.cmp(t)>-1},He.lt=function(t){return this.cmp(t)<0},He.lte=function(t){return this.cmp(t)<1},He.minus=He.sub=function(t){var e,r,o,i,s=this,n=s.constructor,l=s.s,a=(t=new n(t)).s;if(l!=a)return t.s=-a,s.plus(t);var h=s.c.slice(),c=s.e,d=t.c,u=t.e;if(!h[0]||!d[0])return d[0]?t.s=-a:h[0]?t=new n(s):t.s=1,t;if(l=c-u){for((i=l<0)?(l=-l,o=h):(u=c,o=d),o.reverse(),a=l;a--;)o.push(0);o.reverse()}else for(r=((i=h.length<d.length)?h:d).length,l=a=0;a<r;a++)if(h[a]!=d[a]){i=h[a]<d[a];break}if(i&&(o=h,h=d,d=o,t.s=-t.s),(a=(r=d.length)-(e=h.length))>0)for(;a--;)h[e++]=0;for(a=e;r>l;){if(h[--r]<d[r]){for(e=r;e&&!h[--e];)h[e]=9;--h[e],h[r]+=10}h[r]-=d[r]}for(;0===h[--a];)h.pop();for(;0===h[0];)h.shift(),--u;return h[0]||(t.s=1,h=[u=0]),t.c=h,t.e=u,t},He.mod=function(t){var e,r=this,o=r.constructor,i=r.s,s=(t=new o(t)).s;if(!t.c[0])throw Error(ze);return r.s=t.s=1,e=1==t.cmp(r),r.s=i,t.s=s,e?new o(r):(i=o.DP,s=o.RM,o.DP=o.RM=0,r=r.div(t),o.DP=i,o.RM=s,this.minus(r.times(t)))},He.neg=function(){var t=new this.constructor(this);return t.s=-t.s,t},He.plus=He.add=function(t){var e,r,o,i=this,s=i.constructor;if(t=new s(t),i.s!=t.s)return t.s=-t.s,i.minus(t);var n=i.e,l=i.c,a=t.e,h=t.c;if(!l[0]||!h[0])return h[0]||(l[0]?t=new s(i):t.s=i.s),t;if(l=l.slice(),e=n-a){for(e>0?(a=n,o=h):(e=-e,o=l),o.reverse();e--;)o.push(0);o.reverse()}for(l.length-h.length<0&&(o=h,h=l,l=o),e=h.length,r=0;e;l[e]%=10)r=(l[--e]=l[e]+h[e]+r)/10|0;for(r&&(l.unshift(r),++a),e=l.length;0===l[--e];)l.pop();return t.c=l,t.e=a,t},He.pow=function(t){var e=this,r=new e.constructor("1"),o=r,i=t<0;if(t!==~~t||t<-1e6||t>1e6)throw Error(Ue+"exponent");for(i&&(t=-t);1&t&&(o=o.times(e)),t>>=1;)e=e.times(e);return i?r.div(o):o},He.prec=function(t,e){if(t!==~~t||t<1||t>ke)throw Error(Ue+"precision");return Ie(new this.constructor(this),t,e)},He.round=function(t,e){if(t===Me)t=0;else if(t!==~~t||t<-ke||t>ke)throw Error(Oe);return Ie(new this.constructor(this),t+this.e+1,e)},He.sqrt=function(){var t,e,r,o=this,i=o.constructor,s=o.s,n=o.e,l=new i("0.5");if(!o.c[0])return new i(o);if(s<0)throw Error(Ne+"No square root");0===(s=Math.sqrt(o+""))||s===1/0?((e=o.c.join("")).length+n&1||(e+="0"),n=((n+1)/2|0)-(n<0||1&n),t=new i(((s=Math.sqrt(e))==1/0?"5e":(s=s.toExponential()).slice(0,s.indexOf("e")+1))+n)):t=new i(s+""),n=t.e+(i.DP+=4);do{r=t,t=l.times(r.plus(o.div(r)))}while(r.c.slice(0,n).join("")!==t.c.slice(0,n).join(""));return Ie(t,(i.DP-=4)+t.e+1,i.RM)},He.times=He.mul=function(t){var e,r=this,o=r.constructor,i=r.c,s=(t=new o(t)).c,n=i.length,l=s.length,a=r.e,h=t.e;if(t.s=r.s==t.s?1:-1,!i[0]||!s[0])return t.c=[t.e=0],t;for(t.e=a+h,n<l&&(e=i,i=s,s=e,h=n,n=l,l=h),e=new Array(h=n+l);h--;)e[h]=0;for(a=l;a--;){for(l=0,h=n+a;h>a;)l=e[h]+s[a]*i[h-a-1]+l,e[h--]=l%10,l=l/10|0;e[h]=l}for(l?++t.e:e.shift(),a=e.length;!e[--a];)e.pop();return t.c=e,t},He.toExponential=function(t,e){var r=this,o=r.c[0];if(t!==Me){if(t!==~~t||t<0||t>ke)throw Error(Oe);for(r=Ie(new r.constructor(r),++t,e);r.c.length<t;)r.c.push(0)}return je(r,!0,!!o)},He.toFixed=function(t,e){var r=this,o=r.c[0];if(t!==Me){if(t!==~~t||t<0||t>ke)throw Error(Oe);for(t=t+(r=Ie(new r.constructor(r),t+r.e+1,e)).e+1;r.c.length<t;)r.c.push(0)}return je(r,!1,!!o)},He[Symbol.for("nodejs.util.inspect.custom")]=He.toJSON=He.toString=function(){var t=this,e=t.constructor;return je(t,t.e<=e.NE||t.e>=e.PE,!!t.c[0])},He.toNumber=function(){var t=Number(je(this,!0,!0));if(!0===this.constructor.strict&&!this.eq(t.toString()))throw Error(Ne+"Imprecise conversion");return t},He.toPrecision=function(t,e){var r=this,o=r.constructor,i=r.c[0];if(t!==Me){if(t!==~~t||t<1||t>ke)throw Error(Ue+"precision");for(r=Ie(new o(r),t,e);r.c.length<t;)r.c.push(0)}return je(r,t<=r.e||r.e<=o.NE||r.e>=o.PE,!!i)},He.valueOf=function(){var t=this,e=t.constructor;if(!0===e.strict)throw Error(Ne+"valueOf disallowed");return je(t,t.e<=e.NE||t.e>=e.PE,!0)};var Le=function t(){function e(r){var o=this;if(!(o instanceof e))return r===Me?t():new e(r);if(r instanceof e)o.s=r.s,o.e=r.e,o.c=r.c.slice();else{if("string"!=typeof r){if(!0===e.strict&&"bigint"!=typeof r)throw TypeError(Ue+"value");r=0===r&&1/r<0?"-0":String(r)}!function(t,e){var r,o,i;if(!De.test(e))throw Error(Ue+"number");for(t.s="-"==e.charAt(0)?(e=e.slice(1),-1):1,(r=e.indexOf("."))>-1&&(e=e.replace(".","")),(o=e.search(/e/i))>0?(r<0&&(r=o),r+=+e.slice(o+1),e=e.substring(0,o)):r<0&&(r=e.length),i=e.length,o=0;o<i&&"0"==e.charAt(o);)++o;if(o==i)t.c=[t.e=0];else{for(;i>0&&"0"==e.charAt(--i););for(t.e=r-o-1,t.c=[],r=0;o<=i;)t.c[r++]=+e.charAt(o++)}}(o,r)}o.constructor=e}return e.prototype=He,e.DP=20,e.RM=1,e.NE=-7,e.PE=21,e.strict=!1,e.roundDown=0,e.roundHalfUp=1,e.roundHalfEven=2,e.roundUp=3,e}();const Be=Le;class qe{constructor(){this._inner=[]}push(t){this._inner.push(t)}pop(){return this._inner.pop()}top(){return this._inner.at(-1)}isEmpty(){return 0==this._inner.length}print(){console.log(this._inner)}}class Ve{constructor(){this._inner={},this._head=0,this._tail=0}enqueue(t){this._inner[this._tail]=t,this._tail++}dequeue(){if(this._tail===this._head)return;const t=this._inner[this._head];return delete this._inner[this._head],this._head++,t}peek(){return this._inner[this._head]}isEmpty(){return this._head==this._tail}print(){console.log(this._inner)}}var Fe,We;!function(t){t[t.VARIABLE=0]="VARIABLE",t[t.OPERATOR=1]="OPERATOR",t[t.UNDEFINED=2]="UNDEFINED"}(Fe||(Fe={}));class Je{constructor(t,e){this._mininumSuggestionLength=e>0?e:1,this._trie=new Ke;for(let e of t)this.insert(e[0])}insert(t,e=-1,r=void 0){-1!=e?e!=t.length?(r.getChild(t[e])||null==r||r.addChild(t[e]),this.insert(t,e+1,r.getChild(t[e]))):null==r||r.addChild("\0"):this.insert(t,0,this._trie)}getRecommendation(t){if(t.length<this._mininumSuggestionLength)return null;let e=[],r=0,o=this._trie;for(;o&&r<t.length;)o=o.getChild(t[r]),r++;return o?(this._traverseAndGet(e,o,t),0==e.length||1==e.length&&e[0]==t?null:e):null}_traverseAndGet(t,e,r,o=""){for(let i of e.children)"\0"==i[0]&&t.push(r+o),this._traverseAndGet(t,i[1],r,o+i[0])}}class Ke{constructor(){this._children=new Map}get children(){return this._children}getChild(t){return this._children.get(t)}addChild(t){this._children.set(t,new Ke)}}class Ze{constructor(t,e){this.mathematicalOperators=new Set(["^","+","-","*","/"]),this.operatorPrecedence={"^":3,"/":2,"*":2,"+":1,"-":1},this.variables=t,this._recommender=new Je(this.variables,e)}parseInput(t,e=null,r=null){let o=t.split(/([-+(),*/:?\s])/g),i=new qe,s="",n=Fe.VARIABLE,l=0,a=0,h="",c={recommendations:null,formattedContent:null,formattedString:null,newCursorPosition:null!=e?e:-1,errorStr:null};o.forEach((o=>{let d=this.variables.has(o)||r&&this.variables.has(r)||!Number.isNaN(Number(o)),u=this.mathematicalOperators.has(o),p=""==o.trim(),f="("==o||")"==o,v=!1;if(p)return s=`${s}${o}`,void(a+=o.length);a<=e&&a+o.length>=e&&!c.recommendations&&(r&&(c.newCursorPosition=Math.min(c.newCursorPosition+r.length-o.length,t.length+r.length-o.length),o=r,r=null,v=!0),c.recommendations=this._recommender.getRecommendation(o),console.log(c.recommendations));let g="";"("==o?(l++,i.push(a),g+=" bracket"):")"==o?(i.pop(),l--,g+=" bracket"):u&&(g+=" operator"),(n==Fe.UNDEFINED||n==Fe.VARIABLE&&!d&&!f&&("-"!=o&&"+"!=o||!this.mathematicalOperators.has(h))||n==Fe.OPERATOR&&!u&&")"!=o||")"==o&&"("==h||!(d||u||f)||d&&"/"==h&&(0==this.variables.get(o)||0==Number(o)))&&(g+=" error"),c.errorStr||(l<0?(c.errorStr=`Unexpected ')' at pos: ${a}`,n=Fe.UNDEFINED):n!=Fe.VARIABLE||d||"("==o||("-"==o||"+"==o)&&this.mathematicalOperators.has(h)?n!=Fe.OPERATOR||u||")"==o?d||u||f?!d||"/"!=h||0!=this.variables.get(o)&&0!=Number(o)?"("==h&&")"==o&&(c.errorStr=`Empty brackets at position ${a}`,n=Fe.UNDEFINED):(c.errorStr=`Division by zero at pos: ${a}`,n=Fe.UNDEFINED):(c.errorStr=`Unknown word at pos: ${a}`,n=Fe.UNDEFINED):(c.errorStr=`Expected mathematical operator at pos: ${a}`,n=Fe.UNDEFINED):(c.errorStr=`Expected variable/number at pos: ${a}`,n=Fe.UNDEFINED)),n!=Fe.UNDEFINED&&("("==o||u?n=Fe.VARIABLE:(")"==o||d)&&(n=Fe.OPERATOR)),s=v?`${s}${o}`:`${s}<span class="wysiwygInternals ${g}">${o}</span>`,a+=o.length,h=o})),this.mathematicalOperators.has(h)&&(c.errorStr="Unexpected ending of formula.");const d=(new DOMParser).parseFromString(s,"text/html");return c.formattedContent=d.querySelector("body"),c.formattedString=s,i.isEmpty()||(c.errorStr=`Unclosed '(' at position: ${i.top()}`),c}buildRPN(t){if(this.parseInput(t).errorStr)return null;const e=t.split(/([-+(),*/:?\s])/g).filter((t=>!/\s+/.test(t)&&""!==t));let r="",o=null;const i=[];for(const t of e)"+"!=t&&"-"!=t||!this.mathematicalOperators.has(r)?o?(i.push(o+t),o=null):i.push(t):o=t,r=t;const s=new qe,n=new Ve;for(const t of i)if("("==t)s.push("(");else if(")"==t){for(;"("!=s.top();)n.enqueue(s.pop());s.pop()}else if(this.mathematicalOperators.has(t)){for(;this.mathematicalOperators.has(s.top())&&this.operatorPrecedence[t]<=this.operatorPrecedence[s.top()];)n.enqueue(s.pop());s.push(t)}else Number.isNaN(t)||""==t||n.enqueue(t);for(;s.top();)n.enqueue(s.pop());return n}addParentheses(t){const e=this.buildRPN(t);if(!e)return null;const r=[];for(;!e.isEmpty();)r.push(e.dequeue());let o=new qe,i=new qe;if(r.forEach((t=>{let e,r;if(this.variables.has(t)||!isNaN(parseFloat(t))&&isFinite(parseFloat(t)))i.push(t),o.push(null);else{if(!Object.keys(this.operatorPrecedence).includes(t))throw`${t} is not a recognized symbol`;{let[s,n,l,a]=[i.pop(),i.pop(),o.pop(),o.pop()];e=this.operatorPrecedence[a]<=this.operatorPrecedence[t]||this.operatorPrecedence[a]===this.operatorPrecedence[t]&&["/","-"].includes(t)?`(${n})`:n,r=this.operatorPrecedence[l]<=this.operatorPrecedence[t]||this.operatorPrecedence[l]===this.operatorPrecedence[t]&&["/","-"].includes(t)?`(${s})`:s,i.push(`${e} ${t} ${r}`),o.push(t)}}})),i.isEmpty())throw`${r} is not a correct RPN`;return i.pop()}calculate(t){var e,r,o;let i=this.buildRPN(t);if(!i)return;let s=new qe;for(;!i.isEmpty();){const t=i.dequeue();if(this.mathematicalOperators.has(t)){let e=t,r=s.pop(),o=s.pop();try{switch(e){case"+":s.push(Be(o).add(Be(r)));break;case"-":s.push(Be(o).sub(Be(r)));break;case"*":s.push(Be(o).mul(Be(r)));break;case"/":s.push(Be(o).div(Be(r)));break;case"^":s.push(Be(o).pow(Be(r).toNumber()))}}catch(t){return}}else s.push(Be(Number.parseFloat(null!==(r=null===(e=this.variables.get(t))||void 0===e?void 0:e.toString())&&void 0!==r?r:t)))}return null===(o=s.top())||void 0===o?void 0:o.toNumber()}}class Ge{static getCurrentCursorPosition(t){var e,r;let o,i=window.getSelection(),s=-1;if((null==i?void 0:i.focusNode)&&Ge._isChildOf(i.focusNode,t))for(o=i.focusNode,s=i.focusOffset;o&&o!==t;)if(o.previousSibling)o=o.previousSibling,s+=null!==(r=null===(e=o.textContent)||void 0===e?void 0:e.length)&&void 0!==r?r:0;else if(o=o.parentNode,null===o)break;return s}static setCurrentCursorPosition(t,e){if(t>=0){var r=window.getSelection();let o=Ge._createRange(e,{count:t},void 0);o&&(o.collapse(!1),null==r||r.removeAllRanges(),null==r||r.addRange(o))}}static _createRange(t,e,r){if(r||((r=document.createRange()).selectNode(t),r.setStart(t,0)),0===e.count)r.setEnd(t,e.count);else if(t&&e.count>0)if(t.nodeType===Node.TEXT_NODE)t.textContent.length<e.count?e.count-=t.textContent.length:(r.setEnd(t,e.count),e.count=0);else for(var o=0;o<t.childNodes.length&&(r=Ge._createRange(t.childNodes[o],e,r),0!==e.count);o++);return r}static _isChildOf(t,e){for(;null!==t;){if(t===e)return!0;t=t.parentNode}return!1}static getCursorRect(){var t,e;return null===(e=null===(t=window.getSelection())||void 0===t?void 0:t.getRangeAt(0))||void 0===e?void 0:e.getClientRects()[0]}}We=Ge,Ge.getCaret=t=>{const e=window.getSelection().getRangeAt(0),r=e.cloneRange();return r.selectNodeContents(t),r.setEnd(e.endContainer,e.endOffset),r.toString().length},Ge.setCaret=(t,e)=>{for(const r of e.childNodes)if(r.nodeType==Node.TEXT_NODE){if(r.length>=t){const e=document.createRange(),o=window.getSelection();return e.setStart(r,t),e.collapse(!0),o.removeAllRanges(),o.addRange(e),-1}t-=r.length}else if((t=We.setCaret(t,r))<0)return t;return t};var Xe=function(t,e,r,o){var i,s=arguments.length,n=s<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(t,e,r,o);else for(var l=t.length-1;l>=0;l--)(i=t[l])&&(n=(s<3?i(n):s>3?i(e,r,n):i(e,r))||n);return s>3&&n&&Object.defineProperty(e,r,n),n};let Ye=class extends be{constructor(){super(...arguments),this.recommendations=[],this.onClickRecommendation=t=>{}}handleKeydown(t,e){"Enter"==t.code&&(t.preventDefault(),t.stopPropagation(),this.onClickRecommendation(e))}render(){return Lt`
      <ul class="wysiwyg-suggestion-menu">
        ${this.recommendations.map((t=>Lt`<li
            tabindex="0"
            @click=${e=>this.onClickRecommendation(t)}
            @keydown=${e=>this.handleKeydown(e,t)}
          >
            ${t}
          </li>`))}
      </ul>
    `}};Ye.styles=ae`
    ul {
      border: 1px solid var(--fe-suggestion-color, white);
      color: var(--fe-suggestion-color, #bab6c0);
      background-color: var(--fe-suggestion-background-color, #363537);
      box-sizing: border-box;
      width: fit-content;
      list-style-type: none;
      padding: 4px 0px;
      margin: 2px;
    }

    li {
      margin: 0px;
      padding: 2px 6px;
      cursor: pointer;
    }

    li:focus-visible {
      /* outline: 1px solid red; */
      outline: 0px;
      color: var(--fe-suggestion-focus-color, #fce566);
      background-color: var(--fe-suggestion-focus-background-color, #69676c);
    }
  `,Xe([Ee()],Ye.prototype,"recommendations",void 0),Xe([Ee()],Ye.prototype,"onClickRecommendation",void 0),Ye=Xe([Ae("suggestion-menu")],Ye);var Qe=function(t,e,r,o){var i,s=arguments.length,n=s<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(t,e,r,o);else for(var l=t.length-1;l>=0;l--)(i=t[l])&&(n=(s<3?i(n):s>3?i(e,r,n):i(e,r))||n);return s>3&&n&&Object.defineProperty(e,r,n),n};let tr=class extends be{constructor(){super(),this._content="",this._formattedContent=null,this._recommendations=null,this._errorStr=null,this._calculatedResult=null,this.currentCursorPosition=null,this.currentCursorRect=void 0,this.lastInputType="undef",this.variables=new Map,this.minSuggestionLen=2,this._parser=new Ze(this.variables,this.minSuggestionLen)}firstUpdated(t){this._parser=new Ze(this.variables,this.minSuggestionLen)}handleChange(t){t.preventDefault(),this.lastInputType=t.inputType,this._content=t.target.innerText,this.parseInput(),t.target.focus()}handleTab(t){var e;"Tab"==t.code&&1==(null===(e=this._recommendations)||void 0===e?void 0:e.length)&&(t.preventDefault(),this.parseInput(this._recommendations[0]))}onClickRecommendation(t){document.getElementById("wysiwyg-editor")&&(this.parseInput(t),this.currentCursorPosition=null)}parseInput(t=null){let e=document.getElementById("wysiwyg-editor");if(!e)return;this.currentCursorPosition=t?this.currentCursorPosition:Ge.getCaret(e);const r=this._parser.parseInput(this._content,this.currentCursorPosition,t);this._recommendations=r.recommendations,this._formattedContent=r.formattedContent,this._errorStr=r.errorStr,("insertCompositionText"!=this.lastInputType||t)&&(e.innerHTML=r.formattedString),this._content=e.innerText,t&&(this._recommendations=null,this.currentCursorPosition=r.newCursorPosition),Ge.setCaret(this.currentCursorPosition,e),null==e||e.focus(),this.currentCursorRect=Ge.getCursorRect(),this.requestUpdate()}requestCalculate(){var t;if(this._parser.parseInput(this._content).errorStr)return;const e=this._parser.calculate(this._content);this._content=null!==(t=this._parser.addParentheses(this._content))&&void 0!==t?t:this._content,this.parseInput(),this._calculatedResult=null!=e?e:NaN,this._errorStr=null==e?"Division by zero encountered":this._errorStr,this._recommendations=null,this.requestUpdate()}requestFormat(){var t;this._content=null!==(t=this._parser.addParentheses(this._content))&&void 0!==t?t:this._content,this.parseInput(),this._recommendations=null,this.requestUpdate()}createRenderRoot(){return this}render(){var t,e,r,o,i;return Lt`
      <style>
        ${Pe}
        ${Re}
      </style>
      <div
        contenteditable
        id="wysiwyg-editor"
        spellcheck="false"
        autocomplete="off"
        @input=${this.handleChange}
        @keydown=${this.handleTab}
      ></div>
      ${this._recommendations?Lt` <suggestion-menu
            style="
              position: absolute; 
              left: ${(null===(t=this.currentCursorRect)||void 0===t?void 0:t.left)+"px"}; 
              top: ${(null!==(r=null===(e=this.currentCursorRect)||void 0===e?void 0:e.top)&&void 0!==r?r:0)+window.scrollY+"px"};
            "
            .recommendations=${this._recommendations}
            .onClickRecommendation=${t=>this.onClickRecommendation(t)}
          ></suggestion-menu>`:Lt``}
      <div id="wysiwyg-err" class="${null!==(o=this._errorStr)&&void 0!==o?o:"wysiwyg-no-err"}">
        ${null!==(i=this._errorStr)&&void 0!==i?i:"No Errors"}
      </div>
      <button class="primary-text-button" @click=${this.requestCalculate}>
        Calculate
      </button>
      <button class="primary-text-button" @click=${this.requestFormat}>
        Format
      </button>
      <p>${this._calculatedResult}</p>
    `}};Qe([Se()],tr.prototype,"_content",void 0),Qe([Se()],tr.prototype,"_formattedContent",void 0),Qe([Se()],tr.prototype,"_recommendations",void 0),Qe([Se()],tr.prototype,"_errorStr",void 0),Qe([Se()],tr.prototype,"_calculatedResult",void 0),Qe([Se()],tr.prototype,"currentCursorPosition",void 0),Qe([Se()],tr.prototype,"currentCursorRect",void 0),Qe([Se()],tr.prototype,"lastInputType",void 0),Qe([Ee({type:Map,converter:{fromAttribute:t=>{if(t)return new Map(JSON.parse(t))},toAttribute:t=>JSON.stringify(Array.from(t.entries()))}})],tr.prototype,"variables",void 0),Qe([Ee()],tr.prototype,"minSuggestionLen",void 0),tr=Qe([Ae("formula-editor")],tr);let er=class extends rt{constructor(){super(...arguments),this.fm=new tr}render(){M` <formula-editor></formula-editor> `}};var rr;er=function(t,e,r,o){var i,s=arguments.length,n=s<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(t,e,r,o);else for(var l=t.length-1;l>=0;l--)(i=t[l])&&(n=(s<3?i(n):s>3?i(e,r,n):i(e,r))||n);return s>3&&n&&Object.defineProperty(e,r,n),n}([(rr="showcase-gallery",t=>"function"==typeof t?((t,e)=>(customElements.define(t,e),e))(rr,t):((t,e)=>{const{kind:r,elements:o}=e;return{kind:r,elements:o,finisher(e){customElements.define(t,e)}}})(rr,t))],er)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Y2VzIjpbIndlYnBhY2s6Ly9AZnctY29tcG9uZW50cy9mb3JtdWxhLWVkaXRvci8uL25vZGVfbW9kdWxlcy9AbGl0L3JlYWN0aXZlLWVsZW1lbnQvY3NzLXRhZy5qcyIsIndlYnBhY2s6Ly9AZnctY29tcG9uZW50cy9mb3JtdWxhLWVkaXRvci8uL25vZGVfbW9kdWxlcy9AbGl0L3JlYWN0aXZlLWVsZW1lbnQvcmVhY3RpdmUtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9AZnctY29tcG9uZW50cy9mb3JtdWxhLWVkaXRvci8uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9saXQtaHRtbC5qcyIsIndlYnBhY2s6Ly9AZnctY29tcG9uZW50cy9mb3JtdWxhLWVkaXRvci8uL25vZGVfbW9kdWxlcy9saXQtZWxlbWVudC9saXQtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9AZnctY29tcG9uZW50cy9mb3JtdWxhLWVkaXRvci8uL25vZGVfbW9kdWxlcy9AbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9xdWVyeS1hc3NpZ25lZC1lbGVtZW50cy5qcyIsIndlYnBhY2s6Ly9AZnctY29tcG9uZW50cy9mb3JtdWxhLWVkaXRvci8uL25vZGVfbW9kdWxlcy9saXQtZWxlbWVudC9pbmRleC5qcyIsIndlYnBhY2s6Ly9AZnctY29tcG9uZW50cy9mb3JtdWxhLWVkaXRvci8uLi9ub2RlX21vZHVsZXMvbGl0L25vZGVfbW9kdWxlcy9AbGl0L3JlYWN0aXZlLWVsZW1lbnQvY3NzLXRhZy5qcyIsIndlYnBhY2s6Ly9AZnctY29tcG9uZW50cy9mb3JtdWxhLWVkaXRvci8uLi9ub2RlX21vZHVsZXMvbGl0L25vZGVfbW9kdWxlcy9AbGl0L3JlYWN0aXZlLWVsZW1lbnQvcmVhY3RpdmUtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9AZnctY29tcG9uZW50cy9mb3JtdWxhLWVkaXRvci8uLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGl0LWh0bWwuanMiLCJ3ZWJwYWNrOi8vQGZ3LWNvbXBvbmVudHMvZm9ybXVsYS1lZGl0b3IvLi4vbm9kZV9tb2R1bGVzL2xpdC1lbGVtZW50L25vZGVfbW9kdWxlcy9AbGl0L3JlYWN0aXZlLWVsZW1lbnQvY3NzLXRhZy5qcyIsIndlYnBhY2s6Ly9AZnctY29tcG9uZW50cy9mb3JtdWxhLWVkaXRvci8uLi9ub2RlX21vZHVsZXMvbGl0LWVsZW1lbnQvbm9kZV9tb2R1bGVzL0BsaXQvcmVhY3RpdmUtZWxlbWVudC9yZWFjdGl2ZS1lbGVtZW50LmpzIiwid2VicGFjazovL0Bmdy1jb21wb25lbnRzL2Zvcm11bGEtZWRpdG9yLy4uL25vZGVfbW9kdWxlcy9saXQtZWxlbWVudC9saXQtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9AZnctY29tcG9uZW50cy9mb3JtdWxhLWVkaXRvci8uLi9ub2RlX21vZHVsZXMvbGl0L25vZGVfbW9kdWxlcy9AbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9jdXN0b20tZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9AZnctY29tcG9uZW50cy9mb3JtdWxhLWVkaXRvci8uLi9ub2RlX21vZHVsZXMvbGl0L25vZGVfbW9kdWxlcy9AbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9AZnctY29tcG9uZW50cy9mb3JtdWxhLWVkaXRvci8uLi9ub2RlX21vZHVsZXMvbGl0L25vZGVfbW9kdWxlcy9AbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9zdGF0ZS5qcyIsIndlYnBhY2s6Ly9AZnctY29tcG9uZW50cy9mb3JtdWxhLWVkaXRvci8uLi9ub2RlX21vZHVsZXMvbGl0L25vZGVfbW9kdWxlcy9AbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9xdWVyeS1hc3NpZ25lZC1lbGVtZW50cy5qcyIsIndlYnBhY2s6Ly9AZnctY29tcG9uZW50cy9mb3JtdWxhLWVkaXRvci8uLi9wYWNrYWdlcy9mb3JtdWxhLWVkaXRvci9zcmMvc3R5bGVzL2Zvcm11bGEtZWRpdG9yLXN0eWxlcy5qcy50cyIsIndlYnBhY2s6Ly9AZnctY29tcG9uZW50cy9mb3JtdWxhLWVkaXRvci8uLi9wYWNrYWdlcy9zdHlsZXMvc3JjL2J1dHRvbi1zdHlsZXMuanMudHMiLCJ3ZWJwYWNrOi8vQGZ3LWNvbXBvbmVudHMvZm9ybXVsYS1lZGl0b3IvLi4vbm9kZV9tb2R1bGVzL2JpZy5qcy9iaWcubWpzIiwid2VicGFjazovL0Bmdy1jb21wb25lbnRzL2Zvcm11bGEtZWRpdG9yLy4uL3BhY2thZ2VzL2Zvcm11bGEtZWRpdG9yL3NyYy9oZWxwZXJzLmpzLnRzIiwid2VicGFjazovL0Bmdy1jb21wb25lbnRzL2Zvcm11bGEtZWRpdG9yLy4uL3BhY2thZ2VzL2Zvcm11bGEtZWRpdG9yL3NyYy9yZWNvbW1lbmRvci5qcy50cyIsIndlYnBhY2s6Ly9AZnctY29tcG9uZW50cy9mb3JtdWxhLWVkaXRvci8uLi9wYWNrYWdlcy9mb3JtdWxhLWVkaXRvci9zcmMvcGFyc2VyLmpzLnRzIiwid2VicGFjazovL0Bmdy1jb21wb25lbnRzL2Zvcm11bGEtZWRpdG9yLy4uL3BhY2thZ2VzL2Zvcm11bGEtZWRpdG9yL3NyYy9jdXJzb3IuanMudHMiLCJ3ZWJwYWNrOi8vQGZ3LWNvbXBvbmVudHMvZm9ybXVsYS1lZGl0b3IvLi4vcGFja2FnZXMvZm9ybXVsYS1lZGl0b3Ivc3JjL3N1Z2dlc3Rpb24tbWVudS5qcy50cyIsIndlYnBhY2s6Ly9AZnctY29tcG9uZW50cy9mb3JtdWxhLWVkaXRvci8uLi9wYWNrYWdlcy9mb3JtdWxhLWVkaXRvci9zcmMvZm9ybXVsYS1lZGl0b3IudHMiLCJ3ZWJwYWNrOi8vQGZ3LWNvbXBvbmVudHMvZm9ybXVsYS1lZGl0b3IvLi9zcmMvc2hvd2Nhc2UudHMiLCJ3ZWJwYWNrOi8vQGZ3LWNvbXBvbmVudHMvZm9ybXVsYS1lZGl0b3IvLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvY3VzdG9tLWVsZW1lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG5jb25zdCB0PXdpbmRvdyxlPXQuU2hhZG93Um9vdCYmKHZvaWQgMD09PXQuU2hhZHlDU1N8fHQuU2hhZHlDU1MubmF0aXZlU2hhZG93KSYmXCJhZG9wdGVkU3R5bGVTaGVldHNcImluIERvY3VtZW50LnByb3RvdHlwZSYmXCJyZXBsYWNlXCJpbiBDU1NTdHlsZVNoZWV0LnByb3RvdHlwZSxzPVN5bWJvbCgpLG49bmV3IFdlYWtNYXA7Y2xhc3Mgb3tjb25zdHJ1Y3Rvcih0LGUsbil7aWYodGhpcy5fJGNzc1Jlc3VsdCQ9ITAsbiE9PXMpdGhyb3cgRXJyb3IoXCJDU1NSZXN1bHQgaXMgbm90IGNvbnN0cnVjdGFibGUuIFVzZSBgdW5zYWZlQ1NTYCBvciBgY3NzYCBpbnN0ZWFkLlwiKTt0aGlzLmNzc1RleHQ9dCx0aGlzLnQ9ZX1nZXQgc3R5bGVTaGVldCgpe2xldCB0PXRoaXMubztjb25zdCBzPXRoaXMudDtpZihlJiZ2b2lkIDA9PT10KXtjb25zdCBlPXZvaWQgMCE9PXMmJjE9PT1zLmxlbmd0aDtlJiYodD1uLmdldChzKSksdm9pZCAwPT09dCYmKCh0aGlzLm89dD1uZXcgQ1NTU3R5bGVTaGVldCkucmVwbGFjZVN5bmModGhpcy5jc3NUZXh0KSxlJiZuLnNldChzLHQpKX1yZXR1cm4gdH10b1N0cmluZygpe3JldHVybiB0aGlzLmNzc1RleHR9fWNvbnN0IHI9dD0+bmV3IG8oXCJzdHJpbmdcIj09dHlwZW9mIHQ/dDp0K1wiXCIsdm9pZCAwLHMpLGk9KHQsLi4uZSk9Pntjb25zdCBuPTE9PT10Lmxlbmd0aD90WzBdOmUucmVkdWNlKCgoZSxzLG4pPT5lKyh0PT57aWYoITA9PT10Ll8kY3NzUmVzdWx0JClyZXR1cm4gdC5jc3NUZXh0O2lmKFwibnVtYmVyXCI9PXR5cGVvZiB0KXJldHVybiB0O3Rocm93IEVycm9yKFwiVmFsdWUgcGFzc2VkIHRvICdjc3MnIGZ1bmN0aW9uIG11c3QgYmUgYSAnY3NzJyBmdW5jdGlvbiByZXN1bHQ6IFwiK3QrXCIuIFVzZSAndW5zYWZlQ1NTJyB0byBwYXNzIG5vbi1saXRlcmFsIHZhbHVlcywgYnV0IHRha2UgY2FyZSB0byBlbnN1cmUgcGFnZSBzZWN1cml0eS5cIil9KShzKSt0W24rMV0pLHRbMF0pO3JldHVybiBuZXcgbyhuLHQscyl9LFM9KHMsbik9PntlP3MuYWRvcHRlZFN0eWxlU2hlZXRzPW4ubWFwKCh0PT50IGluc3RhbmNlb2YgQ1NTU3R5bGVTaGVldD90OnQuc3R5bGVTaGVldCkpOm4uZm9yRWFjaCgoZT0+e2NvbnN0IG49ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpLG89dC5saXROb25jZTt2b2lkIDAhPT1vJiZuLnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsbyksbi50ZXh0Q29udGVudD1lLmNzc1RleHQscy5hcHBlbmRDaGlsZChuKX0pKX0sYz1lP3Q9PnQ6dD0+dCBpbnN0YW5jZW9mIENTU1N0eWxlU2hlZXQ/KHQ9PntsZXQgZT1cIlwiO2Zvcihjb25zdCBzIG9mIHQuY3NzUnVsZXMpZSs9cy5jc3NUZXh0O3JldHVybiByKGUpfSkodCk6dDtleHBvcnR7byBhcyBDU1NSZXN1bHQsUyBhcyBhZG9wdFN0eWxlcyxpIGFzIGNzcyxjIGFzIGdldENvbXBhdGlibGVTdHlsZSxlIGFzIHN1cHBvcnRzQWRvcHRpbmdTdHlsZVNoZWV0cyxyIGFzIHVuc2FmZUNTU307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jc3MtdGFnLmpzLm1hcFxuIiwiaW1wb3J0e2dldENvbXBhdGlibGVTdHlsZSBhcyB0LGFkb3B0U3R5bGVzIGFzIGl9ZnJvbVwiLi9jc3MtdGFnLmpzXCI7ZXhwb3J0e0NTU1Jlc3VsdCxhZG9wdFN0eWxlcyxjc3MsZ2V0Q29tcGF0aWJsZVN0eWxlLHN1cHBvcnRzQWRvcHRpbmdTdHlsZVNoZWV0cyx1bnNhZmVDU1N9ZnJvbVwiLi9jc3MtdGFnLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi92YXIgcztjb25zdCBlPXdpbmRvdyxyPWUudHJ1c3RlZFR5cGVzLGg9cj9yLmVtcHR5U2NyaXB0OlwiXCIsbz1lLnJlYWN0aXZlRWxlbWVudFBvbHlmaWxsU3VwcG9ydCxuPXt0b0F0dHJpYnV0ZSh0LGkpe3N3aXRjaChpKXtjYXNlIEJvb2xlYW46dD10P2g6bnVsbDticmVhaztjYXNlIE9iamVjdDpjYXNlIEFycmF5OnQ9bnVsbD09dD90OkpTT04uc3RyaW5naWZ5KHQpfXJldHVybiB0fSxmcm9tQXR0cmlidXRlKHQsaSl7bGV0IHM9dDtzd2l0Y2goaSl7Y2FzZSBCb29sZWFuOnM9bnVsbCE9PXQ7YnJlYWs7Y2FzZSBOdW1iZXI6cz1udWxsPT09dD9udWxsOk51bWJlcih0KTticmVhaztjYXNlIE9iamVjdDpjYXNlIEFycmF5OnRyeXtzPUpTT04ucGFyc2UodCl9Y2F0Y2godCl7cz1udWxsfX1yZXR1cm4gc319LGE9KHQsaSk9PmkhPT10JiYoaT09aXx8dD09dCksbD17YXR0cmlidXRlOiEwLHR5cGU6U3RyaW5nLGNvbnZlcnRlcjpuLHJlZmxlY3Q6ITEsaGFzQ2hhbmdlZDphfSxkPVwiZmluYWxpemVkXCI7Y2xhc3MgdSBleHRlbmRzIEhUTUxFbGVtZW50e2NvbnN0cnVjdG9yKCl7c3VwZXIoKSx0aGlzLl8kRWk9bmV3IE1hcCx0aGlzLmlzVXBkYXRlUGVuZGluZz0hMSx0aGlzLmhhc1VwZGF0ZWQ9ITEsdGhpcy5fJEVsPW51bGwsdGhpcy51KCl9c3RhdGljIGFkZEluaXRpYWxpemVyKHQpe3ZhciBpO3RoaXMuZmluYWxpemUoKSwobnVsbCE9PShpPXRoaXMuaCkmJnZvaWQgMCE9PWk/aTp0aGlzLmg9W10pLnB1c2godCl9c3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKXt0aGlzLmZpbmFsaXplKCk7Y29uc3QgdD1bXTtyZXR1cm4gdGhpcy5lbGVtZW50UHJvcGVydGllcy5mb3JFYWNoKCgoaSxzKT0+e2NvbnN0IGU9dGhpcy5fJEVwKHMsaSk7dm9pZCAwIT09ZSYmKHRoaXMuXyRFdi5zZXQoZSxzKSx0LnB1c2goZSkpfSkpLHR9c3RhdGljIGNyZWF0ZVByb3BlcnR5KHQsaT1sKXtpZihpLnN0YXRlJiYoaS5hdHRyaWJ1dGU9ITEpLHRoaXMuZmluYWxpemUoKSx0aGlzLmVsZW1lbnRQcm9wZXJ0aWVzLnNldCh0LGkpLCFpLm5vQWNjZXNzb3ImJiF0aGlzLnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSh0KSl7Y29uc3Qgcz1cInN5bWJvbFwiPT10eXBlb2YgdD9TeW1ib2woKTpcIl9fXCIrdCxlPXRoaXMuZ2V0UHJvcGVydHlEZXNjcmlwdG9yKHQscyxpKTt2b2lkIDAhPT1lJiZPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5wcm90b3R5cGUsdCxlKX19c3RhdGljIGdldFByb3BlcnR5RGVzY3JpcHRvcih0LGkscyl7cmV0dXJue2dldCgpe3JldHVybiB0aGlzW2ldfSxzZXQoZSl7Y29uc3Qgcj10aGlzW3RdO3RoaXNbaV09ZSx0aGlzLnJlcXVlc3RVcGRhdGUodCxyLHMpfSxjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMH19c3RhdGljIGdldFByb3BlcnR5T3B0aW9ucyh0KXtyZXR1cm4gdGhpcy5lbGVtZW50UHJvcGVydGllcy5nZXQodCl8fGx9c3RhdGljIGZpbmFsaXplKCl7aWYodGhpcy5oYXNPd25Qcm9wZXJ0eShkKSlyZXR1cm4hMTt0aGlzW2RdPSEwO2NvbnN0IHQ9T2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpO2lmKHQuZmluYWxpemUoKSx2b2lkIDAhPT10LmgmJih0aGlzLmg9Wy4uLnQuaF0pLHRoaXMuZWxlbWVudFByb3BlcnRpZXM9bmV3IE1hcCh0LmVsZW1lbnRQcm9wZXJ0aWVzKSx0aGlzLl8kRXY9bmV3IE1hcCx0aGlzLmhhc093blByb3BlcnR5KFwicHJvcGVydGllc1wiKSl7Y29uc3QgdD10aGlzLnByb3BlcnRpZXMsaT1bLi4uT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModCksLi4uT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0KV07Zm9yKGNvbnN0IHMgb2YgaSl0aGlzLmNyZWF0ZVByb3BlcnR5KHMsdFtzXSl9cmV0dXJuIHRoaXMuZWxlbWVudFN0eWxlcz10aGlzLmZpbmFsaXplU3R5bGVzKHRoaXMuc3R5bGVzKSwhMH1zdGF0aWMgZmluYWxpemVTdHlsZXMoaSl7Y29uc3Qgcz1bXTtpZihBcnJheS5pc0FycmF5KGkpKXtjb25zdCBlPW5ldyBTZXQoaS5mbGF0KDEvMCkucmV2ZXJzZSgpKTtmb3IoY29uc3QgaSBvZiBlKXMudW5zaGlmdCh0KGkpKX1lbHNlIHZvaWQgMCE9PWkmJnMucHVzaCh0KGkpKTtyZXR1cm4gc31zdGF0aWMgXyRFcCh0LGkpe2NvbnN0IHM9aS5hdHRyaWJ1dGU7cmV0dXJuITE9PT1zP3ZvaWQgMDpcInN0cmluZ1wiPT10eXBlb2Ygcz9zOlwic3RyaW5nXCI9PXR5cGVvZiB0P3QudG9Mb3dlckNhc2UoKTp2b2lkIDB9dSgpe3ZhciB0O3RoaXMuXyRFXz1uZXcgUHJvbWlzZSgodD0+dGhpcy5lbmFibGVVcGRhdGluZz10KSksdGhpcy5fJEFMPW5ldyBNYXAsdGhpcy5fJEVnKCksdGhpcy5yZXF1ZXN0VXBkYXRlKCksbnVsbD09PSh0PXRoaXMuY29uc3RydWN0b3IuaCl8fHZvaWQgMD09PXR8fHQuZm9yRWFjaCgodD0+dCh0aGlzKSkpfWFkZENvbnRyb2xsZXIodCl7dmFyIGksczsobnVsbCE9PShpPXRoaXMuXyRFUykmJnZvaWQgMCE9PWk/aTp0aGlzLl8kRVM9W10pLnB1c2godCksdm9pZCAwIT09dGhpcy5yZW5kZXJSb290JiZ0aGlzLmlzQ29ubmVjdGVkJiYobnVsbD09PShzPXQuaG9zdENvbm5lY3RlZCl8fHZvaWQgMD09PXN8fHMuY2FsbCh0KSl9cmVtb3ZlQ29udHJvbGxlcih0KXt2YXIgaTtudWxsPT09KGk9dGhpcy5fJEVTKXx8dm9pZCAwPT09aXx8aS5zcGxpY2UodGhpcy5fJEVTLmluZGV4T2YodCk+Pj4wLDEpfV8kRWcoKXt0aGlzLmNvbnN0cnVjdG9yLmVsZW1lbnRQcm9wZXJ0aWVzLmZvckVhY2goKCh0LGkpPT57dGhpcy5oYXNPd25Qcm9wZXJ0eShpKSYmKHRoaXMuXyRFaS5zZXQoaSx0aGlzW2ldKSxkZWxldGUgdGhpc1tpXSl9KSl9Y3JlYXRlUmVuZGVyUm9vdCgpe3ZhciB0O2NvbnN0IHM9bnVsbCE9PSh0PXRoaXMuc2hhZG93Um9vdCkmJnZvaWQgMCE9PXQ/dDp0aGlzLmF0dGFjaFNoYWRvdyh0aGlzLmNvbnN0cnVjdG9yLnNoYWRvd1Jvb3RPcHRpb25zKTtyZXR1cm4gaShzLHRoaXMuY29uc3RydWN0b3IuZWxlbWVudFN0eWxlcyksc31jb25uZWN0ZWRDYWxsYmFjaygpe3ZhciB0O3ZvaWQgMD09PXRoaXMucmVuZGVyUm9vdCYmKHRoaXMucmVuZGVyUm9vdD10aGlzLmNyZWF0ZVJlbmRlclJvb3QoKSksdGhpcy5lbmFibGVVcGRhdGluZyghMCksbnVsbD09PSh0PXRoaXMuXyRFUyl8fHZvaWQgMD09PXR8fHQuZm9yRWFjaCgodD0+e3ZhciBpO3JldHVybiBudWxsPT09KGk9dC5ob3N0Q29ubmVjdGVkKXx8dm9pZCAwPT09aT92b2lkIDA6aS5jYWxsKHQpfSkpfWVuYWJsZVVwZGF0aW5nKHQpe31kaXNjb25uZWN0ZWRDYWxsYmFjaygpe3ZhciB0O251bGw9PT0odD10aGlzLl8kRVMpfHx2b2lkIDA9PT10fHx0LmZvckVhY2goKHQ9Pnt2YXIgaTtyZXR1cm4gbnVsbD09PShpPXQuaG9zdERpc2Nvbm5lY3RlZCl8fHZvaWQgMD09PWk/dm9pZCAwOmkuY2FsbCh0KX0pKX1hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sodCxpLHMpe3RoaXMuXyRBSyh0LHMpfV8kRU8odCxpLHM9bCl7dmFyIGU7Y29uc3Qgcj10aGlzLmNvbnN0cnVjdG9yLl8kRXAodCxzKTtpZih2b2lkIDAhPT1yJiYhMD09PXMucmVmbGVjdCl7Y29uc3QgaD0odm9pZCAwIT09KG51bGw9PT0oZT1zLmNvbnZlcnRlcil8fHZvaWQgMD09PWU/dm9pZCAwOmUudG9BdHRyaWJ1dGUpP3MuY29udmVydGVyOm4pLnRvQXR0cmlidXRlKGkscy50eXBlKTt0aGlzLl8kRWw9dCxudWxsPT1oP3RoaXMucmVtb3ZlQXR0cmlidXRlKHIpOnRoaXMuc2V0QXR0cmlidXRlKHIsaCksdGhpcy5fJEVsPW51bGx9fV8kQUsodCxpKXt2YXIgcztjb25zdCBlPXRoaXMuY29uc3RydWN0b3Iscj1lLl8kRXYuZ2V0KHQpO2lmKHZvaWQgMCE9PXImJnRoaXMuXyRFbCE9PXIpe2NvbnN0IHQ9ZS5nZXRQcm9wZXJ0eU9wdGlvbnMociksaD1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0LmNvbnZlcnRlcj97ZnJvbUF0dHJpYnV0ZTp0LmNvbnZlcnRlcn06dm9pZCAwIT09KG51bGw9PT0ocz10LmNvbnZlcnRlcil8fHZvaWQgMD09PXM/dm9pZCAwOnMuZnJvbUF0dHJpYnV0ZSk/dC5jb252ZXJ0ZXI6bjt0aGlzLl8kRWw9cix0aGlzW3JdPWguZnJvbUF0dHJpYnV0ZShpLHQudHlwZSksdGhpcy5fJEVsPW51bGx9fXJlcXVlc3RVcGRhdGUodCxpLHMpe2xldCBlPSEwO3ZvaWQgMCE9PXQmJigoKHM9c3x8dGhpcy5jb25zdHJ1Y3Rvci5nZXRQcm9wZXJ0eU9wdGlvbnModCkpLmhhc0NoYW5nZWR8fGEpKHRoaXNbdF0saSk/KHRoaXMuXyRBTC5oYXModCl8fHRoaXMuXyRBTC5zZXQodCxpKSwhMD09PXMucmVmbGVjdCYmdGhpcy5fJEVsIT09dCYmKHZvaWQgMD09PXRoaXMuXyRFQyYmKHRoaXMuXyRFQz1uZXcgTWFwKSx0aGlzLl8kRUMuc2V0KHQscykpKTplPSExKSwhdGhpcy5pc1VwZGF0ZVBlbmRpbmcmJmUmJih0aGlzLl8kRV89dGhpcy5fJEVqKCkpfWFzeW5jIF8kRWooKXt0aGlzLmlzVXBkYXRlUGVuZGluZz0hMDt0cnl7YXdhaXQgdGhpcy5fJEVffWNhdGNoKHQpe1Byb21pc2UucmVqZWN0KHQpfWNvbnN0IHQ9dGhpcy5zY2hlZHVsZVVwZGF0ZSgpO3JldHVybiBudWxsIT10JiZhd2FpdCB0LCF0aGlzLmlzVXBkYXRlUGVuZGluZ31zY2hlZHVsZVVwZGF0ZSgpe3JldHVybiB0aGlzLnBlcmZvcm1VcGRhdGUoKX1wZXJmb3JtVXBkYXRlKCl7dmFyIHQ7aWYoIXRoaXMuaXNVcGRhdGVQZW5kaW5nKXJldHVybjt0aGlzLmhhc1VwZGF0ZWQsdGhpcy5fJEVpJiYodGhpcy5fJEVpLmZvckVhY2goKCh0LGkpPT50aGlzW2ldPXQpKSx0aGlzLl8kRWk9dm9pZCAwKTtsZXQgaT0hMTtjb25zdCBzPXRoaXMuXyRBTDt0cnl7aT10aGlzLnNob3VsZFVwZGF0ZShzKSxpPyh0aGlzLndpbGxVcGRhdGUocyksbnVsbD09PSh0PXRoaXMuXyRFUyl8fHZvaWQgMD09PXR8fHQuZm9yRWFjaCgodD0+e3ZhciBpO3JldHVybiBudWxsPT09KGk9dC5ob3N0VXBkYXRlKXx8dm9pZCAwPT09aT92b2lkIDA6aS5jYWxsKHQpfSkpLHRoaXMudXBkYXRlKHMpKTp0aGlzLl8kRWsoKX1jYXRjaCh0KXt0aHJvdyBpPSExLHRoaXMuXyRFaygpLHR9aSYmdGhpcy5fJEFFKHMpfXdpbGxVcGRhdGUodCl7fV8kQUUodCl7dmFyIGk7bnVsbD09PShpPXRoaXMuXyRFUyl8fHZvaWQgMD09PWl8fGkuZm9yRWFjaCgodD0+e3ZhciBpO3JldHVybiBudWxsPT09KGk9dC5ob3N0VXBkYXRlZCl8fHZvaWQgMD09PWk/dm9pZCAwOmkuY2FsbCh0KX0pKSx0aGlzLmhhc1VwZGF0ZWR8fCh0aGlzLmhhc1VwZGF0ZWQ9ITAsdGhpcy5maXJzdFVwZGF0ZWQodCkpLHRoaXMudXBkYXRlZCh0KX1fJEVrKCl7dGhpcy5fJEFMPW5ldyBNYXAsdGhpcy5pc1VwZGF0ZVBlbmRpbmc9ITF9Z2V0IHVwZGF0ZUNvbXBsZXRlKCl7cmV0dXJuIHRoaXMuZ2V0VXBkYXRlQ29tcGxldGUoKX1nZXRVcGRhdGVDb21wbGV0ZSgpe3JldHVybiB0aGlzLl8kRV99c2hvdWxkVXBkYXRlKHQpe3JldHVybiEwfXVwZGF0ZSh0KXt2b2lkIDAhPT10aGlzLl8kRUMmJih0aGlzLl8kRUMuZm9yRWFjaCgoKHQsaSk9PnRoaXMuXyRFTyhpLHRoaXNbaV0sdCkpKSx0aGlzLl8kRUM9dm9pZCAwKSx0aGlzLl8kRWsoKX11cGRhdGVkKHQpe31maXJzdFVwZGF0ZWQodCl7fX11W2RdPSEwLHUuZWxlbWVudFByb3BlcnRpZXM9bmV3IE1hcCx1LmVsZW1lbnRTdHlsZXM9W10sdS5zaGFkb3dSb290T3B0aW9ucz17bW9kZTpcIm9wZW5cIn0sbnVsbD09b3x8byh7UmVhY3RpdmVFbGVtZW50OnV9KSwobnVsbCE9PShzPWUucmVhY3RpdmVFbGVtZW50VmVyc2lvbnMpJiZ2b2lkIDAhPT1zP3M6ZS5yZWFjdGl2ZUVsZW1lbnRWZXJzaW9ucz1bXSkucHVzaChcIjEuNi4yXCIpO2V4cG9ydHt1IGFzIFJlYWN0aXZlRWxlbWVudCxuIGFzIGRlZmF1bHRDb252ZXJ0ZXIsYSBhcyBub3RFcXVhbH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdGl2ZS1lbGVtZW50LmpzLm1hcFxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG52YXIgdDtjb25zdCBpPXdpbmRvdyxzPWkudHJ1c3RlZFR5cGVzLGU9cz9zLmNyZWF0ZVBvbGljeShcImxpdC1odG1sXCIse2NyZWF0ZUhUTUw6dD0+dH0pOnZvaWQgMCxvPVwiJGxpdCRcIixuPWBsaXQkJHsoTWF0aC5yYW5kb20oKStcIlwiKS5zbGljZSg5KX0kYCxsPVwiP1wiK24saD1gPCR7bH0+YCxyPWRvY3VtZW50LGQ9KCk9PnIuY3JlYXRlQ29tbWVudChcIlwiKSx1PXQ9Pm51bGw9PT10fHxcIm9iamVjdFwiIT10eXBlb2YgdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgdCxjPUFycmF5LmlzQXJyYXksdj10PT5jKHQpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZihudWxsPT10P3ZvaWQgMDp0W1N5bWJvbC5pdGVyYXRvcl0pLGE9XCJbIFxcdFxcblxcZlxccl1cIixmPS88KD86KCEtLXxcXC9bXmEtekEtWl0pfChcXC8/W2EtekEtWl1bXj5cXHNdKil8KFxcLz8kKSkvZyxfPS8tLT4vZyxtPS8+L2cscD1SZWdFeHAoYD58JHthfSg/OihbXlxcXFxzXCInPj0vXSspKCR7YX0qPSR7YX0qKD86W14gXFx0XFxuXFxmXFxyXCInXFxgPD49XXwoXCJ8Jyl8KSl8JClgLFwiZ1wiKSxnPS8nL2csJD0vXCIvZyx5PS9eKD86c2NyaXB0fHN0eWxlfHRleHRhcmVhfHRpdGxlKSQvaSx3PXQ9PihpLC4uLnMpPT4oe18kbGl0VHlwZSQ6dCxzdHJpbmdzOmksdmFsdWVzOnN9KSx4PXcoMSksYj13KDIpLFQ9U3ltYm9sLmZvcihcImxpdC1ub0NoYW5nZVwiKSxBPVN5bWJvbC5mb3IoXCJsaXQtbm90aGluZ1wiKSxFPW5ldyBXZWFrTWFwLEM9ci5jcmVhdGVUcmVlV2Fsa2VyKHIsMTI5LG51bGwsITEpLFA9KHQsaSk9Pntjb25zdCBzPXQubGVuZ3RoLTEsbD1bXTtsZXQgcixkPTI9PT1pP1wiPHN2Zz5cIjpcIlwiLHU9Zjtmb3IobGV0IGk9MDtpPHM7aSsrKXtjb25zdCBzPXRbaV07bGV0IGUsYyx2PS0xLGE9MDtmb3IoO2E8cy5sZW5ndGgmJih1Lmxhc3RJbmRleD1hLGM9dS5leGVjKHMpLG51bGwhPT1jKTspYT11Lmxhc3RJbmRleCx1PT09Zj9cIiEtLVwiPT09Y1sxXT91PV86dm9pZCAwIT09Y1sxXT91PW06dm9pZCAwIT09Y1syXT8oeS50ZXN0KGNbMl0pJiYocj1SZWdFeHAoXCI8L1wiK2NbMl0sXCJnXCIpKSx1PXApOnZvaWQgMCE9PWNbM10mJih1PXApOnU9PT1wP1wiPlwiPT09Y1swXT8odT1udWxsIT1yP3I6Zix2PS0xKTp2b2lkIDA9PT1jWzFdP3Y9LTI6KHY9dS5sYXN0SW5kZXgtY1syXS5sZW5ndGgsZT1jWzFdLHU9dm9pZCAwPT09Y1szXT9wOidcIic9PT1jWzNdPyQ6Zyk6dT09PSR8fHU9PT1nP3U9cDp1PT09X3x8dT09PW0/dT1mOih1PXAscj12b2lkIDApO2NvbnN0IHc9dT09PXAmJnRbaSsxXS5zdGFydHNXaXRoKFwiLz5cIik/XCIgXCI6XCJcIjtkKz11PT09Zj9zK2g6dj49MD8obC5wdXNoKGUpLHMuc2xpY2UoMCx2KStvK3Muc2xpY2Uodikrbit3KTpzK24rKC0yPT09dj8obC5wdXNoKHZvaWQgMCksaSk6dyl9Y29uc3QgYz1kKyh0W3NdfHxcIjw/PlwiKSsoMj09PWk/XCI8L3N2Zz5cIjpcIlwiKTtpZighQXJyYXkuaXNBcnJheSh0KXx8IXQuaGFzT3duUHJvcGVydHkoXCJyYXdcIikpdGhyb3cgRXJyb3IoXCJpbnZhbGlkIHRlbXBsYXRlIHN0cmluZ3MgYXJyYXlcIik7cmV0dXJuW3ZvaWQgMCE9PWU/ZS5jcmVhdGVIVE1MKGMpOmMsbF19O2NsYXNzIFZ7Y29uc3RydWN0b3Ioe3N0cmluZ3M6dCxfJGxpdFR5cGUkOml9LGUpe2xldCBoO3RoaXMucGFydHM9W107bGV0IHI9MCx1PTA7Y29uc3QgYz10Lmxlbmd0aC0xLHY9dGhpcy5wYXJ0cyxbYSxmXT1QKHQsaSk7aWYodGhpcy5lbD1WLmNyZWF0ZUVsZW1lbnQoYSxlKSxDLmN1cnJlbnROb2RlPXRoaXMuZWwuY29udGVudCwyPT09aSl7Y29uc3QgdD10aGlzLmVsLmNvbnRlbnQsaT10LmZpcnN0Q2hpbGQ7aS5yZW1vdmUoKSx0LmFwcGVuZCguLi5pLmNoaWxkTm9kZXMpfWZvcig7bnVsbCE9PShoPUMubmV4dE5vZGUoKSkmJnYubGVuZ3RoPGM7KXtpZigxPT09aC5ub2RlVHlwZSl7aWYoaC5oYXNBdHRyaWJ1dGVzKCkpe2NvbnN0IHQ9W107Zm9yKGNvbnN0IGkgb2YgaC5nZXRBdHRyaWJ1dGVOYW1lcygpKWlmKGkuZW5kc1dpdGgobyl8fGkuc3RhcnRzV2l0aChuKSl7Y29uc3Qgcz1mW3UrK107aWYodC5wdXNoKGkpLHZvaWQgMCE9PXMpe2NvbnN0IHQ9aC5nZXRBdHRyaWJ1dGUocy50b0xvd2VyQ2FzZSgpK28pLnNwbGl0KG4pLGk9LyhbLj9AXSk/KC4qKS8uZXhlYyhzKTt2LnB1c2goe3R5cGU6MSxpbmRleDpyLG5hbWU6aVsyXSxzdHJpbmdzOnQsY3RvcjpcIi5cIj09PWlbMV0/azpcIj9cIj09PWlbMV0/STpcIkBcIj09PWlbMV0/TDpSfSl9ZWxzZSB2LnB1c2goe3R5cGU6NixpbmRleDpyfSl9Zm9yKGNvbnN0IGkgb2YgdCloLnJlbW92ZUF0dHJpYnV0ZShpKX1pZih5LnRlc3QoaC50YWdOYW1lKSl7Y29uc3QgdD1oLnRleHRDb250ZW50LnNwbGl0KG4pLGk9dC5sZW5ndGgtMTtpZihpPjApe2gudGV4dENvbnRlbnQ9cz9zLmVtcHR5U2NyaXB0OlwiXCI7Zm9yKGxldCBzPTA7czxpO3MrKyloLmFwcGVuZCh0W3NdLGQoKSksQy5uZXh0Tm9kZSgpLHYucHVzaCh7dHlwZToyLGluZGV4Oisrcn0pO2guYXBwZW5kKHRbaV0sZCgpKX19fWVsc2UgaWYoOD09PWgubm9kZVR5cGUpaWYoaC5kYXRhPT09bCl2LnB1c2goe3R5cGU6MixpbmRleDpyfSk7ZWxzZXtsZXQgdD0tMTtmb3IoOy0xIT09KHQ9aC5kYXRhLmluZGV4T2Yobix0KzEpKTspdi5wdXNoKHt0eXBlOjcsaW5kZXg6cn0pLHQrPW4ubGVuZ3RoLTF9cisrfX1zdGF0aWMgY3JlYXRlRWxlbWVudCh0LGkpe2NvbnN0IHM9ci5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIik7cmV0dXJuIHMuaW5uZXJIVE1MPXQsc319ZnVuY3Rpb24gTih0LGkscz10LGUpe3ZhciBvLG4sbCxoO2lmKGk9PT1UKXJldHVybiBpO2xldCByPXZvaWQgMCE9PWU/bnVsbD09PShvPXMuXyRDbyl8fHZvaWQgMD09PW8/dm9pZCAwOm9bZV06cy5fJENsO2NvbnN0IGQ9dShpKT92b2lkIDA6aS5fJGxpdERpcmVjdGl2ZSQ7cmV0dXJuKG51bGw9PXI/dm9pZCAwOnIuY29uc3RydWN0b3IpIT09ZCYmKG51bGw9PT0obj1udWxsPT1yP3ZvaWQgMDpyLl8kQU8pfHx2b2lkIDA9PT1ufHxuLmNhbGwociwhMSksdm9pZCAwPT09ZD9yPXZvaWQgMDoocj1uZXcgZCh0KSxyLl8kQVQodCxzLGUpKSx2b2lkIDAhPT1lPyhudWxsIT09KGw9KGg9cykuXyRDbykmJnZvaWQgMCE9PWw/bDpoLl8kQ289W10pW2VdPXI6cy5fJENsPXIpLHZvaWQgMCE9PXImJihpPU4odCxyLl8kQVModCxpLnZhbHVlcykscixlKSksaX1jbGFzcyBTe2NvbnN0cnVjdG9yKHQsaSl7dGhpcy5fJEFWPVtdLHRoaXMuXyRBTj12b2lkIDAsdGhpcy5fJEFEPXQsdGhpcy5fJEFNPWl9Z2V0IHBhcmVudE5vZGUoKXtyZXR1cm4gdGhpcy5fJEFNLnBhcmVudE5vZGV9Z2V0IF8kQVUoKXtyZXR1cm4gdGhpcy5fJEFNLl8kQVV9dSh0KXt2YXIgaTtjb25zdHtlbDp7Y29udGVudDpzfSxwYXJ0czplfT10aGlzLl8kQUQsbz0obnVsbCE9PShpPW51bGw9PXQ/dm9pZCAwOnQuY3JlYXRpb25TY29wZSkmJnZvaWQgMCE9PWk/aTpyKS5pbXBvcnROb2RlKHMsITApO0MuY3VycmVudE5vZGU9bztsZXQgbj1DLm5leHROb2RlKCksbD0wLGg9MCxkPWVbMF07Zm9yKDt2b2lkIDAhPT1kOyl7aWYobD09PWQuaW5kZXgpe2xldCBpOzI9PT1kLnR5cGU/aT1uZXcgTShuLG4ubmV4dFNpYmxpbmcsdGhpcyx0KToxPT09ZC50eXBlP2k9bmV3IGQuY3RvcihuLGQubmFtZSxkLnN0cmluZ3MsdGhpcyx0KTo2PT09ZC50eXBlJiYoaT1uZXcgeihuLHRoaXMsdCkpLHRoaXMuXyRBVi5wdXNoKGkpLGQ9ZVsrK2hdfWwhPT0obnVsbD09ZD92b2lkIDA6ZC5pbmRleCkmJihuPUMubmV4dE5vZGUoKSxsKyspfXJldHVybiBDLmN1cnJlbnROb2RlPXIsb312KHQpe2xldCBpPTA7Zm9yKGNvbnN0IHMgb2YgdGhpcy5fJEFWKXZvaWQgMCE9PXMmJih2b2lkIDAhPT1zLnN0cmluZ3M/KHMuXyRBSSh0LHMsaSksaSs9cy5zdHJpbmdzLmxlbmd0aC0yKTpzLl8kQUkodFtpXSkpLGkrK319Y2xhc3MgTXtjb25zdHJ1Y3Rvcih0LGkscyxlKXt2YXIgbzt0aGlzLnR5cGU9Mix0aGlzLl8kQUg9QSx0aGlzLl8kQU49dm9pZCAwLHRoaXMuXyRBQT10LHRoaXMuXyRBQj1pLHRoaXMuXyRBTT1zLHRoaXMub3B0aW9ucz1lLHRoaXMuXyRDcD1udWxsPT09KG89bnVsbD09ZT92b2lkIDA6ZS5pc0Nvbm5lY3RlZCl8fHZvaWQgMD09PW98fG99Z2V0IF8kQVUoKXt2YXIgdCxpO3JldHVybiBudWxsIT09KGk9bnVsbD09PSh0PXRoaXMuXyRBTSl8fHZvaWQgMD09PXQ/dm9pZCAwOnQuXyRBVSkmJnZvaWQgMCE9PWk/aTp0aGlzLl8kQ3B9Z2V0IHBhcmVudE5vZGUoKXtsZXQgdD10aGlzLl8kQUEucGFyZW50Tm9kZTtjb25zdCBpPXRoaXMuXyRBTTtyZXR1cm4gdm9pZCAwIT09aSYmMTE9PT0obnVsbD09dD92b2lkIDA6dC5ub2RlVHlwZSkmJih0PWkucGFyZW50Tm9kZSksdH1nZXQgc3RhcnROb2RlKCl7cmV0dXJuIHRoaXMuXyRBQX1nZXQgZW5kTm9kZSgpe3JldHVybiB0aGlzLl8kQUJ9XyRBSSh0LGk9dGhpcyl7dD1OKHRoaXMsdCxpKSx1KHQpP3Q9PT1BfHxudWxsPT10fHxcIlwiPT09dD8odGhpcy5fJEFIIT09QSYmdGhpcy5fJEFSKCksdGhpcy5fJEFIPUEpOnQhPT10aGlzLl8kQUgmJnQhPT1UJiZ0aGlzLl8odCk6dm9pZCAwIT09dC5fJGxpdFR5cGUkP3RoaXMuZyh0KTp2b2lkIDAhPT10Lm5vZGVUeXBlP3RoaXMuJCh0KTp2KHQpP3RoaXMuVCh0KTp0aGlzLl8odCl9ayh0KXtyZXR1cm4gdGhpcy5fJEFBLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHQsdGhpcy5fJEFCKX0kKHQpe3RoaXMuXyRBSCE9PXQmJih0aGlzLl8kQVIoKSx0aGlzLl8kQUg9dGhpcy5rKHQpKX1fKHQpe3RoaXMuXyRBSCE9PUEmJnUodGhpcy5fJEFIKT90aGlzLl8kQUEubmV4dFNpYmxpbmcuZGF0YT10OnRoaXMuJChyLmNyZWF0ZVRleHROb2RlKHQpKSx0aGlzLl8kQUg9dH1nKHQpe3ZhciBpO2NvbnN0e3ZhbHVlczpzLF8kbGl0VHlwZSQ6ZX09dCxvPVwibnVtYmVyXCI9PXR5cGVvZiBlP3RoaXMuXyRBQyh0KToodm9pZCAwPT09ZS5lbCYmKGUuZWw9Vi5jcmVhdGVFbGVtZW50KGUuaCx0aGlzLm9wdGlvbnMpKSxlKTtpZigobnVsbD09PShpPXRoaXMuXyRBSCl8fHZvaWQgMD09PWk/dm9pZCAwOmkuXyRBRCk9PT1vKXRoaXMuXyRBSC52KHMpO2Vsc2V7Y29uc3QgdD1uZXcgUyhvLHRoaXMpLGk9dC51KHRoaXMub3B0aW9ucyk7dC52KHMpLHRoaXMuJChpKSx0aGlzLl8kQUg9dH19XyRBQyh0KXtsZXQgaT1FLmdldCh0LnN0cmluZ3MpO3JldHVybiB2b2lkIDA9PT1pJiZFLnNldCh0LnN0cmluZ3MsaT1uZXcgVih0KSksaX1UKHQpe2ModGhpcy5fJEFIKXx8KHRoaXMuXyRBSD1bXSx0aGlzLl8kQVIoKSk7Y29uc3QgaT10aGlzLl8kQUg7bGV0IHMsZT0wO2Zvcihjb25zdCBvIG9mIHQpZT09PWkubGVuZ3RoP2kucHVzaChzPW5ldyBNKHRoaXMuayhkKCkpLHRoaXMuayhkKCkpLHRoaXMsdGhpcy5vcHRpb25zKSk6cz1pW2VdLHMuXyRBSShvKSxlKys7ZTxpLmxlbmd0aCYmKHRoaXMuXyRBUihzJiZzLl8kQUIubmV4dFNpYmxpbmcsZSksaS5sZW5ndGg9ZSl9XyRBUih0PXRoaXMuXyRBQS5uZXh0U2libGluZyxpKXt2YXIgcztmb3IobnVsbD09PShzPXRoaXMuXyRBUCl8fHZvaWQgMD09PXN8fHMuY2FsbCh0aGlzLCExLCEwLGkpO3QmJnQhPT10aGlzLl8kQUI7KXtjb25zdCBpPXQubmV4dFNpYmxpbmc7dC5yZW1vdmUoKSx0PWl9fXNldENvbm5lY3RlZCh0KXt2YXIgaTt2b2lkIDA9PT10aGlzLl8kQU0mJih0aGlzLl8kQ3A9dCxudWxsPT09KGk9dGhpcy5fJEFQKXx8dm9pZCAwPT09aXx8aS5jYWxsKHRoaXMsdCkpfX1jbGFzcyBSe2NvbnN0cnVjdG9yKHQsaSxzLGUsbyl7dGhpcy50eXBlPTEsdGhpcy5fJEFIPUEsdGhpcy5fJEFOPXZvaWQgMCx0aGlzLmVsZW1lbnQ9dCx0aGlzLm5hbWU9aSx0aGlzLl8kQU09ZSx0aGlzLm9wdGlvbnM9byxzLmxlbmd0aD4yfHxcIlwiIT09c1swXXx8XCJcIiE9PXNbMV0/KHRoaXMuXyRBSD1BcnJheShzLmxlbmd0aC0xKS5maWxsKG5ldyBTdHJpbmcpLHRoaXMuc3RyaW5ncz1zKTp0aGlzLl8kQUg9QX1nZXQgdGFnTmFtZSgpe3JldHVybiB0aGlzLmVsZW1lbnQudGFnTmFtZX1nZXQgXyRBVSgpe3JldHVybiB0aGlzLl8kQU0uXyRBVX1fJEFJKHQsaT10aGlzLHMsZSl7Y29uc3Qgbz10aGlzLnN0cmluZ3M7bGV0IG49ITE7aWYodm9pZCAwPT09byl0PU4odGhpcyx0LGksMCksbj0hdSh0KXx8dCE9PXRoaXMuXyRBSCYmdCE9PVQsbiYmKHRoaXMuXyRBSD10KTtlbHNle2NvbnN0IGU9dDtsZXQgbCxoO2Zvcih0PW9bMF0sbD0wO2w8by5sZW5ndGgtMTtsKyspaD1OKHRoaXMsZVtzK2xdLGksbCksaD09PVQmJihoPXRoaXMuXyRBSFtsXSksbnx8KG49IXUoaCl8fGghPT10aGlzLl8kQUhbbF0pLGg9PT1BP3Q9QTp0IT09QSYmKHQrPShudWxsIT1oP2g6XCJcIikrb1tsKzFdKSx0aGlzLl8kQUhbbF09aH1uJiYhZSYmdGhpcy5qKHQpfWoodCl7dD09PUE/dGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSh0aGlzLm5hbWUpOnRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUodGhpcy5uYW1lLG51bGwhPXQ/dDpcIlwiKX19Y2xhc3MgayBleHRlbmRzIFJ7Y29uc3RydWN0b3IoKXtzdXBlciguLi5hcmd1bWVudHMpLHRoaXMudHlwZT0zfWoodCl7dGhpcy5lbGVtZW50W3RoaXMubmFtZV09dD09PUE/dm9pZCAwOnR9fWNvbnN0IEg9cz9zLmVtcHR5U2NyaXB0OlwiXCI7Y2xhc3MgSSBleHRlbmRzIFJ7Y29uc3RydWN0b3IoKXtzdXBlciguLi5hcmd1bWVudHMpLHRoaXMudHlwZT00fWoodCl7dCYmdCE9PUE/dGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSh0aGlzLm5hbWUsSCk6dGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSh0aGlzLm5hbWUpfX1jbGFzcyBMIGV4dGVuZHMgUntjb25zdHJ1Y3Rvcih0LGkscyxlLG8pe3N1cGVyKHQsaSxzLGUsbyksdGhpcy50eXBlPTV9XyRBSSh0LGk9dGhpcyl7dmFyIHM7aWYoKHQ9bnVsbCE9PShzPU4odGhpcyx0LGksMCkpJiZ2b2lkIDAhPT1zP3M6QSk9PT1UKXJldHVybjtjb25zdCBlPXRoaXMuXyRBSCxvPXQ9PT1BJiZlIT09QXx8dC5jYXB0dXJlIT09ZS5jYXB0dXJlfHx0Lm9uY2UhPT1lLm9uY2V8fHQucGFzc2l2ZSE9PWUucGFzc2l2ZSxuPXQhPT1BJiYoZT09PUF8fG8pO28mJnRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMubmFtZSx0aGlzLGUpLG4mJnRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHRoaXMubmFtZSx0aGlzLHQpLHRoaXMuXyRBSD10fWhhbmRsZUV2ZW50KHQpe3ZhciBpLHM7XCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5fJEFIP3RoaXMuXyRBSC5jYWxsKG51bGwhPT0ocz1udWxsPT09KGk9dGhpcy5vcHRpb25zKXx8dm9pZCAwPT09aT92b2lkIDA6aS5ob3N0KSYmdm9pZCAwIT09cz9zOnRoaXMuZWxlbWVudCx0KTp0aGlzLl8kQUguaGFuZGxlRXZlbnQodCl9fWNsYXNzIHp7Y29uc3RydWN0b3IodCxpLHMpe3RoaXMuZWxlbWVudD10LHRoaXMudHlwZT02LHRoaXMuXyRBTj12b2lkIDAsdGhpcy5fJEFNPWksdGhpcy5vcHRpb25zPXN9Z2V0IF8kQVUoKXtyZXR1cm4gdGhpcy5fJEFNLl8kQVV9XyRBSSh0KXtOKHRoaXMsdCl9fWNvbnN0IFo9e086byxQOm4sQTpsLEM6MSxNOlAsTDpTLEQ6dixSOk4sSTpNLFY6UixIOkksTjpMLFU6ayxGOnp9LGo9aS5saXRIdG1sUG9seWZpbGxTdXBwb3J0O251bGw9PWp8fGooVixNKSwobnVsbCE9PSh0PWkubGl0SHRtbFZlcnNpb25zKSYmdm9pZCAwIT09dD90OmkubGl0SHRtbFZlcnNpb25zPVtdKS5wdXNoKFwiMi43LjRcIik7Y29uc3QgQj0odCxpLHMpPT57dmFyIGUsbztjb25zdCBuPW51bGwhPT0oZT1udWxsPT1zP3ZvaWQgMDpzLnJlbmRlckJlZm9yZSkmJnZvaWQgMCE9PWU/ZTppO2xldCBsPW4uXyRsaXRQYXJ0JDtpZih2b2lkIDA9PT1sKXtjb25zdCB0PW51bGwhPT0obz1udWxsPT1zP3ZvaWQgMDpzLnJlbmRlckJlZm9yZSkmJnZvaWQgMCE9PW8/bzpudWxsO24uXyRsaXRQYXJ0JD1sPW5ldyBNKGkuaW5zZXJ0QmVmb3JlKGQoKSx0KSx0LHZvaWQgMCxudWxsIT1zP3M6e30pfXJldHVybiBsLl8kQUkodCksbH07ZXhwb3J0e1ogYXMgXyRMSCx4IGFzIGh0bWwsVCBhcyBub0NoYW5nZSxBIGFzIG5vdGhpbmcsQiBhcyByZW5kZXIsYiBhcyBzdmd9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGl0LWh0bWwuanMubWFwXG4iLCJpbXBvcnR7UmVhY3RpdmVFbGVtZW50IGFzIHR9ZnJvbVwiQGxpdC9yZWFjdGl2ZS1lbGVtZW50XCI7ZXhwb3J0KmZyb21cIkBsaXQvcmVhY3RpdmUtZWxlbWVudFwiO2ltcG9ydHtyZW5kZXIgYXMgZSxub0NoYW5nZSBhcyBpfWZyb21cImxpdC1odG1sXCI7ZXhwb3J0KmZyb21cImxpdC1odG1sXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi92YXIgbCxvO2NvbnN0IHI9dDtjbGFzcyBzIGV4dGVuZHMgdHtjb25zdHJ1Y3Rvcigpe3N1cGVyKC4uLmFyZ3VtZW50cyksdGhpcy5yZW5kZXJPcHRpb25zPXtob3N0OnRoaXN9LHRoaXMuXyREbz12b2lkIDB9Y3JlYXRlUmVuZGVyUm9vdCgpe3ZhciB0LGU7Y29uc3QgaT1zdXBlci5jcmVhdGVSZW5kZXJSb290KCk7cmV0dXJuIG51bGwhPT0odD0oZT10aGlzLnJlbmRlck9wdGlvbnMpLnJlbmRlckJlZm9yZSkmJnZvaWQgMCE9PXR8fChlLnJlbmRlckJlZm9yZT1pLmZpcnN0Q2hpbGQpLGl9dXBkYXRlKHQpe2NvbnN0IGk9dGhpcy5yZW5kZXIoKTt0aGlzLmhhc1VwZGF0ZWR8fCh0aGlzLnJlbmRlck9wdGlvbnMuaXNDb25uZWN0ZWQ9dGhpcy5pc0Nvbm5lY3RlZCksc3VwZXIudXBkYXRlKHQpLHRoaXMuXyREbz1lKGksdGhpcy5yZW5kZXJSb290LHRoaXMucmVuZGVyT3B0aW9ucyl9Y29ubmVjdGVkQ2FsbGJhY2soKXt2YXIgdDtzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpLG51bGw9PT0odD10aGlzLl8kRG8pfHx2b2lkIDA9PT10fHx0LnNldENvbm5lY3RlZCghMCl9ZGlzY29ubmVjdGVkQ2FsbGJhY2soKXt2YXIgdDtzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpLG51bGw9PT0odD10aGlzLl8kRG8pfHx2b2lkIDA9PT10fHx0LnNldENvbm5lY3RlZCghMSl9cmVuZGVyKCl7cmV0dXJuIGl9fXMuZmluYWxpemVkPSEwLHMuXyRsaXRFbGVtZW50JD0hMCxudWxsPT09KGw9Z2xvYmFsVGhpcy5saXRFbGVtZW50SHlkcmF0ZVN1cHBvcnQpfHx2b2lkIDA9PT1sfHxsLmNhbGwoZ2xvYmFsVGhpcyx7TGl0RWxlbWVudDpzfSk7Y29uc3Qgbj1nbG9iYWxUaGlzLmxpdEVsZW1lbnRQb2x5ZmlsbFN1cHBvcnQ7bnVsbD09bnx8bih7TGl0RWxlbWVudDpzfSk7Y29uc3QgaD17XyRBSzoodCxlLGkpPT57dC5fJEFLKGUsaSl9LF8kQUw6dD0+dC5fJEFMfTsobnVsbCE9PShvPWdsb2JhbFRoaXMubGl0RWxlbWVudFZlcnNpb25zKSYmdm9pZCAwIT09bz9vOmdsb2JhbFRoaXMubGl0RWxlbWVudFZlcnNpb25zPVtdKS5wdXNoKFwiMy4zLjJcIik7ZXhwb3J0e3MgYXMgTGl0RWxlbWVudCxyIGFzIFVwZGF0aW5nRWxlbWVudCxoIGFzIF8kTEV9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGl0LWVsZW1lbnQuanMubWFwXG4iLCJpbXBvcnR7ZGVjb3JhdGVQcm9wZXJ0eSBhcyBvfWZyb21cIi4vYmFzZS5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovdmFyIG47Y29uc3QgZT1udWxsIT0obnVsbD09PShuPXdpbmRvdy5IVE1MU2xvdEVsZW1lbnQpfHx2b2lkIDA9PT1uP3ZvaWQgMDpuLnByb3RvdHlwZS5hc3NpZ25lZEVsZW1lbnRzKT8obyxuKT0+by5hc3NpZ25lZEVsZW1lbnRzKG4pOihvLG4pPT5vLmFzc2lnbmVkTm9kZXMobikuZmlsdGVyKChvPT5vLm5vZGVUeXBlPT09Tm9kZS5FTEVNRU5UX05PREUpKTtmdW5jdGlvbiBsKG4pe2NvbnN0e3Nsb3Q6bCxzZWxlY3Rvcjp0fT1udWxsIT1uP246e307cmV0dXJuIG8oe2Rlc2NyaXB0b3I6bz0+KHtnZXQoKXt2YXIgbztjb25zdCByPVwic2xvdFwiKyhsP2BbbmFtZT0ke2x9XWA6XCI6bm90KFtuYW1lXSlcIiksaT1udWxsPT09KG89dGhpcy5yZW5kZXJSb290KXx8dm9pZCAwPT09bz92b2lkIDA6by5xdWVyeVNlbGVjdG9yKHIpLHM9bnVsbCE9aT9lKGksbik6W107cmV0dXJuIHQ/cy5maWx0ZXIoKG89Pm8ubWF0Y2hlcyh0KSkpOnN9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSl9KX1leHBvcnR7bCBhcyBxdWVyeUFzc2lnbmVkRWxlbWVudHN9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cXVlcnktYXNzaWduZWQtZWxlbWVudHMuanMubWFwXG4iLCJleHBvcnQqZnJvbVwiQGxpdC9yZWFjdGl2ZS1lbGVtZW50XCI7ZXhwb3J0KmZyb21cImxpdC1odG1sXCI7ZXhwb3J0e0xpdEVsZW1lbnQsVXBkYXRpbmdFbGVtZW50LF8kTEV9ZnJvbVwiLi9saXQtZWxlbWVudC5qc1wiO2V4cG9ydCpmcm9tXCJAbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9iYXNlLmpzXCI7ZXhwb3J0KmZyb21cIkBsaXQvcmVhY3RpdmUtZWxlbWVudC9kZWNvcmF0b3JzL2N1c3RvbS1lbGVtZW50LmpzXCI7ZXhwb3J0KmZyb21cIkBsaXQvcmVhY3RpdmUtZWxlbWVudC9kZWNvcmF0b3JzL3Byb3BlcnR5LmpzXCI7ZXhwb3J0KmZyb21cIkBsaXQvcmVhY3RpdmUtZWxlbWVudC9kZWNvcmF0b3JzL3N0YXRlLmpzXCI7ZXhwb3J0KmZyb21cIkBsaXQvcmVhY3RpdmUtZWxlbWVudC9kZWNvcmF0b3JzL2V2ZW50LW9wdGlvbnMuanNcIjtleHBvcnQqZnJvbVwiQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvcXVlcnkuanNcIjtleHBvcnQqZnJvbVwiQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvcXVlcnktYWxsLmpzXCI7ZXhwb3J0KmZyb21cIkBsaXQvcmVhY3RpdmUtZWxlbWVudC9kZWNvcmF0b3JzL3F1ZXJ5LWFzeW5jLmpzXCI7ZXhwb3J0KmZyb21cIkBsaXQvcmVhY3RpdmUtZWxlbWVudC9kZWNvcmF0b3JzL3F1ZXJ5LWFzc2lnbmVkLWVsZW1lbnRzLmpzXCI7ZXhwb3J0KmZyb21cIkBsaXQvcmVhY3RpdmUtZWxlbWVudC9kZWNvcmF0b3JzL3F1ZXJ5LWFzc2lnbmVkLW5vZGVzLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9jb25zb2xlLndhcm4oXCJUaGUgbWFpbiAnbGl0LWVsZW1lbnQnIG1vZHVsZSBlbnRyeXBvaW50IGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1cGRhdGUgeW91ciBpbXBvcnRzIHRvIHVzZSB0aGUgJ2xpdCcgcGFja2FnZTogJ2xpdCcgYW5kICdsaXQvZGVjb3JhdG9ycy50cycgb3IgaW1wb3J0IGZyb20gJ2xpdC1lbGVtZW50L2xpdC1lbGVtZW50LnRzJy4gU2VlIGh0dHBzOi8vbGl0LmRldi9tc2cvZGVwcmVjYXRlZC1pbXBvcnQtcGF0aCBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cIik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuY29uc3QgdD13aW5kb3csZT10LlNoYWRvd1Jvb3QmJih2b2lkIDA9PT10LlNoYWR5Q1NTfHx0LlNoYWR5Q1NTLm5hdGl2ZVNoYWRvdykmJlwiYWRvcHRlZFN0eWxlU2hlZXRzXCJpbiBEb2N1bWVudC5wcm90b3R5cGUmJlwicmVwbGFjZVwiaW4gQ1NTU3R5bGVTaGVldC5wcm90b3R5cGUscz1TeW1ib2woKSxuPW5ldyBXZWFrTWFwO2NsYXNzIG97Y29uc3RydWN0b3IodCxlLG4pe2lmKHRoaXMuXyRjc3NSZXN1bHQkPSEwLG4hPT1zKXRocm93IEVycm9yKFwiQ1NTUmVzdWx0IGlzIG5vdCBjb25zdHJ1Y3RhYmxlLiBVc2UgYHVuc2FmZUNTU2Agb3IgYGNzc2AgaW5zdGVhZC5cIik7dGhpcy5jc3NUZXh0PXQsdGhpcy50PWV9Z2V0IHN0eWxlU2hlZXQoKXtsZXQgdD10aGlzLm87Y29uc3Qgcz10aGlzLnQ7aWYoZSYmdm9pZCAwPT09dCl7Y29uc3QgZT12b2lkIDAhPT1zJiYxPT09cy5sZW5ndGg7ZSYmKHQ9bi5nZXQocykpLHZvaWQgMD09PXQmJigodGhpcy5vPXQ9bmV3IENTU1N0eWxlU2hlZXQpLnJlcGxhY2VTeW5jKHRoaXMuY3NzVGV4dCksZSYmbi5zZXQocyx0KSl9cmV0dXJuIHR9dG9TdHJpbmcoKXtyZXR1cm4gdGhpcy5jc3NUZXh0fX1jb25zdCByPXQ9Pm5ldyBvKFwic3RyaW5nXCI9PXR5cGVvZiB0P3Q6dCtcIlwiLHZvaWQgMCxzKSxpPSh0LC4uLmUpPT57Y29uc3Qgbj0xPT09dC5sZW5ndGg/dFswXTplLnJlZHVjZSgoKGUscyxuKT0+ZSsodD0+e2lmKCEwPT09dC5fJGNzc1Jlc3VsdCQpcmV0dXJuIHQuY3NzVGV4dDtpZihcIm51bWJlclwiPT10eXBlb2YgdClyZXR1cm4gdDt0aHJvdyBFcnJvcihcIlZhbHVlIHBhc3NlZCB0byAnY3NzJyBmdW5jdGlvbiBtdXN0IGJlIGEgJ2NzcycgZnVuY3Rpb24gcmVzdWx0OiBcIit0K1wiLiBVc2UgJ3Vuc2FmZUNTUycgdG8gcGFzcyBub24tbGl0ZXJhbCB2YWx1ZXMsIGJ1dCB0YWtlIGNhcmUgdG8gZW5zdXJlIHBhZ2Ugc2VjdXJpdHkuXCIpfSkocykrdFtuKzFdKSx0WzBdKTtyZXR1cm4gbmV3IG8obix0LHMpfSxTPShzLG4pPT57ZT9zLmFkb3B0ZWRTdHlsZVNoZWV0cz1uLm1hcCgodD0+dCBpbnN0YW5jZW9mIENTU1N0eWxlU2hlZXQ/dDp0LnN0eWxlU2hlZXQpKTpuLmZvckVhY2goKGU9Pntjb25zdCBuPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKSxvPXQubGl0Tm9uY2U7dm9pZCAwIT09byYmbi5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLG8pLG4udGV4dENvbnRlbnQ9ZS5jc3NUZXh0LHMuYXBwZW5kQ2hpbGQobil9KSl9LGM9ZT90PT50OnQ9PnQgaW5zdGFuY2VvZiBDU1NTdHlsZVNoZWV0Pyh0PT57bGV0IGU9XCJcIjtmb3IoY29uc3QgcyBvZiB0LmNzc1J1bGVzKWUrPXMuY3NzVGV4dDtyZXR1cm4gcihlKX0pKHQpOnQ7ZXhwb3J0e28gYXMgQ1NTUmVzdWx0LFMgYXMgYWRvcHRTdHlsZXMsaSBhcyBjc3MsYyBhcyBnZXRDb21wYXRpYmxlU3R5bGUsZSBhcyBzdXBwb3J0c0Fkb3B0aW5nU3R5bGVTaGVldHMsciBhcyB1bnNhZmVDU1N9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3NzLXRhZy5qcy5tYXBcbiIsImltcG9ydHtnZXRDb21wYXRpYmxlU3R5bGUgYXMgdCxhZG9wdFN0eWxlcyBhcyBpfWZyb21cIi4vY3NzLXRhZy5qc1wiO2V4cG9ydHtDU1NSZXN1bHQsYWRvcHRTdHlsZXMsY3NzLGdldENvbXBhdGlibGVTdHlsZSxzdXBwb3J0c0Fkb3B0aW5nU3R5bGVTaGVldHMsdW5zYWZlQ1NTfWZyb21cIi4vY3NzLXRhZy5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovdmFyIHM7Y29uc3QgZT13aW5kb3cscj1lLnRydXN0ZWRUeXBlcyxoPXI/ci5lbXB0eVNjcmlwdDpcIlwiLG89ZS5yZWFjdGl2ZUVsZW1lbnRQb2x5ZmlsbFN1cHBvcnQsbj17dG9BdHRyaWJ1dGUodCxpKXtzd2l0Y2goaSl7Y2FzZSBCb29sZWFuOnQ9dD9oOm51bGw7YnJlYWs7Y2FzZSBPYmplY3Q6Y2FzZSBBcnJheTp0PW51bGw9PXQ/dDpKU09OLnN0cmluZ2lmeSh0KX1yZXR1cm4gdH0sZnJvbUF0dHJpYnV0ZSh0LGkpe2xldCBzPXQ7c3dpdGNoKGkpe2Nhc2UgQm9vbGVhbjpzPW51bGwhPT10O2JyZWFrO2Nhc2UgTnVtYmVyOnM9bnVsbD09PXQ/bnVsbDpOdW1iZXIodCk7YnJlYWs7Y2FzZSBPYmplY3Q6Y2FzZSBBcnJheTp0cnl7cz1KU09OLnBhcnNlKHQpfWNhdGNoKHQpe3M9bnVsbH19cmV0dXJuIHN9fSxhPSh0LGkpPT5pIT09dCYmKGk9PWl8fHQ9PXQpLGw9e2F0dHJpYnV0ZTohMCx0eXBlOlN0cmluZyxjb252ZXJ0ZXI6bixyZWZsZWN0OiExLGhhc0NoYW5nZWQ6YX07Y2xhc3MgZCBleHRlbmRzIEhUTUxFbGVtZW50e2NvbnN0cnVjdG9yKCl7c3VwZXIoKSx0aGlzLl8kRWk9bmV3IE1hcCx0aGlzLmlzVXBkYXRlUGVuZGluZz0hMSx0aGlzLmhhc1VwZGF0ZWQ9ITEsdGhpcy5fJEVsPW51bGwsdGhpcy51KCl9c3RhdGljIGFkZEluaXRpYWxpemVyKHQpe3ZhciBpO3RoaXMuZmluYWxpemUoKSwobnVsbCE9PShpPXRoaXMuaCkmJnZvaWQgMCE9PWk/aTp0aGlzLmg9W10pLnB1c2godCl9c3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKXt0aGlzLmZpbmFsaXplKCk7Y29uc3QgdD1bXTtyZXR1cm4gdGhpcy5lbGVtZW50UHJvcGVydGllcy5mb3JFYWNoKCgoaSxzKT0+e2NvbnN0IGU9dGhpcy5fJEVwKHMsaSk7dm9pZCAwIT09ZSYmKHRoaXMuXyRFdi5zZXQoZSxzKSx0LnB1c2goZSkpfSkpLHR9c3RhdGljIGNyZWF0ZVByb3BlcnR5KHQsaT1sKXtpZihpLnN0YXRlJiYoaS5hdHRyaWJ1dGU9ITEpLHRoaXMuZmluYWxpemUoKSx0aGlzLmVsZW1lbnRQcm9wZXJ0aWVzLnNldCh0LGkpLCFpLm5vQWNjZXNzb3ImJiF0aGlzLnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSh0KSl7Y29uc3Qgcz1cInN5bWJvbFwiPT10eXBlb2YgdD9TeW1ib2woKTpcIl9fXCIrdCxlPXRoaXMuZ2V0UHJvcGVydHlEZXNjcmlwdG9yKHQscyxpKTt2b2lkIDAhPT1lJiZPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5wcm90b3R5cGUsdCxlKX19c3RhdGljIGdldFByb3BlcnR5RGVzY3JpcHRvcih0LGkscyl7cmV0dXJue2dldCgpe3JldHVybiB0aGlzW2ldfSxzZXQoZSl7Y29uc3Qgcj10aGlzW3RdO3RoaXNbaV09ZSx0aGlzLnJlcXVlc3RVcGRhdGUodCxyLHMpfSxjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMH19c3RhdGljIGdldFByb3BlcnR5T3B0aW9ucyh0KXtyZXR1cm4gdGhpcy5lbGVtZW50UHJvcGVydGllcy5nZXQodCl8fGx9c3RhdGljIGZpbmFsaXplKCl7aWYodGhpcy5oYXNPd25Qcm9wZXJ0eShcImZpbmFsaXplZFwiKSlyZXR1cm4hMTt0aGlzLmZpbmFsaXplZD0hMDtjb25zdCB0PU9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKTtpZih0LmZpbmFsaXplKCksdm9pZCAwIT09dC5oJiYodGhpcy5oPVsuLi50LmhdKSx0aGlzLmVsZW1lbnRQcm9wZXJ0aWVzPW5ldyBNYXAodC5lbGVtZW50UHJvcGVydGllcyksdGhpcy5fJEV2PW5ldyBNYXAsdGhpcy5oYXNPd25Qcm9wZXJ0eShcInByb3BlcnRpZXNcIikpe2NvbnN0IHQ9dGhpcy5wcm9wZXJ0aWVzLGk9Wy4uLk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHQpLC4uLk9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModCldO2Zvcihjb25zdCBzIG9mIGkpdGhpcy5jcmVhdGVQcm9wZXJ0eShzLHRbc10pfXJldHVybiB0aGlzLmVsZW1lbnRTdHlsZXM9dGhpcy5maW5hbGl6ZVN0eWxlcyh0aGlzLnN0eWxlcyksITB9c3RhdGljIGZpbmFsaXplU3R5bGVzKGkpe2NvbnN0IHM9W107aWYoQXJyYXkuaXNBcnJheShpKSl7Y29uc3QgZT1uZXcgU2V0KGkuZmxhdCgxLzApLnJldmVyc2UoKSk7Zm9yKGNvbnN0IGkgb2YgZSlzLnVuc2hpZnQodChpKSl9ZWxzZSB2b2lkIDAhPT1pJiZzLnB1c2godChpKSk7cmV0dXJuIHN9c3RhdGljIF8kRXAodCxpKXtjb25zdCBzPWkuYXR0cmlidXRlO3JldHVybiExPT09cz92b2lkIDA6XCJzdHJpbmdcIj09dHlwZW9mIHM/czpcInN0cmluZ1wiPT10eXBlb2YgdD90LnRvTG93ZXJDYXNlKCk6dm9pZCAwfXUoKXt2YXIgdDt0aGlzLl8kRV89bmV3IFByb21pc2UoKHQ9PnRoaXMuZW5hYmxlVXBkYXRpbmc9dCkpLHRoaXMuXyRBTD1uZXcgTWFwLHRoaXMuXyRFZygpLHRoaXMucmVxdWVzdFVwZGF0ZSgpLG51bGw9PT0odD10aGlzLmNvbnN0cnVjdG9yLmgpfHx2b2lkIDA9PT10fHx0LmZvckVhY2goKHQ9PnQodGhpcykpKX1hZGRDb250cm9sbGVyKHQpe3ZhciBpLHM7KG51bGwhPT0oaT10aGlzLl8kRVMpJiZ2b2lkIDAhPT1pP2k6dGhpcy5fJEVTPVtdKS5wdXNoKHQpLHZvaWQgMCE9PXRoaXMucmVuZGVyUm9vdCYmdGhpcy5pc0Nvbm5lY3RlZCYmKG51bGw9PT0ocz10Lmhvc3RDb25uZWN0ZWQpfHx2b2lkIDA9PT1zfHxzLmNhbGwodCkpfXJlbW92ZUNvbnRyb2xsZXIodCl7dmFyIGk7bnVsbD09PShpPXRoaXMuXyRFUyl8fHZvaWQgMD09PWl8fGkuc3BsaWNlKHRoaXMuXyRFUy5pbmRleE9mKHQpPj4+MCwxKX1fJEVnKCl7dGhpcy5jb25zdHJ1Y3Rvci5lbGVtZW50UHJvcGVydGllcy5mb3JFYWNoKCgodCxpKT0+e3RoaXMuaGFzT3duUHJvcGVydHkoaSkmJih0aGlzLl8kRWkuc2V0KGksdGhpc1tpXSksZGVsZXRlIHRoaXNbaV0pfSkpfWNyZWF0ZVJlbmRlclJvb3QoKXt2YXIgdDtjb25zdCBzPW51bGwhPT0odD10aGlzLnNoYWRvd1Jvb3QpJiZ2b2lkIDAhPT10P3Q6dGhpcy5hdHRhY2hTaGFkb3codGhpcy5jb25zdHJ1Y3Rvci5zaGFkb3dSb290T3B0aW9ucyk7cmV0dXJuIGkocyx0aGlzLmNvbnN0cnVjdG9yLmVsZW1lbnRTdHlsZXMpLHN9Y29ubmVjdGVkQ2FsbGJhY2soKXt2YXIgdDt2b2lkIDA9PT10aGlzLnJlbmRlclJvb3QmJih0aGlzLnJlbmRlclJvb3Q9dGhpcy5jcmVhdGVSZW5kZXJSb290KCkpLHRoaXMuZW5hYmxlVXBkYXRpbmcoITApLG51bGw9PT0odD10aGlzLl8kRVMpfHx2b2lkIDA9PT10fHx0LmZvckVhY2goKHQ9Pnt2YXIgaTtyZXR1cm4gbnVsbD09PShpPXQuaG9zdENvbm5lY3RlZCl8fHZvaWQgMD09PWk/dm9pZCAwOmkuY2FsbCh0KX0pKX1lbmFibGVVcGRhdGluZyh0KXt9ZGlzY29ubmVjdGVkQ2FsbGJhY2soKXt2YXIgdDtudWxsPT09KHQ9dGhpcy5fJEVTKXx8dm9pZCAwPT09dHx8dC5mb3JFYWNoKCh0PT57dmFyIGk7cmV0dXJuIG51bGw9PT0oaT10Lmhvc3REaXNjb25uZWN0ZWQpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLmNhbGwodCl9KSl9YXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKHQsaSxzKXt0aGlzLl8kQUsodCxzKX1fJEVPKHQsaSxzPWwpe3ZhciBlO2NvbnN0IHI9dGhpcy5jb25zdHJ1Y3Rvci5fJEVwKHQscyk7aWYodm9pZCAwIT09ciYmITA9PT1zLnJlZmxlY3Qpe2NvbnN0IGg9KHZvaWQgMCE9PShudWxsPT09KGU9cy5jb252ZXJ0ZXIpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLnRvQXR0cmlidXRlKT9zLmNvbnZlcnRlcjpuKS50b0F0dHJpYnV0ZShpLHMudHlwZSk7dGhpcy5fJEVsPXQsbnVsbD09aD90aGlzLnJlbW92ZUF0dHJpYnV0ZShyKTp0aGlzLnNldEF0dHJpYnV0ZShyLGgpLHRoaXMuXyRFbD1udWxsfX1fJEFLKHQsaSl7dmFyIHM7Y29uc3QgZT10aGlzLmNvbnN0cnVjdG9yLHI9ZS5fJEV2LmdldCh0KTtpZih2b2lkIDAhPT1yJiZ0aGlzLl8kRWwhPT1yKXtjb25zdCB0PWUuZ2V0UHJvcGVydHlPcHRpb25zKHIpLGg9XCJmdW5jdGlvblwiPT10eXBlb2YgdC5jb252ZXJ0ZXI/e2Zyb21BdHRyaWJ1dGU6dC5jb252ZXJ0ZXJ9OnZvaWQgMCE9PShudWxsPT09KHM9dC5jb252ZXJ0ZXIpfHx2b2lkIDA9PT1zP3ZvaWQgMDpzLmZyb21BdHRyaWJ1dGUpP3QuY29udmVydGVyOm47dGhpcy5fJEVsPXIsdGhpc1tyXT1oLmZyb21BdHRyaWJ1dGUoaSx0LnR5cGUpLHRoaXMuXyRFbD1udWxsfX1yZXF1ZXN0VXBkYXRlKHQsaSxzKXtsZXQgZT0hMDt2b2lkIDAhPT10JiYoKChzPXN8fHRoaXMuY29uc3RydWN0b3IuZ2V0UHJvcGVydHlPcHRpb25zKHQpKS5oYXNDaGFuZ2VkfHxhKSh0aGlzW3RdLGkpPyh0aGlzLl8kQUwuaGFzKHQpfHx0aGlzLl8kQUwuc2V0KHQsaSksITA9PT1zLnJlZmxlY3QmJnRoaXMuXyRFbCE9PXQmJih2b2lkIDA9PT10aGlzLl8kRUMmJih0aGlzLl8kRUM9bmV3IE1hcCksdGhpcy5fJEVDLnNldCh0LHMpKSk6ZT0hMSksIXRoaXMuaXNVcGRhdGVQZW5kaW5nJiZlJiYodGhpcy5fJEVfPXRoaXMuXyRFaigpKX1hc3luYyBfJEVqKCl7dGhpcy5pc1VwZGF0ZVBlbmRpbmc9ITA7dHJ5e2F3YWl0IHRoaXMuXyRFX31jYXRjaCh0KXtQcm9taXNlLnJlamVjdCh0KX1jb25zdCB0PXRoaXMuc2NoZWR1bGVVcGRhdGUoKTtyZXR1cm4gbnVsbCE9dCYmYXdhaXQgdCwhdGhpcy5pc1VwZGF0ZVBlbmRpbmd9c2NoZWR1bGVVcGRhdGUoKXtyZXR1cm4gdGhpcy5wZXJmb3JtVXBkYXRlKCl9cGVyZm9ybVVwZGF0ZSgpe3ZhciB0O2lmKCF0aGlzLmlzVXBkYXRlUGVuZGluZylyZXR1cm47dGhpcy5oYXNVcGRhdGVkLHRoaXMuXyRFaSYmKHRoaXMuXyRFaS5mb3JFYWNoKCgodCxpKT0+dGhpc1tpXT10KSksdGhpcy5fJEVpPXZvaWQgMCk7bGV0IGk9ITE7Y29uc3Qgcz10aGlzLl8kQUw7dHJ5e2k9dGhpcy5zaG91bGRVcGRhdGUocyksaT8odGhpcy53aWxsVXBkYXRlKHMpLG51bGw9PT0odD10aGlzLl8kRVMpfHx2b2lkIDA9PT10fHx0LmZvckVhY2goKHQ9Pnt2YXIgaTtyZXR1cm4gbnVsbD09PShpPXQuaG9zdFVwZGF0ZSl8fHZvaWQgMD09PWk/dm9pZCAwOmkuY2FsbCh0KX0pKSx0aGlzLnVwZGF0ZShzKSk6dGhpcy5fJEVrKCl9Y2F0Y2godCl7dGhyb3cgaT0hMSx0aGlzLl8kRWsoKSx0fWkmJnRoaXMuXyRBRShzKX13aWxsVXBkYXRlKHQpe31fJEFFKHQpe3ZhciBpO251bGw9PT0oaT10aGlzLl8kRVMpfHx2b2lkIDA9PT1pfHxpLmZvckVhY2goKHQ9Pnt2YXIgaTtyZXR1cm4gbnVsbD09PShpPXQuaG9zdFVwZGF0ZWQpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLmNhbGwodCl9KSksdGhpcy5oYXNVcGRhdGVkfHwodGhpcy5oYXNVcGRhdGVkPSEwLHRoaXMuZmlyc3RVcGRhdGVkKHQpKSx0aGlzLnVwZGF0ZWQodCl9XyRFaygpe3RoaXMuXyRBTD1uZXcgTWFwLHRoaXMuaXNVcGRhdGVQZW5kaW5nPSExfWdldCB1cGRhdGVDb21wbGV0ZSgpe3JldHVybiB0aGlzLmdldFVwZGF0ZUNvbXBsZXRlKCl9Z2V0VXBkYXRlQ29tcGxldGUoKXtyZXR1cm4gdGhpcy5fJEVffXNob3VsZFVwZGF0ZSh0KXtyZXR1cm4hMH11cGRhdGUodCl7dm9pZCAwIT09dGhpcy5fJEVDJiYodGhpcy5fJEVDLmZvckVhY2goKCh0LGkpPT50aGlzLl8kRU8oaSx0aGlzW2ldLHQpKSksdGhpcy5fJEVDPXZvaWQgMCksdGhpcy5fJEVrKCl9dXBkYXRlZCh0KXt9Zmlyc3RVcGRhdGVkKHQpe319ZC5maW5hbGl6ZWQ9ITAsZC5lbGVtZW50UHJvcGVydGllcz1uZXcgTWFwLGQuZWxlbWVudFN0eWxlcz1bXSxkLnNoYWRvd1Jvb3RPcHRpb25zPXttb2RlOlwib3BlblwifSxudWxsPT1vfHxvKHtSZWFjdGl2ZUVsZW1lbnQ6ZH0pLChudWxsIT09KHM9ZS5yZWFjdGl2ZUVsZW1lbnRWZXJzaW9ucykmJnZvaWQgMCE9PXM/czplLnJlYWN0aXZlRWxlbWVudFZlcnNpb25zPVtdKS5wdXNoKFwiMS42LjFcIik7ZXhwb3J0e2QgYXMgUmVhY3RpdmVFbGVtZW50LG4gYXMgZGVmYXVsdENvbnZlcnRlcixhIGFzIG5vdEVxdWFsfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0aXZlLWVsZW1lbnQuanMubWFwXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cbnZhciB0O2NvbnN0IGk9d2luZG93LHM9aS50cnVzdGVkVHlwZXMsZT1zP3MuY3JlYXRlUG9saWN5KFwibGl0LWh0bWxcIix7Y3JlYXRlSFRNTDp0PT50fSk6dm9pZCAwLG89XCIkbGl0JFwiLG49YGxpdCQkeyhNYXRoLnJhbmRvbSgpK1wiXCIpLnNsaWNlKDkpfSRgLGw9XCI/XCIrbixoPWA8JHtsfT5gLHI9ZG9jdW1lbnQsZD0oKT0+ci5jcmVhdGVDb21tZW50KFwiXCIpLHU9dD0+bnVsbD09PXR8fFwib2JqZWN0XCIhPXR5cGVvZiB0JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0LGM9QXJyYXkuaXNBcnJheSx2PXQ9PmModCl8fFwiZnVuY3Rpb25cIj09dHlwZW9mKG51bGw9PXQ/dm9pZCAwOnRbU3ltYm9sLml0ZXJhdG9yXSksYT1cIlsgXFx0XFxuXFxmXFxyXVwiLGY9LzwoPzooIS0tfFxcL1teYS16QS1aXSl8KFxcLz9bYS16QS1aXVtePlxcc10qKXwoXFwvPyQpKS9nLF89Ly0tPi9nLG09Lz4vZyxwPVJlZ0V4cChgPnwke2F9KD86KFteXFxcXHNcIic+PS9dKykoJHthfSo9JHthfSooPzpbXiBcXHRcXG5cXGZcXHJcIidcXGA8Pj1dfChcInwnKXwpKXwkKWAsXCJnXCIpLGc9LycvZywkPS9cIi9nLHk9L14oPzpzY3JpcHR8c3R5bGV8dGV4dGFyZWF8dGl0bGUpJC9pLHc9dD0+KGksLi4ucyk9Pih7XyRsaXRUeXBlJDp0LHN0cmluZ3M6aSx2YWx1ZXM6c30pLHg9dygxKSxiPXcoMiksVD1TeW1ib2wuZm9yKFwibGl0LW5vQ2hhbmdlXCIpLEE9U3ltYm9sLmZvcihcImxpdC1ub3RoaW5nXCIpLEU9bmV3IFdlYWtNYXAsQz1yLmNyZWF0ZVRyZWVXYWxrZXIociwxMjksbnVsbCwhMSksUD0odCxpKT0+e2NvbnN0IHM9dC5sZW5ndGgtMSxsPVtdO2xldCByLGQ9Mj09PWk/XCI8c3ZnPlwiOlwiXCIsdT1mO2ZvcihsZXQgaT0wO2k8cztpKyspe2NvbnN0IHM9dFtpXTtsZXQgZSxjLHY9LTEsYT0wO2Zvcig7YTxzLmxlbmd0aCYmKHUubGFzdEluZGV4PWEsYz11LmV4ZWMocyksbnVsbCE9PWMpOylhPXUubGFzdEluZGV4LHU9PT1mP1wiIS0tXCI9PT1jWzFdP3U9Xzp2b2lkIDAhPT1jWzFdP3U9bTp2b2lkIDAhPT1jWzJdPyh5LnRlc3QoY1syXSkmJihyPVJlZ0V4cChcIjwvXCIrY1syXSxcImdcIikpLHU9cCk6dm9pZCAwIT09Y1szXSYmKHU9cCk6dT09PXA/XCI+XCI9PT1jWzBdPyh1PW51bGwhPXI/cjpmLHY9LTEpOnZvaWQgMD09PWNbMV0/dj0tMjoodj11Lmxhc3RJbmRleC1jWzJdLmxlbmd0aCxlPWNbMV0sdT12b2lkIDA9PT1jWzNdP3A6J1wiJz09PWNbM10/JDpnKTp1PT09JHx8dT09PWc/dT1wOnU9PT1ffHx1PT09bT91PWY6KHU9cCxyPXZvaWQgMCk7Y29uc3Qgdz11PT09cCYmdFtpKzFdLnN0YXJ0c1dpdGgoXCIvPlwiKT9cIiBcIjpcIlwiO2QrPXU9PT1mP3MraDp2Pj0wPyhsLnB1c2goZSkscy5zbGljZSgwLHYpK28rcy5zbGljZSh2KStuK3cpOnMrbisoLTI9PT12PyhsLnB1c2godm9pZCAwKSxpKTp3KX1jb25zdCBjPWQrKHRbc118fFwiPD8+XCIpKygyPT09aT9cIjwvc3ZnPlwiOlwiXCIpO2lmKCFBcnJheS5pc0FycmF5KHQpfHwhdC5oYXNPd25Qcm9wZXJ0eShcInJhd1wiKSl0aHJvdyBFcnJvcihcImludmFsaWQgdGVtcGxhdGUgc3RyaW5ncyBhcnJheVwiKTtyZXR1cm5bdm9pZCAwIT09ZT9lLmNyZWF0ZUhUTUwoYyk6YyxsXX07Y2xhc3MgVntjb25zdHJ1Y3Rvcih7c3RyaW5nczp0LF8kbGl0VHlwZSQ6aX0sZSl7bGV0IGg7dGhpcy5wYXJ0cz1bXTtsZXQgcj0wLHU9MDtjb25zdCBjPXQubGVuZ3RoLTEsdj10aGlzLnBhcnRzLFthLGZdPVAodCxpKTtpZih0aGlzLmVsPVYuY3JlYXRlRWxlbWVudChhLGUpLEMuY3VycmVudE5vZGU9dGhpcy5lbC5jb250ZW50LDI9PT1pKXtjb25zdCB0PXRoaXMuZWwuY29udGVudCxpPXQuZmlyc3RDaGlsZDtpLnJlbW92ZSgpLHQuYXBwZW5kKC4uLmkuY2hpbGROb2Rlcyl9Zm9yKDtudWxsIT09KGg9Qy5uZXh0Tm9kZSgpKSYmdi5sZW5ndGg8Yzspe2lmKDE9PT1oLm5vZGVUeXBlKXtpZihoLmhhc0F0dHJpYnV0ZXMoKSl7Y29uc3QgdD1bXTtmb3IoY29uc3QgaSBvZiBoLmdldEF0dHJpYnV0ZU5hbWVzKCkpaWYoaS5lbmRzV2l0aChvKXx8aS5zdGFydHNXaXRoKG4pKXtjb25zdCBzPWZbdSsrXTtpZih0LnB1c2goaSksdm9pZCAwIT09cyl7Y29uc3QgdD1oLmdldEF0dHJpYnV0ZShzLnRvTG93ZXJDYXNlKCkrbykuc3BsaXQobiksaT0vKFsuP0BdKT8oLiopLy5leGVjKHMpO3YucHVzaCh7dHlwZToxLGluZGV4OnIsbmFtZTppWzJdLHN0cmluZ3M6dCxjdG9yOlwiLlwiPT09aVsxXT9rOlwiP1wiPT09aVsxXT9JOlwiQFwiPT09aVsxXT9MOlJ9KX1lbHNlIHYucHVzaCh7dHlwZTo2LGluZGV4OnJ9KX1mb3IoY29uc3QgaSBvZiB0KWgucmVtb3ZlQXR0cmlidXRlKGkpfWlmKHkudGVzdChoLnRhZ05hbWUpKXtjb25zdCB0PWgudGV4dENvbnRlbnQuc3BsaXQobiksaT10Lmxlbmd0aC0xO2lmKGk+MCl7aC50ZXh0Q29udGVudD1zP3MuZW1wdHlTY3JpcHQ6XCJcIjtmb3IobGV0IHM9MDtzPGk7cysrKWguYXBwZW5kKHRbc10sZCgpKSxDLm5leHROb2RlKCksdi5wdXNoKHt0eXBlOjIsaW5kZXg6KytyfSk7aC5hcHBlbmQodFtpXSxkKCkpfX19ZWxzZSBpZig4PT09aC5ub2RlVHlwZSlpZihoLmRhdGE9PT1sKXYucHVzaCh7dHlwZToyLGluZGV4OnJ9KTtlbHNle2xldCB0PS0xO2Zvcig7LTEhPT0odD1oLmRhdGEuaW5kZXhPZihuLHQrMSkpOyl2LnB1c2goe3R5cGU6NyxpbmRleDpyfSksdCs9bi5sZW5ndGgtMX1yKyt9fXN0YXRpYyBjcmVhdGVFbGVtZW50KHQsaSl7Y29uc3Qgcz1yLmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKTtyZXR1cm4gcy5pbm5lckhUTUw9dCxzfX1mdW5jdGlvbiBOKHQsaSxzPXQsZSl7dmFyIG8sbixsLGg7aWYoaT09PVQpcmV0dXJuIGk7bGV0IHI9dm9pZCAwIT09ZT9udWxsPT09KG89cy5fJENvKXx8dm9pZCAwPT09bz92b2lkIDA6b1tlXTpzLl8kQ2w7Y29uc3QgZD11KGkpP3ZvaWQgMDppLl8kbGl0RGlyZWN0aXZlJDtyZXR1cm4obnVsbD09cj92b2lkIDA6ci5jb25zdHJ1Y3RvcikhPT1kJiYobnVsbD09PShuPW51bGw9PXI/dm9pZCAwOnIuXyRBTyl8fHZvaWQgMD09PW58fG4uY2FsbChyLCExKSx2b2lkIDA9PT1kP3I9dm9pZCAwOihyPW5ldyBkKHQpLHIuXyRBVCh0LHMsZSkpLHZvaWQgMCE9PWU/KG51bGwhPT0obD0oaD1zKS5fJENvKSYmdm9pZCAwIT09bD9sOmguXyRDbz1bXSlbZV09cjpzLl8kQ2w9ciksdm9pZCAwIT09ciYmKGk9Tih0LHIuXyRBUyh0LGkudmFsdWVzKSxyLGUpKSxpfWNsYXNzIFN7Y29uc3RydWN0b3IodCxpKXt0aGlzLl8kQVY9W10sdGhpcy5fJEFOPXZvaWQgMCx0aGlzLl8kQUQ9dCx0aGlzLl8kQU09aX1nZXQgcGFyZW50Tm9kZSgpe3JldHVybiB0aGlzLl8kQU0ucGFyZW50Tm9kZX1nZXQgXyRBVSgpe3JldHVybiB0aGlzLl8kQU0uXyRBVX11KHQpe3ZhciBpO2NvbnN0e2VsOntjb250ZW50OnN9LHBhcnRzOmV9PXRoaXMuXyRBRCxvPShudWxsIT09KGk9bnVsbD09dD92b2lkIDA6dC5jcmVhdGlvblNjb3BlKSYmdm9pZCAwIT09aT9pOnIpLmltcG9ydE5vZGUocywhMCk7Qy5jdXJyZW50Tm9kZT1vO2xldCBuPUMubmV4dE5vZGUoKSxsPTAsaD0wLGQ9ZVswXTtmb3IoO3ZvaWQgMCE9PWQ7KXtpZihsPT09ZC5pbmRleCl7bGV0IGk7Mj09PWQudHlwZT9pPW5ldyBNKG4sbi5uZXh0U2libGluZyx0aGlzLHQpOjE9PT1kLnR5cGU/aT1uZXcgZC5jdG9yKG4sZC5uYW1lLGQuc3RyaW5ncyx0aGlzLHQpOjY9PT1kLnR5cGUmJihpPW5ldyB6KG4sdGhpcyx0KSksdGhpcy5fJEFWLnB1c2goaSksZD1lWysraF19bCE9PShudWxsPT1kP3ZvaWQgMDpkLmluZGV4KSYmKG49Qy5uZXh0Tm9kZSgpLGwrKyl9cmV0dXJuIEMuY3VycmVudE5vZGU9cixvfXYodCl7bGV0IGk9MDtmb3IoY29uc3QgcyBvZiB0aGlzLl8kQVYpdm9pZCAwIT09cyYmKHZvaWQgMCE9PXMuc3RyaW5ncz8ocy5fJEFJKHQscyxpKSxpKz1zLnN0cmluZ3MubGVuZ3RoLTIpOnMuXyRBSSh0W2ldKSksaSsrfX1jbGFzcyBNe2NvbnN0cnVjdG9yKHQsaSxzLGUpe3ZhciBvO3RoaXMudHlwZT0yLHRoaXMuXyRBSD1BLHRoaXMuXyRBTj12b2lkIDAsdGhpcy5fJEFBPXQsdGhpcy5fJEFCPWksdGhpcy5fJEFNPXMsdGhpcy5vcHRpb25zPWUsdGhpcy5fJENwPW51bGw9PT0obz1udWxsPT1lP3ZvaWQgMDplLmlzQ29ubmVjdGVkKXx8dm9pZCAwPT09b3x8b31nZXQgXyRBVSgpe3ZhciB0LGk7cmV0dXJuIG51bGwhPT0oaT1udWxsPT09KHQ9dGhpcy5fJEFNKXx8dm9pZCAwPT09dD92b2lkIDA6dC5fJEFVKSYmdm9pZCAwIT09aT9pOnRoaXMuXyRDcH1nZXQgcGFyZW50Tm9kZSgpe2xldCB0PXRoaXMuXyRBQS5wYXJlbnROb2RlO2NvbnN0IGk9dGhpcy5fJEFNO3JldHVybiB2b2lkIDAhPT1pJiYxMT09PShudWxsPT10P3ZvaWQgMDp0Lm5vZGVUeXBlKSYmKHQ9aS5wYXJlbnROb2RlKSx0fWdldCBzdGFydE5vZGUoKXtyZXR1cm4gdGhpcy5fJEFBfWdldCBlbmROb2RlKCl7cmV0dXJuIHRoaXMuXyRBQn1fJEFJKHQsaT10aGlzKXt0PU4odGhpcyx0LGkpLHUodCk/dD09PUF8fG51bGw9PXR8fFwiXCI9PT10Pyh0aGlzLl8kQUghPT1BJiZ0aGlzLl8kQVIoKSx0aGlzLl8kQUg9QSk6dCE9PXRoaXMuXyRBSCYmdCE9PVQmJnRoaXMuXyh0KTp2b2lkIDAhPT10Ll8kbGl0VHlwZSQ/dGhpcy5nKHQpOnZvaWQgMCE9PXQubm9kZVR5cGU/dGhpcy4kKHQpOnYodCk/dGhpcy5UKHQpOnRoaXMuXyh0KX1rKHQpe3JldHVybiB0aGlzLl8kQUEucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodCx0aGlzLl8kQUIpfSQodCl7dGhpcy5fJEFIIT09dCYmKHRoaXMuXyRBUigpLHRoaXMuXyRBSD10aGlzLmsodCkpfV8odCl7dGhpcy5fJEFIIT09QSYmdSh0aGlzLl8kQUgpP3RoaXMuXyRBQS5uZXh0U2libGluZy5kYXRhPXQ6dGhpcy4kKHIuY3JlYXRlVGV4dE5vZGUodCkpLHRoaXMuXyRBSD10fWcodCl7dmFyIGk7Y29uc3R7dmFsdWVzOnMsXyRsaXRUeXBlJDplfT10LG89XCJudW1iZXJcIj09dHlwZW9mIGU/dGhpcy5fJEFDKHQpOih2b2lkIDA9PT1lLmVsJiYoZS5lbD1WLmNyZWF0ZUVsZW1lbnQoZS5oLHRoaXMub3B0aW9ucykpLGUpO2lmKChudWxsPT09KGk9dGhpcy5fJEFIKXx8dm9pZCAwPT09aT92b2lkIDA6aS5fJEFEKT09PW8pdGhpcy5fJEFILnYocyk7ZWxzZXtjb25zdCB0PW5ldyBTKG8sdGhpcyksaT10LnUodGhpcy5vcHRpb25zKTt0LnYocyksdGhpcy4kKGkpLHRoaXMuXyRBSD10fX1fJEFDKHQpe2xldCBpPUUuZ2V0KHQuc3RyaW5ncyk7cmV0dXJuIHZvaWQgMD09PWkmJkUuc2V0KHQuc3RyaW5ncyxpPW5ldyBWKHQpKSxpfVQodCl7Yyh0aGlzLl8kQUgpfHwodGhpcy5fJEFIPVtdLHRoaXMuXyRBUigpKTtjb25zdCBpPXRoaXMuXyRBSDtsZXQgcyxlPTA7Zm9yKGNvbnN0IG8gb2YgdCllPT09aS5sZW5ndGg/aS5wdXNoKHM9bmV3IE0odGhpcy5rKGQoKSksdGhpcy5rKGQoKSksdGhpcyx0aGlzLm9wdGlvbnMpKTpzPWlbZV0scy5fJEFJKG8pLGUrKztlPGkubGVuZ3RoJiYodGhpcy5fJEFSKHMmJnMuXyRBQi5uZXh0U2libGluZyxlKSxpLmxlbmd0aD1lKX1fJEFSKHQ9dGhpcy5fJEFBLm5leHRTaWJsaW5nLGkpe3ZhciBzO2ZvcihudWxsPT09KHM9dGhpcy5fJEFQKXx8dm9pZCAwPT09c3x8cy5jYWxsKHRoaXMsITEsITAsaSk7dCYmdCE9PXRoaXMuXyRBQjspe2NvbnN0IGk9dC5uZXh0U2libGluZzt0LnJlbW92ZSgpLHQ9aX19c2V0Q29ubmVjdGVkKHQpe3ZhciBpO3ZvaWQgMD09PXRoaXMuXyRBTSYmKHRoaXMuXyRDcD10LG51bGw9PT0oaT10aGlzLl8kQVApfHx2b2lkIDA9PT1pfHxpLmNhbGwodGhpcyx0KSl9fWNsYXNzIFJ7Y29uc3RydWN0b3IodCxpLHMsZSxvKXt0aGlzLnR5cGU9MSx0aGlzLl8kQUg9QSx0aGlzLl8kQU49dm9pZCAwLHRoaXMuZWxlbWVudD10LHRoaXMubmFtZT1pLHRoaXMuXyRBTT1lLHRoaXMub3B0aW9ucz1vLHMubGVuZ3RoPjJ8fFwiXCIhPT1zWzBdfHxcIlwiIT09c1sxXT8odGhpcy5fJEFIPUFycmF5KHMubGVuZ3RoLTEpLmZpbGwobmV3IFN0cmluZyksdGhpcy5zdHJpbmdzPXMpOnRoaXMuXyRBSD1BfWdldCB0YWdOYW1lKCl7cmV0dXJuIHRoaXMuZWxlbWVudC50YWdOYW1lfWdldCBfJEFVKCl7cmV0dXJuIHRoaXMuXyRBTS5fJEFVfV8kQUkodCxpPXRoaXMscyxlKXtjb25zdCBvPXRoaXMuc3RyaW5ncztsZXQgbj0hMTtpZih2b2lkIDA9PT1vKXQ9Tih0aGlzLHQsaSwwKSxuPSF1KHQpfHx0IT09dGhpcy5fJEFIJiZ0IT09VCxuJiYodGhpcy5fJEFIPXQpO2Vsc2V7Y29uc3QgZT10O2xldCBsLGg7Zm9yKHQ9b1swXSxsPTA7bDxvLmxlbmd0aC0xO2wrKyloPU4odGhpcyxlW3MrbF0saSxsKSxoPT09VCYmKGg9dGhpcy5fJEFIW2xdKSxufHwobj0hdShoKXx8aCE9PXRoaXMuXyRBSFtsXSksaD09PUE/dD1BOnQhPT1BJiYodCs9KG51bGwhPWg/aDpcIlwiKStvW2wrMV0pLHRoaXMuXyRBSFtsXT1ofW4mJiFlJiZ0aGlzLmoodCl9aih0KXt0PT09QT90aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKHRoaXMubmFtZSk6dGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSh0aGlzLm5hbWUsbnVsbCE9dD90OlwiXCIpfX1jbGFzcyBrIGV4dGVuZHMgUntjb25zdHJ1Y3Rvcigpe3N1cGVyKC4uLmFyZ3VtZW50cyksdGhpcy50eXBlPTN9aih0KXt0aGlzLmVsZW1lbnRbdGhpcy5uYW1lXT10PT09QT92b2lkIDA6dH19Y29uc3QgSD1zP3MuZW1wdHlTY3JpcHQ6XCJcIjtjbGFzcyBJIGV4dGVuZHMgUntjb25zdHJ1Y3Rvcigpe3N1cGVyKC4uLmFyZ3VtZW50cyksdGhpcy50eXBlPTR9aih0KXt0JiZ0IT09QT90aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKHRoaXMubmFtZSxIKTp0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKHRoaXMubmFtZSl9fWNsYXNzIEwgZXh0ZW5kcyBSe2NvbnN0cnVjdG9yKHQsaSxzLGUsbyl7c3VwZXIodCxpLHMsZSxvKSx0aGlzLnR5cGU9NX1fJEFJKHQsaT10aGlzKXt2YXIgcztpZigodD1udWxsIT09KHM9Tih0aGlzLHQsaSwwKSkmJnZvaWQgMCE9PXM/czpBKT09PVQpcmV0dXJuO2NvbnN0IGU9dGhpcy5fJEFILG89dD09PUEmJmUhPT1BfHx0LmNhcHR1cmUhPT1lLmNhcHR1cmV8fHQub25jZSE9PWUub25jZXx8dC5wYXNzaXZlIT09ZS5wYXNzaXZlLG49dCE9PUEmJihlPT09QXx8byk7byYmdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcy5uYW1lLHRoaXMsZSksbiYmdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodGhpcy5uYW1lLHRoaXMsdCksdGhpcy5fJEFIPXR9aGFuZGxlRXZlbnQodCl7dmFyIGkscztcImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLl8kQUg/dGhpcy5fJEFILmNhbGwobnVsbCE9PShzPW51bGw9PT0oaT10aGlzLm9wdGlvbnMpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLmhvc3QpJiZ2b2lkIDAhPT1zP3M6dGhpcy5lbGVtZW50LHQpOnRoaXMuXyRBSC5oYW5kbGVFdmVudCh0KX19Y2xhc3Mgentjb25zdHJ1Y3Rvcih0LGkscyl7dGhpcy5lbGVtZW50PXQsdGhpcy50eXBlPTYsdGhpcy5fJEFOPXZvaWQgMCx0aGlzLl8kQU09aSx0aGlzLm9wdGlvbnM9c31nZXQgXyRBVSgpe3JldHVybiB0aGlzLl8kQU0uXyRBVX1fJEFJKHQpe04odGhpcyx0KX19Y29uc3QgWj17TzpvLFA6bixBOmwsQzoxLE06UCxMOlMsRDp2LFI6TixJOk0sVjpSLEg6SSxOOkwsVTprLEY6en0saj1pLmxpdEh0bWxQb2x5ZmlsbFN1cHBvcnQ7bnVsbD09anx8aihWLE0pLChudWxsIT09KHQ9aS5saXRIdG1sVmVyc2lvbnMpJiZ2b2lkIDAhPT10P3Q6aS5saXRIdG1sVmVyc2lvbnM9W10pLnB1c2goXCIyLjcuNFwiKTtjb25zdCBCPSh0LGkscyk9Pnt2YXIgZSxvO2NvbnN0IG49bnVsbCE9PShlPW51bGw9PXM/dm9pZCAwOnMucmVuZGVyQmVmb3JlKSYmdm9pZCAwIT09ZT9lOmk7bGV0IGw9bi5fJGxpdFBhcnQkO2lmKHZvaWQgMD09PWwpe2NvbnN0IHQ9bnVsbCE9PShvPW51bGw9PXM/dm9pZCAwOnMucmVuZGVyQmVmb3JlKSYmdm9pZCAwIT09bz9vOm51bGw7bi5fJGxpdFBhcnQkPWw9bmV3IE0oaS5pbnNlcnRCZWZvcmUoZCgpLHQpLHQsdm9pZCAwLG51bGwhPXM/czp7fSl9cmV0dXJuIGwuXyRBSSh0KSxsfTtleHBvcnR7WiBhcyBfJExILHggYXMgaHRtbCxUIGFzIG5vQ2hhbmdlLEEgYXMgbm90aGluZyxCIGFzIHJlbmRlcixiIGFzIHN2Z307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saXQtaHRtbC5qcy5tYXBcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuY29uc3QgdD13aW5kb3csZT10LlNoYWRvd1Jvb3QmJih2b2lkIDA9PT10LlNoYWR5Q1NTfHx0LlNoYWR5Q1NTLm5hdGl2ZVNoYWRvdykmJlwiYWRvcHRlZFN0eWxlU2hlZXRzXCJpbiBEb2N1bWVudC5wcm90b3R5cGUmJlwicmVwbGFjZVwiaW4gQ1NTU3R5bGVTaGVldC5wcm90b3R5cGUscz1TeW1ib2woKSxuPW5ldyBXZWFrTWFwO2NsYXNzIG97Y29uc3RydWN0b3IodCxlLG4pe2lmKHRoaXMuXyRjc3NSZXN1bHQkPSEwLG4hPT1zKXRocm93IEVycm9yKFwiQ1NTUmVzdWx0IGlzIG5vdCBjb25zdHJ1Y3RhYmxlLiBVc2UgYHVuc2FmZUNTU2Agb3IgYGNzc2AgaW5zdGVhZC5cIik7dGhpcy5jc3NUZXh0PXQsdGhpcy50PWV9Z2V0IHN0eWxlU2hlZXQoKXtsZXQgdD10aGlzLm87Y29uc3Qgcz10aGlzLnQ7aWYoZSYmdm9pZCAwPT09dCl7Y29uc3QgZT12b2lkIDAhPT1zJiYxPT09cy5sZW5ndGg7ZSYmKHQ9bi5nZXQocykpLHZvaWQgMD09PXQmJigodGhpcy5vPXQ9bmV3IENTU1N0eWxlU2hlZXQpLnJlcGxhY2VTeW5jKHRoaXMuY3NzVGV4dCksZSYmbi5zZXQocyx0KSl9cmV0dXJuIHR9dG9TdHJpbmcoKXtyZXR1cm4gdGhpcy5jc3NUZXh0fX1jb25zdCByPXQ9Pm5ldyBvKFwic3RyaW5nXCI9PXR5cGVvZiB0P3Q6dCtcIlwiLHZvaWQgMCxzKSxpPSh0LC4uLmUpPT57Y29uc3Qgbj0xPT09dC5sZW5ndGg/dFswXTplLnJlZHVjZSgoKGUscyxuKT0+ZSsodD0+e2lmKCEwPT09dC5fJGNzc1Jlc3VsdCQpcmV0dXJuIHQuY3NzVGV4dDtpZihcIm51bWJlclwiPT10eXBlb2YgdClyZXR1cm4gdDt0aHJvdyBFcnJvcihcIlZhbHVlIHBhc3NlZCB0byAnY3NzJyBmdW5jdGlvbiBtdXN0IGJlIGEgJ2NzcycgZnVuY3Rpb24gcmVzdWx0OiBcIit0K1wiLiBVc2UgJ3Vuc2FmZUNTUycgdG8gcGFzcyBub24tbGl0ZXJhbCB2YWx1ZXMsIGJ1dCB0YWtlIGNhcmUgdG8gZW5zdXJlIHBhZ2Ugc2VjdXJpdHkuXCIpfSkocykrdFtuKzFdKSx0WzBdKTtyZXR1cm4gbmV3IG8obix0LHMpfSxTPShzLG4pPT57ZT9zLmFkb3B0ZWRTdHlsZVNoZWV0cz1uLm1hcCgodD0+dCBpbnN0YW5jZW9mIENTU1N0eWxlU2hlZXQ/dDp0LnN0eWxlU2hlZXQpKTpuLmZvckVhY2goKGU9Pntjb25zdCBuPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKSxvPXQubGl0Tm9uY2U7dm9pZCAwIT09byYmbi5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLG8pLG4udGV4dENvbnRlbnQ9ZS5jc3NUZXh0LHMuYXBwZW5kQ2hpbGQobil9KSl9LGM9ZT90PT50OnQ9PnQgaW5zdGFuY2VvZiBDU1NTdHlsZVNoZWV0Pyh0PT57bGV0IGU9XCJcIjtmb3IoY29uc3QgcyBvZiB0LmNzc1J1bGVzKWUrPXMuY3NzVGV4dDtyZXR1cm4gcihlKX0pKHQpOnQ7ZXhwb3J0e28gYXMgQ1NTUmVzdWx0LFMgYXMgYWRvcHRTdHlsZXMsaSBhcyBjc3MsYyBhcyBnZXRDb21wYXRpYmxlU3R5bGUsZSBhcyBzdXBwb3J0c0Fkb3B0aW5nU3R5bGVTaGVldHMsciBhcyB1bnNhZmVDU1N9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3NzLXRhZy5qcy5tYXBcbiIsImltcG9ydHtnZXRDb21wYXRpYmxlU3R5bGUgYXMgdCxhZG9wdFN0eWxlcyBhcyBpfWZyb21cIi4vY3NzLXRhZy5qc1wiO2V4cG9ydHtDU1NSZXN1bHQsYWRvcHRTdHlsZXMsY3NzLGdldENvbXBhdGlibGVTdHlsZSxzdXBwb3J0c0Fkb3B0aW5nU3R5bGVTaGVldHMsdW5zYWZlQ1NTfWZyb21cIi4vY3NzLXRhZy5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovdmFyIHM7Y29uc3QgZT13aW5kb3cscj1lLnRydXN0ZWRUeXBlcyxoPXI/ci5lbXB0eVNjcmlwdDpcIlwiLG89ZS5yZWFjdGl2ZUVsZW1lbnRQb2x5ZmlsbFN1cHBvcnQsbj17dG9BdHRyaWJ1dGUodCxpKXtzd2l0Y2goaSl7Y2FzZSBCb29sZWFuOnQ9dD9oOm51bGw7YnJlYWs7Y2FzZSBPYmplY3Q6Y2FzZSBBcnJheTp0PW51bGw9PXQ/dDpKU09OLnN0cmluZ2lmeSh0KX1yZXR1cm4gdH0sZnJvbUF0dHJpYnV0ZSh0LGkpe2xldCBzPXQ7c3dpdGNoKGkpe2Nhc2UgQm9vbGVhbjpzPW51bGwhPT10O2JyZWFrO2Nhc2UgTnVtYmVyOnM9bnVsbD09PXQ/bnVsbDpOdW1iZXIodCk7YnJlYWs7Y2FzZSBPYmplY3Q6Y2FzZSBBcnJheTp0cnl7cz1KU09OLnBhcnNlKHQpfWNhdGNoKHQpe3M9bnVsbH19cmV0dXJuIHN9fSxhPSh0LGkpPT5pIT09dCYmKGk9PWl8fHQ9PXQpLGw9e2F0dHJpYnV0ZTohMCx0eXBlOlN0cmluZyxjb252ZXJ0ZXI6bixyZWZsZWN0OiExLGhhc0NoYW5nZWQ6YX07Y2xhc3MgZCBleHRlbmRzIEhUTUxFbGVtZW50e2NvbnN0cnVjdG9yKCl7c3VwZXIoKSx0aGlzLl8kRWk9bmV3IE1hcCx0aGlzLmlzVXBkYXRlUGVuZGluZz0hMSx0aGlzLmhhc1VwZGF0ZWQ9ITEsdGhpcy5fJEVsPW51bGwsdGhpcy51KCl9c3RhdGljIGFkZEluaXRpYWxpemVyKHQpe3ZhciBpO3RoaXMuZmluYWxpemUoKSwobnVsbCE9PShpPXRoaXMuaCkmJnZvaWQgMCE9PWk/aTp0aGlzLmg9W10pLnB1c2godCl9c3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKXt0aGlzLmZpbmFsaXplKCk7Y29uc3QgdD1bXTtyZXR1cm4gdGhpcy5lbGVtZW50UHJvcGVydGllcy5mb3JFYWNoKCgoaSxzKT0+e2NvbnN0IGU9dGhpcy5fJEVwKHMsaSk7dm9pZCAwIT09ZSYmKHRoaXMuXyRFdi5zZXQoZSxzKSx0LnB1c2goZSkpfSkpLHR9c3RhdGljIGNyZWF0ZVByb3BlcnR5KHQsaT1sKXtpZihpLnN0YXRlJiYoaS5hdHRyaWJ1dGU9ITEpLHRoaXMuZmluYWxpemUoKSx0aGlzLmVsZW1lbnRQcm9wZXJ0aWVzLnNldCh0LGkpLCFpLm5vQWNjZXNzb3ImJiF0aGlzLnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSh0KSl7Y29uc3Qgcz1cInN5bWJvbFwiPT10eXBlb2YgdD9TeW1ib2woKTpcIl9fXCIrdCxlPXRoaXMuZ2V0UHJvcGVydHlEZXNjcmlwdG9yKHQscyxpKTt2b2lkIDAhPT1lJiZPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5wcm90b3R5cGUsdCxlKX19c3RhdGljIGdldFByb3BlcnR5RGVzY3JpcHRvcih0LGkscyl7cmV0dXJue2dldCgpe3JldHVybiB0aGlzW2ldfSxzZXQoZSl7Y29uc3Qgcj10aGlzW3RdO3RoaXNbaV09ZSx0aGlzLnJlcXVlc3RVcGRhdGUodCxyLHMpfSxjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMH19c3RhdGljIGdldFByb3BlcnR5T3B0aW9ucyh0KXtyZXR1cm4gdGhpcy5lbGVtZW50UHJvcGVydGllcy5nZXQodCl8fGx9c3RhdGljIGZpbmFsaXplKCl7aWYodGhpcy5oYXNPd25Qcm9wZXJ0eShcImZpbmFsaXplZFwiKSlyZXR1cm4hMTt0aGlzLmZpbmFsaXplZD0hMDtjb25zdCB0PU9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKTtpZih0LmZpbmFsaXplKCksdm9pZCAwIT09dC5oJiYodGhpcy5oPVsuLi50LmhdKSx0aGlzLmVsZW1lbnRQcm9wZXJ0aWVzPW5ldyBNYXAodC5lbGVtZW50UHJvcGVydGllcyksdGhpcy5fJEV2PW5ldyBNYXAsdGhpcy5oYXNPd25Qcm9wZXJ0eShcInByb3BlcnRpZXNcIikpe2NvbnN0IHQ9dGhpcy5wcm9wZXJ0aWVzLGk9Wy4uLk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHQpLC4uLk9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModCldO2Zvcihjb25zdCBzIG9mIGkpdGhpcy5jcmVhdGVQcm9wZXJ0eShzLHRbc10pfXJldHVybiB0aGlzLmVsZW1lbnRTdHlsZXM9dGhpcy5maW5hbGl6ZVN0eWxlcyh0aGlzLnN0eWxlcyksITB9c3RhdGljIGZpbmFsaXplU3R5bGVzKGkpe2NvbnN0IHM9W107aWYoQXJyYXkuaXNBcnJheShpKSl7Y29uc3QgZT1uZXcgU2V0KGkuZmxhdCgxLzApLnJldmVyc2UoKSk7Zm9yKGNvbnN0IGkgb2YgZSlzLnVuc2hpZnQodChpKSl9ZWxzZSB2b2lkIDAhPT1pJiZzLnB1c2godChpKSk7cmV0dXJuIHN9c3RhdGljIF8kRXAodCxpKXtjb25zdCBzPWkuYXR0cmlidXRlO3JldHVybiExPT09cz92b2lkIDA6XCJzdHJpbmdcIj09dHlwZW9mIHM/czpcInN0cmluZ1wiPT10eXBlb2YgdD90LnRvTG93ZXJDYXNlKCk6dm9pZCAwfXUoKXt2YXIgdDt0aGlzLl8kRV89bmV3IFByb21pc2UoKHQ9PnRoaXMuZW5hYmxlVXBkYXRpbmc9dCkpLHRoaXMuXyRBTD1uZXcgTWFwLHRoaXMuXyRFZygpLHRoaXMucmVxdWVzdFVwZGF0ZSgpLG51bGw9PT0odD10aGlzLmNvbnN0cnVjdG9yLmgpfHx2b2lkIDA9PT10fHx0LmZvckVhY2goKHQ9PnQodGhpcykpKX1hZGRDb250cm9sbGVyKHQpe3ZhciBpLHM7KG51bGwhPT0oaT10aGlzLl8kRVMpJiZ2b2lkIDAhPT1pP2k6dGhpcy5fJEVTPVtdKS5wdXNoKHQpLHZvaWQgMCE9PXRoaXMucmVuZGVyUm9vdCYmdGhpcy5pc0Nvbm5lY3RlZCYmKG51bGw9PT0ocz10Lmhvc3RDb25uZWN0ZWQpfHx2b2lkIDA9PT1zfHxzLmNhbGwodCkpfXJlbW92ZUNvbnRyb2xsZXIodCl7dmFyIGk7bnVsbD09PShpPXRoaXMuXyRFUyl8fHZvaWQgMD09PWl8fGkuc3BsaWNlKHRoaXMuXyRFUy5pbmRleE9mKHQpPj4+MCwxKX1fJEVnKCl7dGhpcy5jb25zdHJ1Y3Rvci5lbGVtZW50UHJvcGVydGllcy5mb3JFYWNoKCgodCxpKT0+e3RoaXMuaGFzT3duUHJvcGVydHkoaSkmJih0aGlzLl8kRWkuc2V0KGksdGhpc1tpXSksZGVsZXRlIHRoaXNbaV0pfSkpfWNyZWF0ZVJlbmRlclJvb3QoKXt2YXIgdDtjb25zdCBzPW51bGwhPT0odD10aGlzLnNoYWRvd1Jvb3QpJiZ2b2lkIDAhPT10P3Q6dGhpcy5hdHRhY2hTaGFkb3codGhpcy5jb25zdHJ1Y3Rvci5zaGFkb3dSb290T3B0aW9ucyk7cmV0dXJuIGkocyx0aGlzLmNvbnN0cnVjdG9yLmVsZW1lbnRTdHlsZXMpLHN9Y29ubmVjdGVkQ2FsbGJhY2soKXt2YXIgdDt2b2lkIDA9PT10aGlzLnJlbmRlclJvb3QmJih0aGlzLnJlbmRlclJvb3Q9dGhpcy5jcmVhdGVSZW5kZXJSb290KCkpLHRoaXMuZW5hYmxlVXBkYXRpbmcoITApLG51bGw9PT0odD10aGlzLl8kRVMpfHx2b2lkIDA9PT10fHx0LmZvckVhY2goKHQ9Pnt2YXIgaTtyZXR1cm4gbnVsbD09PShpPXQuaG9zdENvbm5lY3RlZCl8fHZvaWQgMD09PWk/dm9pZCAwOmkuY2FsbCh0KX0pKX1lbmFibGVVcGRhdGluZyh0KXt9ZGlzY29ubmVjdGVkQ2FsbGJhY2soKXt2YXIgdDtudWxsPT09KHQ9dGhpcy5fJEVTKXx8dm9pZCAwPT09dHx8dC5mb3JFYWNoKCh0PT57dmFyIGk7cmV0dXJuIG51bGw9PT0oaT10Lmhvc3REaXNjb25uZWN0ZWQpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLmNhbGwodCl9KSl9YXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKHQsaSxzKXt0aGlzLl8kQUsodCxzKX1fJEVPKHQsaSxzPWwpe3ZhciBlO2NvbnN0IHI9dGhpcy5jb25zdHJ1Y3Rvci5fJEVwKHQscyk7aWYodm9pZCAwIT09ciYmITA9PT1zLnJlZmxlY3Qpe2NvbnN0IGg9KHZvaWQgMCE9PShudWxsPT09KGU9cy5jb252ZXJ0ZXIpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLnRvQXR0cmlidXRlKT9zLmNvbnZlcnRlcjpuKS50b0F0dHJpYnV0ZShpLHMudHlwZSk7dGhpcy5fJEVsPXQsbnVsbD09aD90aGlzLnJlbW92ZUF0dHJpYnV0ZShyKTp0aGlzLnNldEF0dHJpYnV0ZShyLGgpLHRoaXMuXyRFbD1udWxsfX1fJEFLKHQsaSl7dmFyIHM7Y29uc3QgZT10aGlzLmNvbnN0cnVjdG9yLHI9ZS5fJEV2LmdldCh0KTtpZih2b2lkIDAhPT1yJiZ0aGlzLl8kRWwhPT1yKXtjb25zdCB0PWUuZ2V0UHJvcGVydHlPcHRpb25zKHIpLGg9XCJmdW5jdGlvblwiPT10eXBlb2YgdC5jb252ZXJ0ZXI/e2Zyb21BdHRyaWJ1dGU6dC5jb252ZXJ0ZXJ9OnZvaWQgMCE9PShudWxsPT09KHM9dC5jb252ZXJ0ZXIpfHx2b2lkIDA9PT1zP3ZvaWQgMDpzLmZyb21BdHRyaWJ1dGUpP3QuY29udmVydGVyOm47dGhpcy5fJEVsPXIsdGhpc1tyXT1oLmZyb21BdHRyaWJ1dGUoaSx0LnR5cGUpLHRoaXMuXyRFbD1udWxsfX1yZXF1ZXN0VXBkYXRlKHQsaSxzKXtsZXQgZT0hMDt2b2lkIDAhPT10JiYoKChzPXN8fHRoaXMuY29uc3RydWN0b3IuZ2V0UHJvcGVydHlPcHRpb25zKHQpKS5oYXNDaGFuZ2VkfHxhKSh0aGlzW3RdLGkpPyh0aGlzLl8kQUwuaGFzKHQpfHx0aGlzLl8kQUwuc2V0KHQsaSksITA9PT1zLnJlZmxlY3QmJnRoaXMuXyRFbCE9PXQmJih2b2lkIDA9PT10aGlzLl8kRUMmJih0aGlzLl8kRUM9bmV3IE1hcCksdGhpcy5fJEVDLnNldCh0LHMpKSk6ZT0hMSksIXRoaXMuaXNVcGRhdGVQZW5kaW5nJiZlJiYodGhpcy5fJEVfPXRoaXMuXyRFaigpKX1hc3luYyBfJEVqKCl7dGhpcy5pc1VwZGF0ZVBlbmRpbmc9ITA7dHJ5e2F3YWl0IHRoaXMuXyRFX31jYXRjaCh0KXtQcm9taXNlLnJlamVjdCh0KX1jb25zdCB0PXRoaXMuc2NoZWR1bGVVcGRhdGUoKTtyZXR1cm4gbnVsbCE9dCYmYXdhaXQgdCwhdGhpcy5pc1VwZGF0ZVBlbmRpbmd9c2NoZWR1bGVVcGRhdGUoKXtyZXR1cm4gdGhpcy5wZXJmb3JtVXBkYXRlKCl9cGVyZm9ybVVwZGF0ZSgpe3ZhciB0O2lmKCF0aGlzLmlzVXBkYXRlUGVuZGluZylyZXR1cm47dGhpcy5oYXNVcGRhdGVkLHRoaXMuXyRFaSYmKHRoaXMuXyRFaS5mb3JFYWNoKCgodCxpKT0+dGhpc1tpXT10KSksdGhpcy5fJEVpPXZvaWQgMCk7bGV0IGk9ITE7Y29uc3Qgcz10aGlzLl8kQUw7dHJ5e2k9dGhpcy5zaG91bGRVcGRhdGUocyksaT8odGhpcy53aWxsVXBkYXRlKHMpLG51bGw9PT0odD10aGlzLl8kRVMpfHx2b2lkIDA9PT10fHx0LmZvckVhY2goKHQ9Pnt2YXIgaTtyZXR1cm4gbnVsbD09PShpPXQuaG9zdFVwZGF0ZSl8fHZvaWQgMD09PWk/dm9pZCAwOmkuY2FsbCh0KX0pKSx0aGlzLnVwZGF0ZShzKSk6dGhpcy5fJEVrKCl9Y2F0Y2godCl7dGhyb3cgaT0hMSx0aGlzLl8kRWsoKSx0fWkmJnRoaXMuXyRBRShzKX13aWxsVXBkYXRlKHQpe31fJEFFKHQpe3ZhciBpO251bGw9PT0oaT10aGlzLl8kRVMpfHx2b2lkIDA9PT1pfHxpLmZvckVhY2goKHQ9Pnt2YXIgaTtyZXR1cm4gbnVsbD09PShpPXQuaG9zdFVwZGF0ZWQpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLmNhbGwodCl9KSksdGhpcy5oYXNVcGRhdGVkfHwodGhpcy5oYXNVcGRhdGVkPSEwLHRoaXMuZmlyc3RVcGRhdGVkKHQpKSx0aGlzLnVwZGF0ZWQodCl9XyRFaygpe3RoaXMuXyRBTD1uZXcgTWFwLHRoaXMuaXNVcGRhdGVQZW5kaW5nPSExfWdldCB1cGRhdGVDb21wbGV0ZSgpe3JldHVybiB0aGlzLmdldFVwZGF0ZUNvbXBsZXRlKCl9Z2V0VXBkYXRlQ29tcGxldGUoKXtyZXR1cm4gdGhpcy5fJEVffXNob3VsZFVwZGF0ZSh0KXtyZXR1cm4hMH11cGRhdGUodCl7dm9pZCAwIT09dGhpcy5fJEVDJiYodGhpcy5fJEVDLmZvckVhY2goKCh0LGkpPT50aGlzLl8kRU8oaSx0aGlzW2ldLHQpKSksdGhpcy5fJEVDPXZvaWQgMCksdGhpcy5fJEVrKCl9dXBkYXRlZCh0KXt9Zmlyc3RVcGRhdGVkKHQpe319ZC5maW5hbGl6ZWQ9ITAsZC5lbGVtZW50UHJvcGVydGllcz1uZXcgTWFwLGQuZWxlbWVudFN0eWxlcz1bXSxkLnNoYWRvd1Jvb3RPcHRpb25zPXttb2RlOlwib3BlblwifSxudWxsPT1vfHxvKHtSZWFjdGl2ZUVsZW1lbnQ6ZH0pLChudWxsIT09KHM9ZS5yZWFjdGl2ZUVsZW1lbnRWZXJzaW9ucykmJnZvaWQgMCE9PXM/czplLnJlYWN0aXZlRWxlbWVudFZlcnNpb25zPVtdKS5wdXNoKFwiMS42LjFcIik7ZXhwb3J0e2QgYXMgUmVhY3RpdmVFbGVtZW50LG4gYXMgZGVmYXVsdENvbnZlcnRlcixhIGFzIG5vdEVxdWFsfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0aXZlLWVsZW1lbnQuanMubWFwXG4iLCJpbXBvcnR7UmVhY3RpdmVFbGVtZW50IGFzIHR9ZnJvbVwiQGxpdC9yZWFjdGl2ZS1lbGVtZW50XCI7ZXhwb3J0KmZyb21cIkBsaXQvcmVhY3RpdmUtZWxlbWVudFwiO2ltcG9ydHtyZW5kZXIgYXMgZSxub0NoYW5nZSBhcyBpfWZyb21cImxpdC1odG1sXCI7ZXhwb3J0KmZyb21cImxpdC1odG1sXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi92YXIgbCxvO2NvbnN0IHI9dDtjbGFzcyBzIGV4dGVuZHMgdHtjb25zdHJ1Y3Rvcigpe3N1cGVyKC4uLmFyZ3VtZW50cyksdGhpcy5yZW5kZXJPcHRpb25zPXtob3N0OnRoaXN9LHRoaXMuXyREbz12b2lkIDB9Y3JlYXRlUmVuZGVyUm9vdCgpe3ZhciB0LGU7Y29uc3QgaT1zdXBlci5jcmVhdGVSZW5kZXJSb290KCk7cmV0dXJuIG51bGwhPT0odD0oZT10aGlzLnJlbmRlck9wdGlvbnMpLnJlbmRlckJlZm9yZSkmJnZvaWQgMCE9PXR8fChlLnJlbmRlckJlZm9yZT1pLmZpcnN0Q2hpbGQpLGl9dXBkYXRlKHQpe2NvbnN0IGk9dGhpcy5yZW5kZXIoKTt0aGlzLmhhc1VwZGF0ZWR8fCh0aGlzLnJlbmRlck9wdGlvbnMuaXNDb25uZWN0ZWQ9dGhpcy5pc0Nvbm5lY3RlZCksc3VwZXIudXBkYXRlKHQpLHRoaXMuXyREbz1lKGksdGhpcy5yZW5kZXJSb290LHRoaXMucmVuZGVyT3B0aW9ucyl9Y29ubmVjdGVkQ2FsbGJhY2soKXt2YXIgdDtzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpLG51bGw9PT0odD10aGlzLl8kRG8pfHx2b2lkIDA9PT10fHx0LnNldENvbm5lY3RlZCghMCl9ZGlzY29ubmVjdGVkQ2FsbGJhY2soKXt2YXIgdDtzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpLG51bGw9PT0odD10aGlzLl8kRG8pfHx2b2lkIDA9PT10fHx0LnNldENvbm5lY3RlZCghMSl9cmVuZGVyKCl7cmV0dXJuIGl9fXMuZmluYWxpemVkPSEwLHMuXyRsaXRFbGVtZW50JD0hMCxudWxsPT09KGw9Z2xvYmFsVGhpcy5saXRFbGVtZW50SHlkcmF0ZVN1cHBvcnQpfHx2b2lkIDA9PT1sfHxsLmNhbGwoZ2xvYmFsVGhpcyx7TGl0RWxlbWVudDpzfSk7Y29uc3Qgbj1nbG9iYWxUaGlzLmxpdEVsZW1lbnRQb2x5ZmlsbFN1cHBvcnQ7bnVsbD09bnx8bih7TGl0RWxlbWVudDpzfSk7Y29uc3QgaD17XyRBSzoodCxlLGkpPT57dC5fJEFLKGUsaSl9LF8kQUw6dD0+dC5fJEFMfTsobnVsbCE9PShvPWdsb2JhbFRoaXMubGl0RWxlbWVudFZlcnNpb25zKSYmdm9pZCAwIT09bz9vOmdsb2JhbFRoaXMubGl0RWxlbWVudFZlcnNpb25zPVtdKS5wdXNoKFwiMy4zLjJcIik7ZXhwb3J0e3MgYXMgTGl0RWxlbWVudCxyIGFzIFVwZGF0aW5nRWxlbWVudCxoIGFzIF8kTEV9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGl0LWVsZW1lbnQuanMubWFwXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cbmNvbnN0IGU9ZT0+bj0+XCJmdW5jdGlvblwiPT10eXBlb2Ygbj8oKGUsbik9PihjdXN0b21FbGVtZW50cy5kZWZpbmUoZSxuKSxuKSkoZSxuKTooKGUsbik9Pntjb25zdHtraW5kOnQsZWxlbWVudHM6c309bjtyZXR1cm57a2luZDp0LGVsZW1lbnRzOnMsZmluaXNoZXIobil7Y3VzdG9tRWxlbWVudHMuZGVmaW5lKGUsbil9fX0pKGUsbik7ZXhwb3J0e2UgYXMgY3VzdG9tRWxlbWVudH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jdXN0b20tZWxlbWVudC5qcy5tYXBcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuY29uc3QgaT0oaSxlKT0+XCJtZXRob2RcIj09PWUua2luZCYmZS5kZXNjcmlwdG9yJiYhKFwidmFsdWVcImluIGUuZGVzY3JpcHRvcik/ey4uLmUsZmluaXNoZXIobil7bi5jcmVhdGVQcm9wZXJ0eShlLmtleSxpKX19OntraW5kOlwiZmllbGRcIixrZXk6U3ltYm9sKCkscGxhY2VtZW50Olwib3duXCIsZGVzY3JpcHRvcjp7fSxvcmlnaW5hbEtleTplLmtleSxpbml0aWFsaXplcigpe1wiZnVuY3Rpb25cIj09dHlwZW9mIGUuaW5pdGlhbGl6ZXImJih0aGlzW2Uua2V5XT1lLmluaXRpYWxpemVyLmNhbGwodGhpcykpfSxmaW5pc2hlcihuKXtuLmNyZWF0ZVByb3BlcnR5KGUua2V5LGkpfX07ZnVuY3Rpb24gZShlKXtyZXR1cm4obix0KT0+dm9pZCAwIT09dD8oKGksZSxuKT0+e2UuY29uc3RydWN0b3IuY3JlYXRlUHJvcGVydHkobixpKX0pKGUsbix0KTppKGUsbil9ZXhwb3J0e2UgYXMgcHJvcGVydHl9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvcGVydHkuanMubWFwXG4iLCJpbXBvcnR7cHJvcGVydHkgYXMgcn1mcm9tXCIuL3Byb3BlcnR5LmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9mdW5jdGlvbiB0KHQpe3JldHVybiByKHsuLi50LHN0YXRlOiEwfSl9ZXhwb3J0e3QgYXMgc3RhdGV9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhdGUuanMubWFwXG4iLCJpbXBvcnR7ZGVjb3JhdGVQcm9wZXJ0eSBhcyBvfWZyb21cIi4vYmFzZS5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovdmFyIG47Y29uc3QgZT1udWxsIT0obnVsbD09PShuPXdpbmRvdy5IVE1MU2xvdEVsZW1lbnQpfHx2b2lkIDA9PT1uP3ZvaWQgMDpuLnByb3RvdHlwZS5hc3NpZ25lZEVsZW1lbnRzKT8obyxuKT0+by5hc3NpZ25lZEVsZW1lbnRzKG4pOihvLG4pPT5vLmFzc2lnbmVkTm9kZXMobikuZmlsdGVyKChvPT5vLm5vZGVUeXBlPT09Tm9kZS5FTEVNRU5UX05PREUpKTtmdW5jdGlvbiBsKG4pe2NvbnN0e3Nsb3Q6bCxzZWxlY3Rvcjp0fT1udWxsIT1uP246e307cmV0dXJuIG8oe2Rlc2NyaXB0b3I6bz0+KHtnZXQoKXt2YXIgbztjb25zdCByPVwic2xvdFwiKyhsP2BbbmFtZT0ke2x9XWA6XCI6bm90KFtuYW1lXSlcIiksaT1udWxsPT09KG89dGhpcy5yZW5kZXJSb290KXx8dm9pZCAwPT09bz92b2lkIDA6by5xdWVyeVNlbGVjdG9yKHIpLHM9bnVsbCE9aT9lKGksbik6W107cmV0dXJuIHQ/cy5maWx0ZXIoKG89Pm8ubWF0Y2hlcyh0KSkpOnN9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSl9KX1leHBvcnR7bCBhcyBxdWVyeUFzc2lnbmVkRWxlbWVudHN9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cXVlcnktYXNzaWduZWQtZWxlbWVudHMuanMubWFwXG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tIFwibGl0XCI7XG5cbmV4cG9ydCBjb25zdCBGb3JtdWxhRWRpdG9yU3R5bGVzID0gY3NzYFxuICAjd3lzaXd5Zy1lZGl0b3Ige1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgcGFkZGluZzogNHB4O1xuICAgIGNhcmV0LWNvbG9yOiB2YXIoLS1mZS1jYXJldC1jb2xvciwgI2ZmZik7XG4gICAgY29sb3I6IHZhcigtLWZlLXRleHQtY29sb3IsICNmN2YxZmYpO1xuICAgIGxpbmUtaGVpZ2h0OiAxLjE7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIGJvcmRlci1yYWRpdXM6IHZhcigtLWZlLWJvcmRlci1yYWRpdXMsIDRweCkgdmFyKC0tZmUtYm9yZGVyLXJhZGl1cywgNHB4KSAwcHhcbiAgICAgIDBweDtcbiAgICBvdmVyZmxvdzogYXV0bztcbiAgICBib3JkZXI6IDJweCBzb2xpZCBibGFjaztcbiAgICBvdXRsaW5lOiAwcHggc29saWQgYmxhY2s7XG4gICAgd2hpdGUtc3BhY2U6IHByZS13cmFwO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWZlLWJhY2tncm91bmQtY29sb3IsICMyMjIyMjIpO1xuICAgIG1hcmdpbjogMHB4O1xuICB9XG5cbiAgI3d5c2l3eWctZXJyIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBib3JkZXItcmFkaXVzOiAwcHggMHB4IHZhcigtLWZlLWJvcmRlci1yYWRpdXMsIDRweClcbiAgICAgIHZhcigtLWZlLWJvcmRlci1yYWRpdXMsIDRweCk7XG4gICAgY29sb3I6IHZhcigtLWZlLWVyci10ZXh0LWNvbG9yLCAjZmM1MTRmKTtcbiAgICBib3JkZXI6IDJweCBzb2xpZCBibGFjaztcbiAgICAvKiBib3JkZXItdG9wOiAwcHg7ICovXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZmUtYmFja2dyb3VuZC1jb2xvciwgIzIyMjIyMik7XG4gICAgcGFkZGluZzogNHB4O1xuICAgIG1hcmdpbjogMHB4IDBweCA4cHggMHB4O1xuICB9XG5cbiAgLnd5c2l3eWctbm8tZXJyIHtcbiAgICBjb2xvcjogIzA5ODY2OCAhaW1wb3J0YW50O1xuICB9XG5cbiAgLnd5c2l3eWdJbnRlcm5hbHMuZXJyb3Ige1xuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuICAgIC13ZWJraXQtdGV4dC1kZWNvcmF0aW9uLWNvbG9yOiB2YXIoLS1mZS1lcnItdW5kZXJsaW5lLWNvbG9yLCAjZmM1MTRmKTtcbiAgICB0ZXh0LWRlY29yYXRpb24tY29sb3I6IHZhcigtLWZlLWVyci11bmRlcmxpbmUtY29sb3IsICNmYzUxNGYpO1xuICAgIC13ZWJraXQtdGV4dC1kZWNvcmF0aW9uLXN0eWxlOiB3YXZ5O1xuICAgIHRleHQtZGVjb3JhdGlvbi1zdHlsZTogd2F2eTtcbiAgICB0ZXh0LWRlY29yYXRpb24tdGhpY2tuZXNzOiAxcHg7XG4gICAgdGV4dC1kZWNvcmF0aW9uLWNvbG9yOiB2YXIoLS1mZS1lcnItdW5kZXJsaW5lLWNvbG9yLCByZWQpO1xuICB9XG5cbiAgLnd5c2l3eWdJbnRlcm5hbHMuYnJhY2tldCB7XG4gICAgY29sb3I6IHZhcigtLWZlLWJyYWNrZXQtY29sb3IsICNmYzUxNGYpO1xuICB9XG5cbiAgLnd5c2l3eWdJbnRlcm5hbHMub3BlcmF0b3Ige1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGNvbG9yOiB2YXIoLS1mZS1vcGVyYXRvci1jb2xvciwgI2ZjNjE4ZCk7XG4gIH1cblxuICAud3lzaXd5Z0ludGVybmFscy52YXJpYWJsZSB7XG4gICAgY29sb3I6IHZhcigtLWZlLXZhcmlhYmxlLWNvbG9yLCAjZmM2MThkKTtcbiAgfVxuYDtcbiIsImltcG9ydCB7IGh0bWwgfSBmcm9tICdsaXQnO1xuXG5leHBvcnQgY29uc3QgVW5kZXJsaW5lZEJ1dHRvblN0eWxlcyA9IGh0bWxgXG4gIDxzdHlsZT5cbiAgICAucHJpbWFyeS10ZXh0LXVuZGVybGluZWQge1xuICAgICAgZm9udC1mYW1pbHk6IHZhcigtLXRoZW1lLWZvbnQpO1xuICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgZm9udC1zaXplOiB2YXIoLS1zZWNvbmRhcnktZm9udC1zaXplLCAxNnB4KTtcbiAgICAgIGNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yLCAjMjA1MDgxKTtcbiAgICAgIHBhZGRpbmc6IDA7XG4gICAgICBtYXJnaW46IDA7XG4gICAgICBib3JkZXItcmFkaXVzOiAwO1xuICAgICAgbWluLXdpZHRoOiBtYXgtY29udGVudDtcbiAgICAgIHRleHQtdHJhbnNmb3JtOiBub25lO1xuICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHJnYmEodmFyKC0tc2Vjb25kYXJ5LWNvbG9yLXJnYiksIDAuMyk7XG4gICAgfVxuXG4gICAgLnNlY29uZGFyeS10ZXh0LXVuZGVybGluZWQge1xuICAgICAgZm9udC1mYW1pbHk6IHZhcigtLXRoZW1lLWZvbnQpO1xuICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgZm9udC1zaXplOiB2YXIoLS1zZWNvbmRhcnktZm9udC1zaXplLCAxNnB4KTtcbiAgICAgIGNvbG9yOiB2YXIoLS1zZWNvbmRhcnktY29sb3IsICM1MTUxNTEpO1xuICAgICAgbWFyZ2luOiAwO1xuICAgICAgcGFkZGluZzogMDtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDA7XG4gICAgICBtaW4td2lkdGg6IG1heC1jb250ZW50O1xuICAgICAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XG4gICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgcmdiYSh2YXIoLS1zZWNvbmRhcnktY29sb3ItcmdiKSwgMC4zKTtcbiAgICB9XG4gIDwvc3R5bGU+XG5gO1xuXG5leHBvcnQgY29uc3QgVGV4dEJ1dHRvblN0eWxlcyA9IGh0bWxgXG4gIDxzdHlsZT5cbiAgICAucHJpbWFyeS10ZXh0LWJ1dHRvbiB7XG4gICAgICBmb250LWZhbWlseTogdmFyKC0tdGhlbWUtZm9udCk7XG4gICAgICBib3JkZXI6IG5vbmU7XG4gICAgICBmb250LXNpemU6IHZhcigtLXNlY29uZGFyeS1mb250LXNpemUsIDE2cHgpO1xuICAgICAgY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IsICMyMDUwODEpO1xuICAgICAgcGFkZGluZzogMCA4cHg7XG4gICAgICBtaW4td2lkdGg6IDY0cHg7XG4gICAgICBoZWlnaHQ6IHZhcigtLWJ1dHRvbi1oZWlnaHQsIDM2cHgpO1xuICAgICAgbWFyZ2luOiAwO1xuICAgICAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XG4gICAgfVxuXG4gICAgLnNlY29uZGFyeS10ZXh0LWJ1dHRvbiB7XG4gICAgICBmb250LWZhbWlseTogdmFyKC0tdGhlbWUtZm9udCk7XG4gICAgICBib3JkZXI6IG5vbmU7XG4gICAgICBmb250LXNpemU6IHZhcigtLXNlY29uZGFyeS1mb250LXNpemUsIDE2cHgpO1xuICAgICAgY29sb3I6IHZhcigtLXNlY29uZGFyeS1jb2xvciwgIzUxNTE1MSk7XG4gICAgICBwYWRkaW5nOiAwIDhweDtcbiAgICAgIG1pbi13aWR0aDogNjRweDtcbiAgICAgIG1hcmdpbjogMDtcbiAgICAgIGhlaWdodDogdmFyKC0tYnV0dG9uLWhlaWdodCwgMzZweCk7XG4gICAgICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbiAgICB9XG5cbiAgICAucHJpbWFyeS10ZXh0LWJ1dHRvbjpob3ZlciB7XG4gICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICB9XG5cbiAgICAuc2Vjb25kYXJ5LXRleHQtYnV0dG9uOmhvdmVyIHtcbiAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIH1cblxuICAgIC5wcmltYXJ5LXRleHQtYnV0dG9uW2Rpc2FibGVkXSwgLnNlY29uZGFyeS10ZXh0LWJ1dHRvbltkaXNhYmxlZF0ge1xuICAgICAgICBvcGFjaXR5OiAwLjU7XG4gICAgfVxuICA8L3N0eWxlPlxuYDtcbmV4cG9ydCBjb25zdCBQcmltYXJ5QnV0dG9uU3R5bGVzID0gaHRtbGBcbiAgPHN0eWxlPlxuICAgIC5wcmltYXJ5LW91dGxpbmVkIHtcbiAgICAgIGZvbnQtZmFtaWx5OiB2YXIoLS10aGVtZS1mb250KTtcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLXByaW1hcnktY29sb3IsICMyMDUwODEpO1xuICAgICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICAgICAgZm9udC1zaXplOiB2YXIoLS1zZWNvbmRhcnktZm9udC1zaXplLCAxNnB4KTtcbiAgICAgIGNvbG9yOiB2YXIoLS1zZWNvbmRhcnktY29sb3IsICM1MTUxNTEpO1xuICAgICAgcGFkZGluZzogMCB2YXIoLS1idXR0b24tcGFkZGluZywgMTZweCk7XG4gICAgICBtaW4td2lkdGg6IDY0cHg7XG4gICAgICBtYXJnaW46IDA7XG4gICAgICBoZWlnaHQ6IHZhcigtLWJ1dHRvbi1oZWlnaHQsIDM2cHgpO1xuICAgICAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XG4gICAgfVxuICAgIC5wcmltYXJ5LW91dGxpbmVkOmhvdmVyIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IsICMyMDUwODEpO1xuICAgICAgY29sb3I6IHZhcigtLWxpZ2h0LWNvbG9yLCAjZmZmKTtcbiAgICB9XG4gICAgLnByaW1hcnktY29sb3JlZCB7XG4gICAgICBmb250LWZhbWlseTogdmFyKC0tdGhlbWUtZm9udCk7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yLCAjMjA1MDgxKTtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgICAgIGZvbnQtc2l6ZTogdmFyKC0tc2Vjb25kYXJ5LWZvbnQtc2l6ZSwgMTZweCk7XG4gICAgICBjb2xvcjogdmFyKC0tbGlnaHQtY29sb3IsICNmZmYpO1xuICAgICAgbWFyZ2luOiAwO1xuICAgICAgcGFkZGluZzogMCB2YXIoLS1idXR0b24tcGFkZGluZywgMTZweCk7XG4gICAgICBtaW4td2lkdGg6IDY0cHg7XG4gICAgICBoZWlnaHQ6IHZhcigtLWJ1dHRvbi1oZWlnaHQsIDM2cHgpO1xuICAgICAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XG4gICAgfVxuICAgIC5wcmltYXJ5LWNvbG9yZWQ6aG92ZXIge1xuICAgICAgYm94LXNoYWRvdzogMCAxcHggMnB4IDFweCB2YXIoLS1wcmltYXJ5LWNvbG9yLCAjMjA1MDgxKTtcbiAgICB9XG4gICAgLnByaW1hcnktb3V0bGluZWRbZGlzYWJsZWRdLCAucHJpbWFyeS1jb2xvcmVkW2Rpc2FibGVkXSB7XG4gICAgICAgIG9wYWNpdHk6IDAuNTtcbiAgICB9XG4gIDwvc3R5bGU+XG5gO1xuXG5leHBvcnQgY29uc3QgU2Vjb25kYXJ5QnV0dG9uU3R5bGVzID0gaHRtbGBcbiAgPHN0eWxlPlxuICAgIC5zZWNvbmRhcnktb3V0bGluZWQge1xuICAgICAgZm9udC1mYW1pbHk6IHZhcigtLXRoZW1lLWZvbnQpO1xuICAgICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSh2YXIoLS1zZWNvbmRhcnktY29sb3ItcmdiKSwgMC4zKTtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgICAgIGZvbnQtc2l6ZTogdmFyKC0tc2Vjb25kYXJ5LWZvbnQtc2l6ZSwgMTZweCk7XG4gICAgICBjb2xvcjogdmFyKC0tc2Vjb25kYXJ5LWNvbG9yLCAjNTE1MTUxKTtcbiAgICAgIHBhZGRpbmc6IDAgdmFyKC0tYnV0dG9uLXBhZGRpbmcsIDE2cHgpO1xuICAgICAgbWFyZ2luOiAwO1xuICAgICAgbWluLXdpZHRoOiA2NHB4O1xuICAgICAgaGVpZ2h0OiB2YXIoLS1idXR0b24taGVpZ2h0LCAzNnB4KTtcbiAgICAgIHRleHQtdHJhbnNmb3JtOiBub25lO1xuICAgIH1cblxuICAgIC5zZWNvbmRhcnktb3V0bGluZWQ6aG92ZXIge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc2Vjb25kYXJ5LWNvbG9yLCAjNTE1MTUxKTtcbiAgICAgIGNvbG9yOiB2YXIoLS1saWdodC1jb2xvciwgI2ZmZik7XG4gICAgfVxuXG4gICAgLnNlY29uZGFyeS1jb2xvcmVkIHtcbiAgICAgIGZvbnQtZmFtaWx5OiB2YXIoLS10aGVtZS1mb250KTtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNlY29uZGFyeS1jb2xvciwgIzUxNTE1MSk7XG4gICAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgICBmb250LXNpemU6IHZhcigtLXNlY29uZGFyeS1mb250LXNpemUsIDE2cHgpO1xuICAgICAgY29sb3I6IHZhcigtLWxpZ2h0LWNvbG9yLCAjZmZmKTtcbiAgICAgIHBhZGRpbmc6IDAgdmFyKC0tYnV0dG9uLXBhZGRpbmcsIDE2cHgpO1xuICAgICAgbWFyZ2luOiAwO1xuICAgICAgbWluLXdpZHRoOiA2NHB4O1xuICAgICAgaGVpZ2h0OiB2YXIoLS1idXR0b24taGVpZ2h0LCAzNnB4KTtcbiAgICAgIHRleHQtdHJhbnNmb3JtOiBub25lO1xuICAgIH1cblxuICAgIC5zZWNvbmRhcnktY29sb3JlZDpob3ZlciB7XG4gICAgICBib3gtc2hhZG93OiAwIDFweCAycHggMXB4IHZhcigtLXNlY29uZGFyeS1jb2xvciwgIzUxNTE1MSk7XG4gICAgfVxuXG4gICAgLnNlY29uZGFyeS1vdXRsaW5lZFtkaXNhYmxlZF0sIC5zZWNvbmRhcnktY29sb3JlZFtkaXNhYmxlZF0ge1xuICAgICAgICBvcGFjaXR5OiAwLjU7XG4gICAgfVxuICA8L3N0eWxlPlxuYDtcblxuZXhwb3J0IGNvbnN0IEFsZXJ0QnV0dG9uU3R5bGVzID0gaHRtbGBcbiAgPHN0eWxlPlxuICAgIC5hbGVydC1vdXRsaW5lZCB7XG4gICAgICBmb250LWZhbWlseTogdmFyKC0tdGhlbWUtZm9udCk7XG4gICAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1lcnJvci1jb2xvcik7XG4gICAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgICBmb250LXNpemU6IHZhcigtLXNlY29uZGFyeS1mb250LXNpemUsIDE2cHgpO1xuICAgICAgY29sb3I6IHZhcigtLWVycm9yLWNvbG9yLCAjZDUwMDAwKTtcbiAgICAgIHBhZGRpbmc6IDAgdmFyKC0tYnV0dG9uLXBhZGRpbmcsIDE2cHgpO1xuICAgICAgbWFyZ2luOiAwO1xuICAgICAgbWluLXdpZHRoOiA2NHB4O1xuICAgICAgaGVpZ2h0OiB2YXIoLS1idXR0b24taGVpZ2h0LCAzNnB4KTtcbiAgICAgIHRleHQtdHJhbnNmb3JtOiBub25lO1xuICAgIH1cblxuICAgIC5hbGVydC1vdXRsaW5lZDpob3ZlciB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1lcnJvci1jb2xvci1sMSwgI2RiNDQzNyk7XG4gICAgICBjb2xvcjogdmFyKC0tbGlnaHQtY29sb3IsICNmZmYpO1xuICAgIH1cblxuICAgIC5hbGVydC1jb2xvcmVkIHtcbiAgICAgIGZvbnQtZmFtaWx5OiB2YXIoLS10aGVtZS1mb250KTtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWVycm9yLWNvbG9yLCAjZDUwMDAwKTtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgICAgIGZvbnQtc2l6ZTogdmFyKC0tc2Vjb25kYXJ5LWZvbnQtc2l6ZSwgMTZweCk7XG4gICAgICBjb2xvcjogdmFyKC0tbGlnaHQtY29sb3IsICNmZmYpO1xuICAgICAgcGFkZGluZzogMCB2YXIoLS1idXR0b24tcGFkZGluZywgMTZweCk7XG4gICAgICBtYXJnaW46IDA7XG4gICAgICBtaW4td2lkdGg6IDY0cHg7XG4gICAgICBoZWlnaHQ6IHZhcigtLWJ1dHRvbi1oZWlnaHQsIDM2cHgpO1xuICAgICAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XG4gICAgfVxuXG4gICAgLmFsZXJ0LWNvbG9yZWQ6aG92ZXIge1xuICAgICAgYm94LXNoYWRvdzogMCAxcHggMnB4IDFweCB2YXIoLS1lcnJvci1jb2xvciwgI2Q1MDAwMCk7XG4gICAgfVxuXG4gICAgLmFsZXJ0LW91dGxpbmVkW2Rpc2FibGVkXSwgLmFsZXJ0LWNvbG9yZWRbZGlzYWJsZWRdIHtcbiAgICAgICAgb3BhY2l0eTogMC41O1xuICAgIH1cbiAgPC9zdHlsZT5cbmA7XG5cbmV4cG9ydCBjb25zdCBUb2dnbGVCdXR0b25TdHlsZXMgPSBodG1sYFxuICA8c3R5bGU+XG4gICAgLnRvZ2dsZS1ncm91cCB7XG4gICAgICBkaXNwbGF5OiBmbGV4OyBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kOyBhbGlnbi1pdGVtczogY2VudGVyOyBmbGV4LXdyYXA6IHdyYXA7XG4gICAgfVxuXG4gICAgLnRvZ2dsZS1ncm91cCAudG9nZ2xlOmZpcnN0LWNoaWxke1xuICAgICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogNXB4OyBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiA1cHg7XG4gICAgfVxuICAgIC50b2dnbGUtZ3JvdXAgLnRvZ2dsZTpsYXN0LWNoaWxke1xuICAgICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDVweDsgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDVweDtcbiAgICB9XG5cbiAgICAudG9nZ2xlIHtcbiAgICAgIHRleHQtdHJhbnNmb3JtOiBub25lO1xuICAgICAgbWFyZ2luOiAwcHg7XG4gICAgICBib3JkZXItcmFkaXVzOiAwcHg7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLXNlY29uZGFyeS1jb2xvci1sMyk7XG4gICAgICBjb2xvcjogdmFyKC0tc2Vjb25kYXJ5LWNvbG9yKTtcbiAgICAgIGZvbnQtc2l6ZTogdmFyKC0tc2Vjb25kYXJ5LWZvbnQtc2l6ZSwgMTZweCk7XG4gICAgICBmb250LWZhbWlseTogdmFyKC0tdGhlbWUtZm9udCk7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XG4gICAgICBtaW4td2lkdGg6IDY0cHg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIH1cblxuICAgIC50b2dnbGUuc21hbGwge1xuICAgICAgaGVpZ2h0OiAzMHB4O1xuICAgICAgZm9udC1zaXplOiB2YXIoLS10ZXJ0aWFyeS1mb250LXNpemUsIDE0cHgpO1xuICAgIH1cblxuICAgIC50b2dnbGU6aG92ZXIge1xuICAgICAgYm94LXNoYWRvdzogMCAxcHggMnB4IDFweCByZ2JhKHZhcigtLXNlY29uZGFyeS1jb2xvci1yZ2IpLCAwLjEpO1xuICAgIH1cblxuICAgIC5zZWxlY3RlZC10b2dnbGUge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc2Vjb25kYXJ5LWNvbG9yKTtcbiAgICAgIGNvbG9yOiB2YXIoLS1saWdodC1jb2xvciwgI2ZmZik7XG4gICAgfVxuXG4gICAgLnRvZ2dsZSBpcm9uLWljb257XG4gICAgICAtLWlyb24taWNvbi1oZWlnaHQ6IHZhcigtLWJvZHktZm9udC1zaXplLCAxNnB4KTtcbiAgICAgIG1hcmdpbi1yaWdodDogNXB4O1xuICAgIH1cblxuICAgIC50b2dnbGUgbXdjLWljb257XG4gICAgICAtLW1kYy1pY29uLXNpemU6IHZhcigtLWJvZHktZm9udC1zaXplLCAxNnB4KTtcbiAgICAgIG1hcmdpbi1yaWdodDogNXB4O1xuICAgIH1cbiAgPC9zdHlsZT5cbmA7XG5cbmV4cG9ydCBjb25zdCBGYWJTdHlsZXMgPSBodG1sYFxuICA8c3R5bGU+XG4gICAgcGFwZXItZmFiIHtcbiAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgYm90dG9tOiAzJTtcbiAgICAgIHJpZ2h0OiAyJTtcbiAgICB9XG5cbiAgICBwYXBlci1mYWJbZGlzYWJsZWRdLCAuZmFiW2Rpc2FibGVkXSB7XG4gICAgICAgIG9wYWNpdHk6IDAuNTtcbiAgICB9XG5cbiAgICAuZmFiIHtcbiAgICAgIGZvbnQtc2l6ZTogdmFyKC0tc2Vjb25kYXJ5LWZvbnQtc2l6ZSwgMTZweCk7XG4gICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgYm90dG9tOiAzJTtcbiAgICAgIHJpZ2h0OiAyJTtcbiAgICAgIGJveC1zaGFkb3c6IHZhcigtLXBhcGVyLW1hdGVyaWFsLWVsZXZhdGlvbi0yXy1fYm94LXNoYWRvdyk7XG4gICAgICBmb250LWZhbWlseTogdmFyKC0tdGhlbWUtZm9udCk7XG4gICAgfVxuXG4gICAgLmNvbG9yZWQtZmFiIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNlY29uZGFyeS1jb2xvciwgIzUxNTE1MSk7XG4gICAgICAtLWlyb24taWNvbi1oZWlnaHQ6IHZhcigtLWgyLWZvbnQtc2l6ZSwgMjZweCk7XG4gICAgICAtLWlyb24taWNvbi13aWR0aDogdmFyKC0taDItZm9udC1zaXplLCAyNnB4KTtcbiAgICAgIGNvbG9yOiB2YXIoLS1saWdodC1jb2xvciwgI2ZmZik7XG4gICAgfVxuXG4gICAgLmxpZ2h0LWNvbG9yZWQtZmFiIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWxpZ2h0LWNvbG9yLCAjZmZmKTtcbiAgICAgIC0taXJvbi1pY29uLWhlaWdodDogdmFyKC0taDItZm9udC1zaXplLCAyMHB4KTtcbiAgICAgIC0taXJvbi1pY29uLXdpZHRoOiB2YXIoLS1oMi1mb250LXNpemUsIDIwcHgpO1xuICAgICAgY29sb3I6IHZhcigtLXNlY29uZGFyeS1jb2xvcik7XG4gICAgICAvKiAtLWlyb24taWNvbi1zdHJva2UtY29sb3I6IHZhcigtLXNlY29uZGFyeS1jb2xvcik7ICovXG4gICAgfVxuXG4gICAgLmxpZ2h0LWNvbG9yZWQtZmFiOmhvdmVyLFxuICAgIC5jb2xvcmVkLWZhYjpob3ZlciB7XG4gICAgICBib3gtc2hhZG93OiB2YXIoLS1wYXBlci1tYXRlcmlhbC1lbGV2YXRpb24tM18tX2JveC1zaGFkb3cpO1xuICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgfVxuXG4gICAgLnJlY3Rhbmd1bGFyLWZhYiB7XG4gICAgICBoZWlnaHQ6ICB2YXIoLS1yZWN0YW5ndWxhci1mYWItaGVpZ2h0LCA1MHB4KTtcbiAgICAgIHdpZHRoOiB2YXIoLS1yZWN0YW5ndWxhci1mYWItd2lkdGgsIDEyMHB4KTtcbiAgICAgIGJvcmRlci1yYWRpdXM6ICB2YXIoLS1yZWN0YW5ndWxhci1mYWItaGVpZ2h0LCA1MHB4KTtcbiAgICAgIHBhZGRpbmc6IHZhcigtLXJlY3Rhbmd1bGFyLWZhYi1wYWRkaW5nLCAwcHgpO1xuICAgICAgbWF4LWhlaWdodDogdmFyKC0tcmVjdGFuZ3VsYXItZmFiLW1heC1oZWlnaHQsIDUwcHgpO1xuICAgICAgei1pbmRleDogIHZhcigtLXJlY3Rhbmd1bGFyLWZhYi16LWluZGV4LCAxKTtcbiAgICB9XG4gICAgLnNtYWxsLWZhYiB7XG4gICAgICBoZWlnaHQ6IDUwcHg7XG4gICAgICB3aWR0aDogNTBweDtcbiAgICAgIHBhZGRpbmc6IDVweDtcbiAgICB9XG4gICAgQG1lZGlhIGFsbCBhbmQgKG1heC13aWR0aDogNzY3cHgpIHtcbiAgICAgIC5yZWN0YW5ndWxhci1mYWIge1xuICAgICAgICBoZWlnaHQ6IHZhcigtLXJlY3Rhbmd1bGFyLWZhYi1oZWlnaHQsIDQwcHgpO1xuICAgICAgICB3aWR0aDogdmFyKC0tcmVjdGFuZ3VsYXItZmFiLXdpZHRoLCAxMjBweCk7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDUwcHg7XG4gICAgICAgIHBhZGRpbmc6IDA7XG4gICAgICAgIC0tZmFiLWljb24taGVpZ2h0OiA0MHB4O1xuICAgICAgfVxuICAgIH1cbiAgPC9zdHlsZT5cbmA7XG5cbmV4cG9ydCBjb25zdCBCdXR0b25TcGlubmVyU3R5bGVzID0gaHRtbGBcbiAgPHN0eWxlPlxuICAgIC5jb2xvcmVkLWJ0LXNwaW5uZXIge1xuICAgICAgd2lkdGg6IDE4cHg7XG4gICAgICBoZWlnaHQ6IDE4cHg7XG4gICAgICAtLXBhcGVyLXNwaW5uZXItY29sb3I6IHZhcigtLWxpZ2h0LWNvbG9yLCAjZmZmKTtcbiAgICAgIC0tcGFwZXItc3Bpbm5lci1zdHJva2Utd2lkdGg6IDNweDtcbiAgICAgIG1hcmdpbi1yaWdodDogOHB4O1xuICAgIH1cblxuICAgIC5zZWNvbmRhcnktb3V0bGluZWQtYnQtc3Bpbm5lciB7XG4gICAgICB3aWR0aDogMThweDtcbiAgICAgIGhlaWdodDogMThweDtcbiAgICAgIC0tcGFwZXItc3Bpbm5lci1jb2xvcjogdmFyKC0tc2Vjb25kYXJ5LWNvbG9yLCAjZmZmKTtcbiAgICAgIC0tcGFwZXItc3Bpbm5lci1zdHJva2Utd2lkdGg6IDNweDtcbiAgICAgIG1hcmdpbi1yaWdodDogOHB4O1xuICAgIH1cblxuICAgIC5wcmltYXJ5LW91dGxpbmVkLWJ0LXNwaW5uZXIge1xuICAgICAgd2lkdGg6IDE4cHg7XG4gICAgICBoZWlnaHQ6IDE4cHg7XG4gICAgICAtLXBhcGVyLXNwaW5uZXItY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IsICNmZmYpO1xuICAgICAgLS1wYXBlci1zcGlubmVyLXN0cm9rZS13aWR0aDogM3B4O1xuICAgICAgbWFyZ2luLXJpZ2h0OiA4cHg7XG4gICAgfVxuXG4gICAgLmJ1dHRvbi1wcmVmaXgtaWNvbiB7XG4gICAgICAtLWlyb24taWNvbi1oZWlnaHQ6IHZhcigtLWJvZHktZm9udC1zaXplLCAxNnB4KTtcbiAgICAgIC0tbWRjLWljb24tc2l6ZTogdmFyKC0tYm9keS1mb250LXNpemUsIDE2cHgpO1xuICAgICAgbWFyZ2luLXJpZ2h0OiA1cHg7XG4gICAgfVxuICA8L3N0eWxlPlxuYDtcblxuZXhwb3J0IGNvbnN0IFNtYWxsQnV0dG9uU3R5bGVzID0gaHRtbGBcbiAgPHN0eWxlPlxuICAgIC5zbWFsbC1idXR0b24ge1xuICAgICAgaGVpZ2h0OiAyNXB4ICFpbXBvcnRhbnQ7XG4gICAgICB3aWR0aDogYXV0byAhaW1wb3J0YW50O1xuICAgICAgcGFkZGluZzogMHB4ICFpbXBvcnRhbnQ7XG4gICAgICBmb250LXNpemU6IHZhcigtLXRlcnRpYXJ5LWZvbnQtc2l6ZSkgIWltcG9ydGFudDtcbiAgICB9XG4gICAgQG1lZGlhIGFsbCBhbmQgKG1heC13aWR0aDogNzY3cHgpIHtcbiAgICAgIC5zbWFsbC1idXR0b257XG4gICAgICAgIGhlaWdodDogMjBweCAhaW1wb3J0YW50O1xuICAgICAgfVxuICAgIH1cbiAgPC9zdHlsZT5cbmA7XG5cbmV4cG9ydCBjb25zdCBQYXBlclRvZ2dsZUJ1dHRvblN0eWxlcyA9IGh0bWxgXG4gIDxjdXN0b20tc3R5bGU+XG4gICAgPHN0eWxlPlxuICAgICAgcGFwZXItdG9nZ2xlLWJ1dHRvbiB7XG4gICAgICAgIGZvbnQtZmFtaWx5OiB2YXIoLS10aGVtZS1mb250KTtcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAtLXBhcGVyLXRvZ2dsZS1idXR0b24tY2hlY2tlZC1idXR0b246IHtcbiAgICAgICAgICBoZWlnaHQ6IDE1cHg7XG4gICAgICAgICAgd2lkdGg6IDUwJTtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiAwO1xuICAgICAgICAgIGJvdHRvbTogMnB4O1xuICAgICAgICAgIGJveC1zaGFkb3c6IG5vbmU7XG4gICAgICAgICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXMgOiA4cHg7XG4gICAgICAgICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDhweDtcbiAgICAgICAgfVxuICAgICAgICAtLXBhcGVyLXRvZ2dsZS1idXR0b24tdW5jaGVja2VkLWJ1dHRvbjoge1xuICAgICAgICAgIGhlaWdodDogMTVweDtcbiAgICAgICAgICB3aWR0aDogNTAlO1xuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDA7XG4gICAgICAgICAgYm90dG9tOiAycHg7XG4gICAgICAgICAgYm94LXNoYWRvdzogbm9uZTtcbiAgICAgICAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzIDogOHB4O1xuICAgICAgICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDhweDtcbiAgICAgICAgfVxuICAgICAgICAtLXBhcGVyLXRvZ2dsZS1idXR0b24tdW5jaGVja2VkLWJhcjoge1xuICAgICAgICAgIGhlaWdodDogMTVweDtcbiAgICAgICAgICBib3R0b206IDJweDtcbiAgICAgICAgICBib3gtc2hhZG93OiBub25lO1xuICAgICAgICB9XG4gICAgICAgIC0tcGFwZXItdG9nZ2xlLWJ1dHRvbi1jaGVja2VkLWJhcjoge1xuICAgICAgICAgIGhlaWdodDogMTVweDtcbiAgICAgICAgICBib3R0b206IDJweDtcbiAgICAgICAgICBib3gtc2hhZG93OiBub25lO1xuICAgICAgICB9XG4gICAgICAgIC0tcGFwZXItdG9nZ2xlLWJ1dHRvbi1sYWJlbC1jb2xvcjogdmFyKC0tc2Vjb25kYXJ5LWNvbG9yKTtcbiAgICAgICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG4gICAgICB9XG5cbiAgICAgIHBhcGVyLXRvZ2dsZS1idXR0b24ucHJpbWFyeS1jb2xvcmVkIHtcbiAgICAgICAgLS1wYXBlci10b2dnbGUtYnV0dG9uLXVuY2hlY2tlZC1iYXItY29sb3I6IHZhcigtLXNlY29uZGFyeS1jb2xvci1sMSk7XG4gICAgICAgIC0tcGFwZXItdG9nZ2xlLWJ1dHRvbi11bmNoZWNrZWQtYnV0dG9uLWNvbG9yOiAgdmFyKC0tc2Vjb25kYXJ5LWNvbG9yLWwxKTtcbiAgICAgICAgLS1wYXBlci10b2dnbGUtYnV0dG9uLWNoZWNrZWQtYmFyLWNvbG9yOiAgdmFyKC0tcHJpbWFyeS1jb2xvci1sMSk7XG4gICAgICAgIC0tcGFwZXItdG9nZ2xlLWJ1dHRvbi1jaGVja2VkLWJ1dHRvbi1jb2xvcjogIHZhcigtLXByaW1hcnktY29sb3IpO1xuICAgICAgfVxuXG4gICAgICBwYXBlci10b2dnbGUtYnV0dG9uLnNlY29uZGFyeS1jb2xvcmVkIHtcbiAgICAgICAgLS1wYXBlci10b2dnbGUtYnV0dG9uLXVuY2hlY2tlZC1iYXItY29sb3I6IHZhcigtLXNlY29uZGFyeS1jb2xvci1sMik7XG4gICAgICAgIC0tcGFwZXItdG9nZ2xlLWJ1dHRvbi11bmNoZWNrZWQtYnV0dG9uLWNvbG9yOiAgdmFyKC0tc2Vjb25kYXJ5LWNvbG9yLWwyKTtcbiAgICAgICAgLS1wYXBlci10b2dnbGUtYnV0dG9uLWNoZWNrZWQtYmFyLWNvbG9yOiAgdmFyKC0tc2Vjb25kYXJ5LWNvbG9yLWwxKTtcbiAgICAgICAgLS1wYXBlci10b2dnbGUtYnV0dG9uLWNoZWNrZWQtYnV0dG9uLWNvbG9yOiAgdmFyKC0tc2Vjb25kYXJ5LWNvbG9yKTtcbiAgICAgIH1cbiAgICA8L3N0eWxlPlxuICA8L2N1c3RvbS1zdHlsZT5cbmA7XG4iLCIvKlxyXG4gKiAgYmlnLmpzIHY2LjIuMVxyXG4gKiAgQSBzbWFsbCwgZmFzdCwgZWFzeS10by11c2UgbGlicmFyeSBmb3IgYXJiaXRyYXJ5LXByZWNpc2lvbiBkZWNpbWFsIGFyaXRobWV0aWMuXHJcbiAqICBDb3B5cmlnaHQgKGMpIDIwMjIgTWljaGFlbCBNY2xhdWdobGluXHJcbiAqICBodHRwczovL2dpdGh1Yi5jb20vTWlrZU1jbC9iaWcuanMvTElDRU5DRS5tZFxyXG4gKi9cclxuXHJcblxyXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogRURJVEFCTEUgREVGQVVMVFMgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5cclxuICAvLyBUaGUgZGVmYXVsdCB2YWx1ZXMgYmVsb3cgbXVzdCBiZSBpbnRlZ2VycyB3aXRoaW4gdGhlIHN0YXRlZCByYW5nZXMuXHJcblxyXG4gIC8qXHJcbiAgICogVGhlIG1heGltdW0gbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIChEUCkgb2YgdGhlIHJlc3VsdHMgb2Ygb3BlcmF0aW9ucyBpbnZvbHZpbmcgZGl2aXNpb246XHJcbiAgICogZGl2IGFuZCBzcXJ0LCBhbmQgcG93IHdpdGggbmVnYXRpdmUgZXhwb25lbnRzLlxyXG4gICAqL1xyXG52YXIgRFAgPSAyMCwgICAgICAgICAgLy8gMCB0byBNQVhfRFBcclxuXHJcbiAgLypcclxuICAgKiBUaGUgcm91bmRpbmcgbW9kZSAoUk0pIHVzZWQgd2hlbiByb3VuZGluZyB0byB0aGUgYWJvdmUgZGVjaW1hbCBwbGFjZXMuXHJcbiAgICpcclxuICAgKiAgMCAgVG93YXJkcyB6ZXJvIChpLmUuIHRydW5jYXRlLCBubyByb3VuZGluZykuICAgICAgIChST1VORF9ET1dOKVxyXG4gICAqICAxICBUbyBuZWFyZXN0IG5laWdoYm91ci4gSWYgZXF1aWRpc3RhbnQsIHJvdW5kIHVwLiAgKFJPVU5EX0hBTEZfVVApXHJcbiAgICogIDIgIFRvIG5lYXJlc3QgbmVpZ2hib3VyLiBJZiBlcXVpZGlzdGFudCwgdG8gZXZlbi4gICAoUk9VTkRfSEFMRl9FVkVOKVxyXG4gICAqICAzICBBd2F5IGZyb20gemVyby4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKFJPVU5EX1VQKVxyXG4gICAqL1xyXG4gIFJNID0gMSwgICAgICAgICAgICAgLy8gMCwgMSwgMiBvciAzXHJcblxyXG4gIC8vIFRoZSBtYXhpbXVtIHZhbHVlIG9mIERQIGFuZCBCaWcuRFAuXHJcbiAgTUFYX0RQID0gMUU2LCAgICAgICAvLyAwIHRvIDEwMDAwMDBcclxuXHJcbiAgLy8gVGhlIG1heGltdW0gbWFnbml0dWRlIG9mIHRoZSBleHBvbmVudCBhcmd1bWVudCB0byB0aGUgcG93IG1ldGhvZC5cclxuICBNQVhfUE9XRVIgPSAxRTYsICAgIC8vIDEgdG8gMTAwMDAwMFxyXG5cclxuICAvKlxyXG4gICAqIFRoZSBuZWdhdGl2ZSBleHBvbmVudCAoTkUpIGF0IGFuZCBiZW5lYXRoIHdoaWNoIHRvU3RyaW5nIHJldHVybnMgZXhwb25lbnRpYWwgbm90YXRpb24uXHJcbiAgICogKEphdmFTY3JpcHQgbnVtYmVyczogLTcpXHJcbiAgICogLTEwMDAwMDAgaXMgdGhlIG1pbmltdW0gcmVjb21tZW5kZWQgZXhwb25lbnQgdmFsdWUgb2YgYSBCaWcuXHJcbiAgICovXHJcbiAgTkUgPSAtNywgICAgICAgICAgICAvLyAwIHRvIC0xMDAwMDAwXHJcblxyXG4gIC8qXHJcbiAgICogVGhlIHBvc2l0aXZlIGV4cG9uZW50IChQRSkgYXQgYW5kIGFib3ZlIHdoaWNoIHRvU3RyaW5nIHJldHVybnMgZXhwb25lbnRpYWwgbm90YXRpb24uXHJcbiAgICogKEphdmFTY3JpcHQgbnVtYmVyczogMjEpXHJcbiAgICogMTAwMDAwMCBpcyB0aGUgbWF4aW11bSByZWNvbW1lbmRlZCBleHBvbmVudCB2YWx1ZSBvZiBhIEJpZywgYnV0IHRoaXMgbGltaXQgaXMgbm90IGVuZm9yY2VkLlxyXG4gICAqL1xyXG4gIFBFID0gMjEsICAgICAgICAgICAgLy8gMCB0byAxMDAwMDAwXHJcblxyXG4gIC8qXHJcbiAgICogV2hlbiB0cnVlLCBhbiBlcnJvciB3aWxsIGJlIHRocm93biBpZiBhIHByaW1pdGl2ZSBudW1iZXIgaXMgcGFzc2VkIHRvIHRoZSBCaWcgY29uc3RydWN0b3IsXHJcbiAgICogb3IgaWYgdmFsdWVPZiBpcyBjYWxsZWQsIG9yIGlmIHRvTnVtYmVyIGlzIGNhbGxlZCBvbiBhIEJpZyB3aGljaCBjYW5ub3QgYmUgY29udmVydGVkIHRvIGFcclxuICAgKiBwcmltaXRpdmUgbnVtYmVyIHdpdGhvdXQgYSBsb3NzIG9mIHByZWNpc2lvbi5cclxuICAgKi9cclxuICBTVFJJQ1QgPSBmYWxzZSwgICAgIC8vIHRydWUgb3IgZmFsc2VcclxuXHJcblxyXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5cclxuICAvLyBFcnJvciBtZXNzYWdlcy5cclxuICBOQU1FID0gJ1tiaWcuanNdICcsXHJcbiAgSU5WQUxJRCA9IE5BTUUgKyAnSW52YWxpZCAnLFxyXG4gIElOVkFMSURfRFAgPSBJTlZBTElEICsgJ2RlY2ltYWwgcGxhY2VzJyxcclxuICBJTlZBTElEX1JNID0gSU5WQUxJRCArICdyb3VuZGluZyBtb2RlJyxcclxuICBESVZfQllfWkVSTyA9IE5BTUUgKyAnRGl2aXNpb24gYnkgemVybycsXHJcblxyXG4gIC8vIFRoZSBzaGFyZWQgcHJvdG90eXBlIG9iamVjdC5cclxuICBQID0ge30sXHJcbiAgVU5ERUZJTkVEID0gdm9pZCAwLFxyXG4gIE5VTUVSSUMgPSAvXi0/KFxcZCsoXFwuXFxkKik/fFxcLlxcZCspKGVbKy1dP1xcZCspPyQvaTtcclxuXHJcblxyXG4vKlxyXG4gKiBDcmVhdGUgYW5kIHJldHVybiBhIEJpZyBjb25zdHJ1Y3Rvci5cclxuICovXHJcbmZ1bmN0aW9uIF9CaWdfKCkge1xyXG5cclxuICAvKlxyXG4gICAqIFRoZSBCaWcgY29uc3RydWN0b3IgYW5kIGV4cG9ydGVkIGZ1bmN0aW9uLlxyXG4gICAqIENyZWF0ZSBhbmQgcmV0dXJuIGEgbmV3IGluc3RhbmNlIG9mIGEgQmlnIG51bWJlciBvYmplY3QuXHJcbiAgICpcclxuICAgKiBuIHtudW1iZXJ8c3RyaW5nfEJpZ30gQSBudW1lcmljIHZhbHVlLlxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIEJpZyhuKSB7XHJcbiAgICB2YXIgeCA9IHRoaXM7XHJcblxyXG4gICAgLy8gRW5hYmxlIGNvbnN0cnVjdG9yIHVzYWdlIHdpdGhvdXQgbmV3LlxyXG4gICAgaWYgKCEoeCBpbnN0YW5jZW9mIEJpZykpIHJldHVybiBuID09PSBVTkRFRklORUQgPyBfQmlnXygpIDogbmV3IEJpZyhuKTtcclxuXHJcbiAgICAvLyBEdXBsaWNhdGUuXHJcbiAgICBpZiAobiBpbnN0YW5jZW9mIEJpZykge1xyXG4gICAgICB4LnMgPSBuLnM7XHJcbiAgICAgIHguZSA9IG4uZTtcclxuICAgICAgeC5jID0gbi5jLnNsaWNlKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAodHlwZW9mIG4gIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgaWYgKEJpZy5zdHJpY3QgPT09IHRydWUgJiYgdHlwZW9mIG4gIT09ICdiaWdpbnQnKSB7XHJcbiAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoSU5WQUxJRCArICd2YWx1ZScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gTWludXMgemVybz9cclxuICAgICAgICBuID0gbiA9PT0gMCAmJiAxIC8gbiA8IDAgPyAnLTAnIDogU3RyaW5nKG4pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBwYXJzZSh4LCBuKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZXRhaW4gYSByZWZlcmVuY2UgdG8gdGhpcyBCaWcgY29uc3RydWN0b3IuXHJcbiAgICAvLyBTaGFkb3cgQmlnLnByb3RvdHlwZS5jb25zdHJ1Y3RvciB3aGljaCBwb2ludHMgdG8gT2JqZWN0LlxyXG4gICAgeC5jb25zdHJ1Y3RvciA9IEJpZztcclxuICB9XHJcblxyXG4gIEJpZy5wcm90b3R5cGUgPSBQO1xyXG4gIEJpZy5EUCA9IERQO1xyXG4gIEJpZy5STSA9IFJNO1xyXG4gIEJpZy5ORSA9IE5FO1xyXG4gIEJpZy5QRSA9IFBFO1xyXG4gIEJpZy5zdHJpY3QgPSBTVFJJQ1Q7XHJcbiAgQmlnLnJvdW5kRG93biA9IDA7XHJcbiAgQmlnLnJvdW5kSGFsZlVwID0gMTtcclxuICBCaWcucm91bmRIYWxmRXZlbiA9IDI7XHJcbiAgQmlnLnJvdW5kVXAgPSAzO1xyXG5cclxuICByZXR1cm4gQmlnO1xyXG59XHJcblxyXG5cclxuLypcclxuICogUGFyc2UgdGhlIG51bWJlciBvciBzdHJpbmcgdmFsdWUgcGFzc2VkIHRvIGEgQmlnIGNvbnN0cnVjdG9yLlxyXG4gKlxyXG4gKiB4IHtCaWd9IEEgQmlnIG51bWJlciBpbnN0YW5jZS5cclxuICogbiB7bnVtYmVyfHN0cmluZ30gQSBudW1lcmljIHZhbHVlLlxyXG4gKi9cclxuZnVuY3Rpb24gcGFyc2UoeCwgbikge1xyXG4gIHZhciBlLCBpLCBubDtcclxuXHJcbiAgaWYgKCFOVU1FUklDLnRlc3QobikpIHtcclxuICAgIHRocm93IEVycm9yKElOVkFMSUQgKyAnbnVtYmVyJyk7XHJcbiAgfVxyXG5cclxuICAvLyBEZXRlcm1pbmUgc2lnbi5cclxuICB4LnMgPSBuLmNoYXJBdCgwKSA9PSAnLScgPyAobiA9IG4uc2xpY2UoMSksIC0xKSA6IDE7XHJcblxyXG4gIC8vIERlY2ltYWwgcG9pbnQ/XHJcbiAgaWYgKChlID0gbi5pbmRleE9mKCcuJykpID4gLTEpIG4gPSBuLnJlcGxhY2UoJy4nLCAnJyk7XHJcblxyXG4gIC8vIEV4cG9uZW50aWFsIGZvcm0/XHJcbiAgaWYgKChpID0gbi5zZWFyY2goL2UvaSkpID4gMCkge1xyXG5cclxuICAgIC8vIERldGVybWluZSBleHBvbmVudC5cclxuICAgIGlmIChlIDwgMCkgZSA9IGk7XHJcbiAgICBlICs9ICtuLnNsaWNlKGkgKyAxKTtcclxuICAgIG4gPSBuLnN1YnN0cmluZygwLCBpKTtcclxuICB9IGVsc2UgaWYgKGUgPCAwKSB7XHJcblxyXG4gICAgLy8gSW50ZWdlci5cclxuICAgIGUgPSBuLmxlbmd0aDtcclxuICB9XHJcblxyXG4gIG5sID0gbi5sZW5ndGg7XHJcblxyXG4gIC8vIERldGVybWluZSBsZWFkaW5nIHplcm9zLlxyXG4gIGZvciAoaSA9IDA7IGkgPCBubCAmJiBuLmNoYXJBdChpKSA9PSAnMCc7KSArK2k7XHJcblxyXG4gIGlmIChpID09IG5sKSB7XHJcblxyXG4gICAgLy8gWmVyby5cclxuICAgIHguYyA9IFt4LmUgPSAwXTtcclxuICB9IGVsc2Uge1xyXG5cclxuICAgIC8vIERldGVybWluZSB0cmFpbGluZyB6ZXJvcy5cclxuICAgIGZvciAoOyBubCA+IDAgJiYgbi5jaGFyQXQoLS1ubCkgPT0gJzAnOyk7XHJcbiAgICB4LmUgPSBlIC0gaSAtIDE7XHJcbiAgICB4LmMgPSBbXTtcclxuXHJcbiAgICAvLyBDb252ZXJ0IHN0cmluZyB0byBhcnJheSBvZiBkaWdpdHMgd2l0aG91dCBsZWFkaW5nL3RyYWlsaW5nIHplcm9zLlxyXG4gICAgZm9yIChlID0gMDsgaSA8PSBubDspIHguY1tlKytdID0gK24uY2hhckF0KGkrKyk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4geDtcclxufVxyXG5cclxuXHJcbi8qXHJcbiAqIFJvdW5kIEJpZyB4IHRvIGEgbWF4aW11bSBvZiBzZCBzaWduaWZpY2FudCBkaWdpdHMgdXNpbmcgcm91bmRpbmcgbW9kZSBybS5cclxuICpcclxuICogeCB7QmlnfSBUaGUgQmlnIHRvIHJvdW5kLlxyXG4gKiBzZCB7bnVtYmVyfSBTaWduaWZpY2FudCBkaWdpdHM6IGludGVnZXIsIDAgdG8gTUFYX0RQIGluY2x1c2l2ZS5cclxuICogcm0ge251bWJlcn0gUm91bmRpbmcgbW9kZTogMCAoZG93biksIDEgKGhhbGYtdXApLCAyIChoYWxmLWV2ZW4pIG9yIDMgKHVwKS5cclxuICogW21vcmVdIHtib29sZWFufSBXaGV0aGVyIHRoZSByZXN1bHQgb2YgZGl2aXNpb24gd2FzIHRydW5jYXRlZC5cclxuICovXHJcbmZ1bmN0aW9uIHJvdW5kKHgsIHNkLCBybSwgbW9yZSkge1xyXG4gIHZhciB4YyA9IHguYztcclxuXHJcbiAgaWYgKHJtID09PSBVTkRFRklORUQpIHJtID0geC5jb25zdHJ1Y3Rvci5STTtcclxuICBpZiAocm0gIT09IDAgJiYgcm0gIT09IDEgJiYgcm0gIT09IDIgJiYgcm0gIT09IDMpIHtcclxuICAgIHRocm93IEVycm9yKElOVkFMSURfUk0pO1xyXG4gIH1cclxuXHJcbiAgaWYgKHNkIDwgMSkge1xyXG4gICAgbW9yZSA9XHJcbiAgICAgIHJtID09PSAzICYmIChtb3JlIHx8ICEheGNbMF0pIHx8IHNkID09PSAwICYmIChcclxuICAgICAgcm0gPT09IDEgJiYgeGNbMF0gPj0gNSB8fFxyXG4gICAgICBybSA9PT0gMiAmJiAoeGNbMF0gPiA1IHx8IHhjWzBdID09PSA1ICYmIChtb3JlIHx8IHhjWzFdICE9PSBVTkRFRklORUQpKVxyXG4gICAgKTtcclxuXHJcbiAgICB4Yy5sZW5ndGggPSAxO1xyXG5cclxuICAgIGlmIChtb3JlKSB7XHJcblxyXG4gICAgICAvLyAxLCAwLjEsIDAuMDEsIDAuMDAxLCAwLjAwMDEgZXRjLlxyXG4gICAgICB4LmUgPSB4LmUgLSBzZCArIDE7XHJcbiAgICAgIHhjWzBdID0gMTtcclxuICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAvLyBaZXJvLlxyXG4gICAgICB4Y1swXSA9IHguZSA9IDA7XHJcbiAgICB9XHJcbiAgfSBlbHNlIGlmIChzZCA8IHhjLmxlbmd0aCkge1xyXG5cclxuICAgIC8vIHhjW3NkXSBpcyB0aGUgZGlnaXQgYWZ0ZXIgdGhlIGRpZ2l0IHRoYXQgbWF5IGJlIHJvdW5kZWQgdXAuXHJcbiAgICBtb3JlID1cclxuICAgICAgcm0gPT09IDEgJiYgeGNbc2RdID49IDUgfHxcclxuICAgICAgcm0gPT09IDIgJiYgKHhjW3NkXSA+IDUgfHwgeGNbc2RdID09PSA1ICYmXHJcbiAgICAgICAgKG1vcmUgfHwgeGNbc2QgKyAxXSAhPT0gVU5ERUZJTkVEIHx8IHhjW3NkIC0gMV0gJiAxKSkgfHxcclxuICAgICAgcm0gPT09IDMgJiYgKG1vcmUgfHwgISF4Y1swXSk7XHJcblxyXG4gICAgLy8gUmVtb3ZlIGFueSBkaWdpdHMgYWZ0ZXIgdGhlIHJlcXVpcmVkIHByZWNpc2lvbi5cclxuICAgIHhjLmxlbmd0aCA9IHNkO1xyXG5cclxuICAgIC8vIFJvdW5kIHVwP1xyXG4gICAgaWYgKG1vcmUpIHtcclxuXHJcbiAgICAgIC8vIFJvdW5kaW5nIHVwIG1heSBtZWFuIHRoZSBwcmV2aW91cyBkaWdpdCBoYXMgdG8gYmUgcm91bmRlZCB1cC5cclxuICAgICAgZm9yICg7ICsreGNbLS1zZF0gPiA5Oykge1xyXG4gICAgICAgIHhjW3NkXSA9IDA7XHJcbiAgICAgICAgaWYgKHNkID09PSAwKSB7XHJcbiAgICAgICAgICArK3guZTtcclxuICAgICAgICAgIHhjLnVuc2hpZnQoMSk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBSZW1vdmUgdHJhaWxpbmcgemVyb3MuXHJcbiAgICBmb3IgKHNkID0geGMubGVuZ3RoOyAheGNbLS1zZF07KSB4Yy5wb3AoKTtcclxuICB9XHJcblxyXG4gIHJldHVybiB4O1xyXG59XHJcblxyXG5cclxuLypcclxuICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgdmFsdWUgb2YgQmlnIHggaW4gbm9ybWFsIG9yIGV4cG9uZW50aWFsIG5vdGF0aW9uLlxyXG4gKiBIYW5kbGVzIFAudG9FeHBvbmVudGlhbCwgUC50b0ZpeGVkLCBQLnRvSlNPTiwgUC50b1ByZWNpc2lvbiwgUC50b1N0cmluZyBhbmQgUC52YWx1ZU9mLlxyXG4gKi9cclxuZnVuY3Rpb24gc3RyaW5naWZ5KHgsIGRvRXhwb25lbnRpYWwsIGlzTm9uemVybykge1xyXG4gIHZhciBlID0geC5lLFxyXG4gICAgcyA9IHguYy5qb2luKCcnKSxcclxuICAgIG4gPSBzLmxlbmd0aDtcclxuXHJcbiAgLy8gRXhwb25lbnRpYWwgbm90YXRpb24/XHJcbiAgaWYgKGRvRXhwb25lbnRpYWwpIHtcclxuICAgIHMgPSBzLmNoYXJBdCgwKSArIChuID4gMSA/ICcuJyArIHMuc2xpY2UoMSkgOiAnJykgKyAoZSA8IDAgPyAnZScgOiAnZSsnKSArIGU7XHJcblxyXG4gIC8vIE5vcm1hbCBub3RhdGlvbi5cclxuICB9IGVsc2UgaWYgKGUgPCAwKSB7XHJcbiAgICBmb3IgKDsgKytlOykgcyA9ICcwJyArIHM7XHJcbiAgICBzID0gJzAuJyArIHM7XHJcbiAgfSBlbHNlIGlmIChlID4gMCkge1xyXG4gICAgaWYgKCsrZSA+IG4pIHtcclxuICAgICAgZm9yIChlIC09IG47IGUtLTspIHMgKz0gJzAnO1xyXG4gICAgfSBlbHNlIGlmIChlIDwgbikge1xyXG4gICAgICBzID0gcy5zbGljZSgwLCBlKSArICcuJyArIHMuc2xpY2UoZSk7XHJcbiAgICB9XHJcbiAgfSBlbHNlIGlmIChuID4gMSkge1xyXG4gICAgcyA9IHMuY2hhckF0KDApICsgJy4nICsgcy5zbGljZSgxKTtcclxuICB9XHJcblxyXG4gIHJldHVybiB4LnMgPCAwICYmIGlzTm9uemVybyA/ICctJyArIHMgOiBzO1xyXG59XHJcblxyXG5cclxuLy8gUHJvdG90eXBlL2luc3RhbmNlIG1ldGhvZHNcclxuXHJcblxyXG4vKlxyXG4gKiBSZXR1cm4gYSBuZXcgQmlnIHdob3NlIHZhbHVlIGlzIHRoZSBhYnNvbHV0ZSB2YWx1ZSBvZiB0aGlzIEJpZy5cclxuICovXHJcblAuYWJzID0gZnVuY3Rpb24gKCkge1xyXG4gIHZhciB4ID0gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcyk7XHJcbiAgeC5zID0gMTtcclxuICByZXR1cm4geDtcclxufTtcclxuXHJcblxyXG4vKlxyXG4gKiBSZXR1cm4gMSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWcgaXMgZ3JlYXRlciB0aGFuIHRoZSB2YWx1ZSBvZiBCaWcgeSxcclxuICogICAgICAgLTEgaWYgdGhlIHZhbHVlIG9mIHRoaXMgQmlnIGlzIGxlc3MgdGhhbiB0aGUgdmFsdWUgb2YgQmlnIHksIG9yXHJcbiAqICAgICAgICAwIGlmIHRoZXkgaGF2ZSB0aGUgc2FtZSB2YWx1ZS5cclxuICovXHJcblAuY21wID0gZnVuY3Rpb24gKHkpIHtcclxuICB2YXIgaXNuZWcsXHJcbiAgICB4ID0gdGhpcyxcclxuICAgIHhjID0geC5jLFxyXG4gICAgeWMgPSAoeSA9IG5ldyB4LmNvbnN0cnVjdG9yKHkpKS5jLFxyXG4gICAgaSA9IHgucyxcclxuICAgIGogPSB5LnMsXHJcbiAgICBrID0geC5lLFxyXG4gICAgbCA9IHkuZTtcclxuXHJcbiAgLy8gRWl0aGVyIHplcm8/XHJcbiAgaWYgKCF4Y1swXSB8fCAheWNbMF0pIHJldHVybiAheGNbMF0gPyAheWNbMF0gPyAwIDogLWogOiBpO1xyXG5cclxuICAvLyBTaWducyBkaWZmZXI/XHJcbiAgaWYgKGkgIT0gaikgcmV0dXJuIGk7XHJcblxyXG4gIGlzbmVnID0gaSA8IDA7XHJcblxyXG4gIC8vIENvbXBhcmUgZXhwb25lbnRzLlxyXG4gIGlmIChrICE9IGwpIHJldHVybiBrID4gbCBeIGlzbmVnID8gMSA6IC0xO1xyXG5cclxuICBqID0gKGsgPSB4Yy5sZW5ndGgpIDwgKGwgPSB5Yy5sZW5ndGgpID8gayA6IGw7XHJcblxyXG4gIC8vIENvbXBhcmUgZGlnaXQgYnkgZGlnaXQuXHJcbiAgZm9yIChpID0gLTE7ICsraSA8IGo7KSB7XHJcbiAgICBpZiAoeGNbaV0gIT0geWNbaV0pIHJldHVybiB4Y1tpXSA+IHljW2ldIF4gaXNuZWcgPyAxIDogLTE7XHJcbiAgfVxyXG5cclxuICAvLyBDb21wYXJlIGxlbmd0aHMuXHJcbiAgcmV0dXJuIGsgPT0gbCA/IDAgOiBrID4gbCBeIGlzbmVnID8gMSA6IC0xO1xyXG59O1xyXG5cclxuXHJcbi8qXHJcbiAqIFJldHVybiBhIG5ldyBCaWcgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgQmlnIGRpdmlkZWQgYnkgdGhlIHZhbHVlIG9mIEJpZyB5LCByb3VuZGVkLFxyXG4gKiBpZiBuZWNlc3NhcnksIHRvIGEgbWF4aW11bSBvZiBCaWcuRFAgZGVjaW1hbCBwbGFjZXMgdXNpbmcgcm91bmRpbmcgbW9kZSBCaWcuUk0uXHJcbiAqL1xyXG5QLmRpdiA9IGZ1bmN0aW9uICh5KSB7XHJcbiAgdmFyIHggPSB0aGlzLFxyXG4gICAgQmlnID0geC5jb25zdHJ1Y3RvcixcclxuICAgIGEgPSB4LmMsICAgICAgICAgICAgICAgICAgLy8gZGl2aWRlbmRcclxuICAgIGIgPSAoeSA9IG5ldyBCaWcoeSkpLmMsICAgLy8gZGl2aXNvclxyXG4gICAgayA9IHgucyA9PSB5LnMgPyAxIDogLTEsXHJcbiAgICBkcCA9IEJpZy5EUDtcclxuXHJcbiAgaWYgKGRwICE9PSB+fmRwIHx8IGRwIDwgMCB8fCBkcCA+IE1BWF9EUCkge1xyXG4gICAgdGhyb3cgRXJyb3IoSU5WQUxJRF9EUCk7XHJcbiAgfVxyXG5cclxuICAvLyBEaXZpc29yIGlzIHplcm8/XHJcbiAgaWYgKCFiWzBdKSB7XHJcbiAgICB0aHJvdyBFcnJvcihESVZfQllfWkVSTyk7XHJcbiAgfVxyXG5cclxuICAvLyBEaXZpZGVuZCBpcyAwPyBSZXR1cm4gKy0wLlxyXG4gIGlmICghYVswXSkge1xyXG4gICAgeS5zID0gaztcclxuICAgIHkuYyA9IFt5LmUgPSAwXTtcclxuICAgIHJldHVybiB5O1xyXG4gIH1cclxuXHJcbiAgdmFyIGJsLCBidCwgbiwgY21wLCByaSxcclxuICAgIGJ6ID0gYi5zbGljZSgpLFxyXG4gICAgYWkgPSBibCA9IGIubGVuZ3RoLFxyXG4gICAgYWwgPSBhLmxlbmd0aCxcclxuICAgIHIgPSBhLnNsaWNlKDAsIGJsKSwgICAvLyByZW1haW5kZXJcclxuICAgIHJsID0gci5sZW5ndGgsXHJcbiAgICBxID0geSwgICAgICAgICAgICAgICAgLy8gcXVvdGllbnRcclxuICAgIHFjID0gcS5jID0gW10sXHJcbiAgICBxaSA9IDAsXHJcbiAgICBwID0gZHAgKyAocS5lID0geC5lIC0geS5lKSArIDE7ICAgIC8vIHByZWNpc2lvbiBvZiB0aGUgcmVzdWx0XHJcblxyXG4gIHEucyA9IGs7XHJcbiAgayA9IHAgPCAwID8gMCA6IHA7XHJcblxyXG4gIC8vIENyZWF0ZSB2ZXJzaW9uIG9mIGRpdmlzb3Igd2l0aCBsZWFkaW5nIHplcm8uXHJcbiAgYnoudW5zaGlmdCgwKTtcclxuXHJcbiAgLy8gQWRkIHplcm9zIHRvIG1ha2UgcmVtYWluZGVyIGFzIGxvbmcgYXMgZGl2aXNvci5cclxuICBmb3IgKDsgcmwrKyA8IGJsOykgci5wdXNoKDApO1xyXG5cclxuICBkbyB7XHJcblxyXG4gICAgLy8gbiBpcyBob3cgbWFueSB0aW1lcyB0aGUgZGl2aXNvciBnb2VzIGludG8gY3VycmVudCByZW1haW5kZXIuXHJcbiAgICBmb3IgKG4gPSAwOyBuIDwgMTA7IG4rKykge1xyXG5cclxuICAgICAgLy8gQ29tcGFyZSBkaXZpc29yIGFuZCByZW1haW5kZXIuXHJcbiAgICAgIGlmIChibCAhPSAocmwgPSByLmxlbmd0aCkpIHtcclxuICAgICAgICBjbXAgPSBibCA+IHJsID8gMSA6IC0xO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGZvciAocmkgPSAtMSwgY21wID0gMDsgKytyaSA8IGJsOykge1xyXG4gICAgICAgICAgaWYgKGJbcmldICE9IHJbcmldKSB7XHJcbiAgICAgICAgICAgIGNtcCA9IGJbcmldID4gcltyaV0gPyAxIDogLTE7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gSWYgZGl2aXNvciA8IHJlbWFpbmRlciwgc3VidHJhY3QgZGl2aXNvciBmcm9tIHJlbWFpbmRlci5cclxuICAgICAgaWYgKGNtcCA8IDApIHtcclxuXHJcbiAgICAgICAgLy8gUmVtYWluZGVyIGNhbid0IGJlIG1vcmUgdGhhbiAxIGRpZ2l0IGxvbmdlciB0aGFuIGRpdmlzb3IuXHJcbiAgICAgICAgLy8gRXF1YWxpc2UgbGVuZ3RocyB1c2luZyBkaXZpc29yIHdpdGggZXh0cmEgbGVhZGluZyB6ZXJvP1xyXG4gICAgICAgIGZvciAoYnQgPSBybCA9PSBibCA/IGIgOiBiejsgcmw7KSB7XHJcbiAgICAgICAgICBpZiAoclstLXJsXSA8IGJ0W3JsXSkge1xyXG4gICAgICAgICAgICByaSA9IHJsO1xyXG4gICAgICAgICAgICBmb3IgKDsgcmkgJiYgIXJbLS1yaV07KSByW3JpXSA9IDk7XHJcbiAgICAgICAgICAgIC0tcltyaV07XHJcbiAgICAgICAgICAgIHJbcmxdICs9IDEwO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcltybF0gLT0gYnRbcmxdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yICg7ICFyWzBdOykgci5zaGlmdCgpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQWRkIHRoZSBkaWdpdCBuIHRvIHRoZSByZXN1bHQgYXJyYXkuXHJcbiAgICBxY1txaSsrXSA9IGNtcCA/IG4gOiArK247XHJcblxyXG4gICAgLy8gVXBkYXRlIHRoZSByZW1haW5kZXIuXHJcbiAgICBpZiAoclswXSAmJiBjbXApIHJbcmxdID0gYVthaV0gfHwgMDtcclxuICAgIGVsc2UgciA9IFthW2FpXV07XHJcblxyXG4gIH0gd2hpbGUgKChhaSsrIDwgYWwgfHwgclswXSAhPT0gVU5ERUZJTkVEKSAmJiBrLS0pO1xyXG5cclxuICAvLyBMZWFkaW5nIHplcm8/IERvIG5vdCByZW1vdmUgaWYgcmVzdWx0IGlzIHNpbXBseSB6ZXJvIChxaSA9PSAxKS5cclxuICBpZiAoIXFjWzBdICYmIHFpICE9IDEpIHtcclxuXHJcbiAgICAvLyBUaGVyZSBjYW4ndCBiZSBtb3JlIHRoYW4gb25lIHplcm8uXHJcbiAgICBxYy5zaGlmdCgpO1xyXG4gICAgcS5lLS07XHJcbiAgICBwLS07XHJcbiAgfVxyXG5cclxuICAvLyBSb3VuZD9cclxuICBpZiAocWkgPiBwKSByb3VuZChxLCBwLCBCaWcuUk0sIHJbMF0gIT09IFVOREVGSU5FRCk7XHJcblxyXG4gIHJldHVybiBxO1xyXG59O1xyXG5cclxuXHJcbi8qXHJcbiAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZyBpcyBlcXVhbCB0byB0aGUgdmFsdWUgb2YgQmlnIHksIG90aGVyd2lzZSByZXR1cm4gZmFsc2UuXHJcbiAqL1xyXG5QLmVxID0gZnVuY3Rpb24gKHkpIHtcclxuICByZXR1cm4gdGhpcy5jbXAoeSkgPT09IDA7XHJcbn07XHJcblxyXG5cclxuLypcclxuICogUmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIG9mIHRoaXMgQmlnIGlzIGdyZWF0ZXIgdGhhbiB0aGUgdmFsdWUgb2YgQmlnIHksIG90aGVyd2lzZSByZXR1cm5cclxuICogZmFsc2UuXHJcbiAqL1xyXG5QLmd0ID0gZnVuY3Rpb24gKHkpIHtcclxuICByZXR1cm4gdGhpcy5jbXAoeSkgPiAwO1xyXG59O1xyXG5cclxuXHJcbi8qXHJcbiAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZyBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHZhbHVlIG9mIEJpZyB5LCBvdGhlcndpc2VcclxuICogcmV0dXJuIGZhbHNlLlxyXG4gKi9cclxuUC5ndGUgPSBmdW5jdGlvbiAoeSkge1xyXG4gIHJldHVybiB0aGlzLmNtcCh5KSA+IC0xO1xyXG59O1xyXG5cclxuXHJcbi8qXHJcbiAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZyBpcyBsZXNzIHRoYW4gdGhlIHZhbHVlIG9mIEJpZyB5LCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxyXG4gKi9cclxuUC5sdCA9IGZ1bmN0aW9uICh5KSB7XHJcbiAgcmV0dXJuIHRoaXMuY21wKHkpIDwgMDtcclxufTtcclxuXHJcblxyXG4vKlxyXG4gKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWcgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSB2YWx1ZSBvZiBCaWcgeSwgb3RoZXJ3aXNlXHJcbiAqIHJldHVybiBmYWxzZS5cclxuICovXHJcblAubHRlID0gZnVuY3Rpb24gKHkpIHtcclxuICByZXR1cm4gdGhpcy5jbXAoeSkgPCAxO1xyXG59O1xyXG5cclxuXHJcbi8qXHJcbiAqIFJldHVybiBhIG5ldyBCaWcgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgQmlnIG1pbnVzIHRoZSB2YWx1ZSBvZiBCaWcgeS5cclxuICovXHJcblAubWludXMgPSBQLnN1YiA9IGZ1bmN0aW9uICh5KSB7XHJcbiAgdmFyIGksIGosIHQsIHhsdHksXHJcbiAgICB4ID0gdGhpcyxcclxuICAgIEJpZyA9IHguY29uc3RydWN0b3IsXHJcbiAgICBhID0geC5zLFxyXG4gICAgYiA9ICh5ID0gbmV3IEJpZyh5KSkucztcclxuXHJcbiAgLy8gU2lnbnMgZGlmZmVyP1xyXG4gIGlmIChhICE9IGIpIHtcclxuICAgIHkucyA9IC1iO1xyXG4gICAgcmV0dXJuIHgucGx1cyh5KTtcclxuICB9XHJcblxyXG4gIHZhciB4YyA9IHguYy5zbGljZSgpLFxyXG4gICAgeGUgPSB4LmUsXHJcbiAgICB5YyA9IHkuYyxcclxuICAgIHllID0geS5lO1xyXG5cclxuICAvLyBFaXRoZXIgemVybz9cclxuICBpZiAoIXhjWzBdIHx8ICF5Y1swXSkge1xyXG4gICAgaWYgKHljWzBdKSB7XHJcbiAgICAgIHkucyA9IC1iO1xyXG4gICAgfSBlbHNlIGlmICh4Y1swXSkge1xyXG4gICAgICB5ID0gbmV3IEJpZyh4KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHkucyA9IDE7XHJcbiAgICB9XHJcbiAgICByZXR1cm4geTtcclxuICB9XHJcblxyXG4gIC8vIERldGVybWluZSB3aGljaCBpcyB0aGUgYmlnZ2VyIG51bWJlci4gUHJlcGVuZCB6ZXJvcyB0byBlcXVhbGlzZSBleHBvbmVudHMuXHJcbiAgaWYgKGEgPSB4ZSAtIHllKSB7XHJcblxyXG4gICAgaWYgKHhsdHkgPSBhIDwgMCkge1xyXG4gICAgICBhID0gLWE7XHJcbiAgICAgIHQgPSB4YztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHllID0geGU7XHJcbiAgICAgIHQgPSB5YztcclxuICAgIH1cclxuXHJcbiAgICB0LnJldmVyc2UoKTtcclxuICAgIGZvciAoYiA9IGE7IGItLTspIHQucHVzaCgwKTtcclxuICAgIHQucmV2ZXJzZSgpO1xyXG4gIH0gZWxzZSB7XHJcblxyXG4gICAgLy8gRXhwb25lbnRzIGVxdWFsLiBDaGVjayBkaWdpdCBieSBkaWdpdC5cclxuICAgIGogPSAoKHhsdHkgPSB4Yy5sZW5ndGggPCB5Yy5sZW5ndGgpID8geGMgOiB5YykubGVuZ3RoO1xyXG5cclxuICAgIGZvciAoYSA9IGIgPSAwOyBiIDwgajsgYisrKSB7XHJcbiAgICAgIGlmICh4Y1tiXSAhPSB5Y1tiXSkge1xyXG4gICAgICAgIHhsdHkgPSB4Y1tiXSA8IHljW2JdO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyB4IDwgeT8gUG9pbnQgeGMgdG8gdGhlIGFycmF5IG9mIHRoZSBiaWdnZXIgbnVtYmVyLlxyXG4gIGlmICh4bHR5KSB7XHJcbiAgICB0ID0geGM7XHJcbiAgICB4YyA9IHljO1xyXG4gICAgeWMgPSB0O1xyXG4gICAgeS5zID0gLXkucztcclxuICB9XHJcblxyXG4gIC8qXHJcbiAgICogQXBwZW5kIHplcm9zIHRvIHhjIGlmIHNob3J0ZXIuIE5vIG5lZWQgdG8gYWRkIHplcm9zIHRvIHljIGlmIHNob3J0ZXIgYXMgc3VidHJhY3Rpb24gb25seVxyXG4gICAqIG5lZWRzIHRvIHN0YXJ0IGF0IHljLmxlbmd0aC5cclxuICAgKi9cclxuICBpZiAoKGIgPSAoaiA9IHljLmxlbmd0aCkgLSAoaSA9IHhjLmxlbmd0aCkpID4gMCkgZm9yICg7IGItLTspIHhjW2krK10gPSAwO1xyXG5cclxuICAvLyBTdWJ0cmFjdCB5YyBmcm9tIHhjLlxyXG4gIGZvciAoYiA9IGk7IGogPiBhOykge1xyXG4gICAgaWYgKHhjWy0tal0gPCB5Y1tqXSkge1xyXG4gICAgICBmb3IgKGkgPSBqOyBpICYmICF4Y1stLWldOykgeGNbaV0gPSA5O1xyXG4gICAgICAtLXhjW2ldO1xyXG4gICAgICB4Y1tqXSArPSAxMDtcclxuICAgIH1cclxuXHJcbiAgICB4Y1tqXSAtPSB5Y1tqXTtcclxuICB9XHJcblxyXG4gIC8vIFJlbW92ZSB0cmFpbGluZyB6ZXJvcy5cclxuICBmb3IgKDsgeGNbLS1iXSA9PT0gMDspIHhjLnBvcCgpO1xyXG5cclxuICAvLyBSZW1vdmUgbGVhZGluZyB6ZXJvcyBhbmQgYWRqdXN0IGV4cG9uZW50IGFjY29yZGluZ2x5LlxyXG4gIGZvciAoOyB4Y1swXSA9PT0gMDspIHtcclxuICAgIHhjLnNoaWZ0KCk7XHJcbiAgICAtLXllO1xyXG4gIH1cclxuXHJcbiAgaWYgKCF4Y1swXSkge1xyXG5cclxuICAgIC8vIG4gLSBuID0gKzBcclxuICAgIHkucyA9IDE7XHJcblxyXG4gICAgLy8gUmVzdWx0IG11c3QgYmUgemVyby5cclxuICAgIHhjID0gW3llID0gMF07XHJcbiAgfVxyXG5cclxuICB5LmMgPSB4YztcclxuICB5LmUgPSB5ZTtcclxuXHJcbiAgcmV0dXJuIHk7XHJcbn07XHJcblxyXG5cclxuLypcclxuICogUmV0dXJuIGEgbmV3IEJpZyB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpcyBCaWcgbW9kdWxvIHRoZSB2YWx1ZSBvZiBCaWcgeS5cclxuICovXHJcblAubW9kID0gZnVuY3Rpb24gKHkpIHtcclxuICB2YXIgeWd0eCxcclxuICAgIHggPSB0aGlzLFxyXG4gICAgQmlnID0geC5jb25zdHJ1Y3RvcixcclxuICAgIGEgPSB4LnMsXHJcbiAgICBiID0gKHkgPSBuZXcgQmlnKHkpKS5zO1xyXG5cclxuICBpZiAoIXkuY1swXSkge1xyXG4gICAgdGhyb3cgRXJyb3IoRElWX0JZX1pFUk8pO1xyXG4gIH1cclxuXHJcbiAgeC5zID0geS5zID0gMTtcclxuICB5Z3R4ID0geS5jbXAoeCkgPT0gMTtcclxuICB4LnMgPSBhO1xyXG4gIHkucyA9IGI7XHJcblxyXG4gIGlmICh5Z3R4KSByZXR1cm4gbmV3IEJpZyh4KTtcclxuXHJcbiAgYSA9IEJpZy5EUDtcclxuICBiID0gQmlnLlJNO1xyXG4gIEJpZy5EUCA9IEJpZy5STSA9IDA7XHJcbiAgeCA9IHguZGl2KHkpO1xyXG4gIEJpZy5EUCA9IGE7XHJcbiAgQmlnLlJNID0gYjtcclxuXHJcbiAgcmV0dXJuIHRoaXMubWludXMoeC50aW1lcyh5KSk7XHJcbn07XHJcblxyXG5cclxuLypcclxuICogUmV0dXJuIGEgbmV3IEJpZyB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpcyBCaWcgbmVnYXRlZC5cclxuICovXHJcblAubmVnID0gZnVuY3Rpb24gKCkge1xyXG4gIHZhciB4ID0gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcyk7XHJcbiAgeC5zID0gLXgucztcclxuICByZXR1cm4geDtcclxufTtcclxuXHJcblxyXG4vKlxyXG4gKiBSZXR1cm4gYSBuZXcgQmlnIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZyBwbHVzIHRoZSB2YWx1ZSBvZiBCaWcgeS5cclxuICovXHJcblAucGx1cyA9IFAuYWRkID0gZnVuY3Rpb24gKHkpIHtcclxuICB2YXIgZSwgaywgdCxcclxuICAgIHggPSB0aGlzLFxyXG4gICAgQmlnID0geC5jb25zdHJ1Y3RvcjtcclxuXHJcbiAgeSA9IG5ldyBCaWcoeSk7XHJcblxyXG4gIC8vIFNpZ25zIGRpZmZlcj9cclxuICBpZiAoeC5zICE9IHkucykge1xyXG4gICAgeS5zID0gLXkucztcclxuICAgIHJldHVybiB4Lm1pbnVzKHkpO1xyXG4gIH1cclxuXHJcbiAgdmFyIHhlID0geC5lLFxyXG4gICAgeGMgPSB4LmMsXHJcbiAgICB5ZSA9IHkuZSxcclxuICAgIHljID0geS5jO1xyXG5cclxuICAvLyBFaXRoZXIgemVybz9cclxuICBpZiAoIXhjWzBdIHx8ICF5Y1swXSkge1xyXG4gICAgaWYgKCF5Y1swXSkge1xyXG4gICAgICBpZiAoeGNbMF0pIHtcclxuICAgICAgICB5ID0gbmV3IEJpZyh4KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB5LnMgPSB4LnM7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB5O1xyXG4gIH1cclxuXHJcbiAgeGMgPSB4Yy5zbGljZSgpO1xyXG5cclxuICAvLyBQcmVwZW5kIHplcm9zIHRvIGVxdWFsaXNlIGV4cG9uZW50cy5cclxuICAvLyBOb3RlOiByZXZlcnNlIGZhc3RlciB0aGFuIHVuc2hpZnRzLlxyXG4gIGlmIChlID0geGUgLSB5ZSkge1xyXG4gICAgaWYgKGUgPiAwKSB7XHJcbiAgICAgIHllID0geGU7XHJcbiAgICAgIHQgPSB5YztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGUgPSAtZTtcclxuICAgICAgdCA9IHhjO1xyXG4gICAgfVxyXG5cclxuICAgIHQucmV2ZXJzZSgpO1xyXG4gICAgZm9yICg7IGUtLTspIHQucHVzaCgwKTtcclxuICAgIHQucmV2ZXJzZSgpO1xyXG4gIH1cclxuXHJcbiAgLy8gUG9pbnQgeGMgdG8gdGhlIGxvbmdlciBhcnJheS5cclxuICBpZiAoeGMubGVuZ3RoIC0geWMubGVuZ3RoIDwgMCkge1xyXG4gICAgdCA9IHljO1xyXG4gICAgeWMgPSB4YztcclxuICAgIHhjID0gdDtcclxuICB9XHJcblxyXG4gIGUgPSB5Yy5sZW5ndGg7XHJcblxyXG4gIC8vIE9ubHkgc3RhcnQgYWRkaW5nIGF0IHljLmxlbmd0aCAtIDEgYXMgdGhlIGZ1cnRoZXIgZGlnaXRzIG9mIHhjIGNhbiBiZSBsZWZ0IGFzIHRoZXkgYXJlLlxyXG4gIGZvciAoayA9IDA7IGU7IHhjW2VdICU9IDEwKSBrID0gKHhjWy0tZV0gPSB4Y1tlXSArIHljW2VdICsgaykgLyAxMCB8IDA7XHJcblxyXG4gIC8vIE5vIG5lZWQgdG8gY2hlY2sgZm9yIHplcm8sIGFzICt4ICsgK3kgIT0gMCAmJiAteCArIC15ICE9IDBcclxuXHJcbiAgaWYgKGspIHtcclxuICAgIHhjLnVuc2hpZnQoayk7XHJcbiAgICArK3llO1xyXG4gIH1cclxuXHJcbiAgLy8gUmVtb3ZlIHRyYWlsaW5nIHplcm9zLlxyXG4gIGZvciAoZSA9IHhjLmxlbmd0aDsgeGNbLS1lXSA9PT0gMDspIHhjLnBvcCgpO1xyXG5cclxuICB5LmMgPSB4YztcclxuICB5LmUgPSB5ZTtcclxuXHJcbiAgcmV0dXJuIHk7XHJcbn07XHJcblxyXG5cclxuLypcclxuICogUmV0dXJuIGEgQmlnIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZyByYWlzZWQgdG8gdGhlIHBvd2VyIG4uXHJcbiAqIElmIG4gaXMgbmVnYXRpdmUsIHJvdW5kIHRvIGEgbWF4aW11bSBvZiBCaWcuRFAgZGVjaW1hbCBwbGFjZXMgdXNpbmcgcm91bmRpbmdcclxuICogbW9kZSBCaWcuUk0uXHJcbiAqXHJcbiAqIG4ge251bWJlcn0gSW50ZWdlciwgLU1BWF9QT1dFUiB0byBNQVhfUE9XRVIgaW5jbHVzaXZlLlxyXG4gKi9cclxuUC5wb3cgPSBmdW5jdGlvbiAobikge1xyXG4gIHZhciB4ID0gdGhpcyxcclxuICAgIG9uZSA9IG5ldyB4LmNvbnN0cnVjdG9yKCcxJyksXHJcbiAgICB5ID0gb25lLFxyXG4gICAgaXNuZWcgPSBuIDwgMDtcclxuXHJcbiAgaWYgKG4gIT09IH5+biB8fCBuIDwgLU1BWF9QT1dFUiB8fCBuID4gTUFYX1BPV0VSKSB7XHJcbiAgICB0aHJvdyBFcnJvcihJTlZBTElEICsgJ2V4cG9uZW50Jyk7XHJcbiAgfVxyXG5cclxuICBpZiAoaXNuZWcpIG4gPSAtbjtcclxuXHJcbiAgZm9yICg7Oykge1xyXG4gICAgaWYgKG4gJiAxKSB5ID0geS50aW1lcyh4KTtcclxuICAgIG4gPj49IDE7XHJcbiAgICBpZiAoIW4pIGJyZWFrO1xyXG4gICAgeCA9IHgudGltZXMoeCk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gaXNuZWcgPyBvbmUuZGl2KHkpIDogeTtcclxufTtcclxuXHJcblxyXG4vKlxyXG4gKiBSZXR1cm4gYSBuZXcgQmlnIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZyByb3VuZGVkIHRvIGEgbWF4aW11bSBwcmVjaXNpb24gb2Ygc2RcclxuICogc2lnbmlmaWNhbnQgZGlnaXRzIHVzaW5nIHJvdW5kaW5nIG1vZGUgcm0sIG9yIEJpZy5STSBpZiBybSBpcyBub3Qgc3BlY2lmaWVkLlxyXG4gKlxyXG4gKiBzZCB7bnVtYmVyfSBTaWduaWZpY2FudCBkaWdpdHM6IGludGVnZXIsIDEgdG8gTUFYX0RQIGluY2x1c2l2ZS5cclxuICogcm0/IHtudW1iZXJ9IFJvdW5kaW5nIG1vZGU6IDAgKGRvd24pLCAxIChoYWxmLXVwKSwgMiAoaGFsZi1ldmVuKSBvciAzICh1cCkuXHJcbiAqL1xyXG5QLnByZWMgPSBmdW5jdGlvbiAoc2QsIHJtKSB7XHJcbiAgaWYgKHNkICE9PSB+fnNkIHx8IHNkIDwgMSB8fCBzZCA+IE1BWF9EUCkge1xyXG4gICAgdGhyb3cgRXJyb3IoSU5WQUxJRCArICdwcmVjaXNpb24nKTtcclxuICB9XHJcbiAgcmV0dXJuIHJvdW5kKG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMpLCBzZCwgcm0pO1xyXG59O1xyXG5cclxuXHJcbi8qXHJcbiAqIFJldHVybiBhIG5ldyBCaWcgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgQmlnIHJvdW5kZWQgdG8gYSBtYXhpbXVtIG9mIGRwIGRlY2ltYWwgcGxhY2VzXHJcbiAqIHVzaW5nIHJvdW5kaW5nIG1vZGUgcm0sIG9yIEJpZy5STSBpZiBybSBpcyBub3Qgc3BlY2lmaWVkLlxyXG4gKiBJZiBkcCBpcyBuZWdhdGl2ZSwgcm91bmQgdG8gYW4gaW50ZWdlciB3aGljaCBpcyBhIG11bHRpcGxlIG9mIDEwKiotZHAuXHJcbiAqIElmIGRwIGlzIG5vdCBzcGVjaWZpZWQsIHJvdW5kIHRvIDAgZGVjaW1hbCBwbGFjZXMuXHJcbiAqXHJcbiAqIGRwPyB7bnVtYmVyfSBJbnRlZ2VyLCAtTUFYX0RQIHRvIE1BWF9EUCBpbmNsdXNpdmUuXHJcbiAqIHJtPyB7bnVtYmVyfSBSb3VuZGluZyBtb2RlOiAwIChkb3duKSwgMSAoaGFsZi11cCksIDIgKGhhbGYtZXZlbikgb3IgMyAodXApLlxyXG4gKi9cclxuUC5yb3VuZCA9IGZ1bmN0aW9uIChkcCwgcm0pIHtcclxuICBpZiAoZHAgPT09IFVOREVGSU5FRCkgZHAgPSAwO1xyXG4gIGVsc2UgaWYgKGRwICE9PSB+fmRwIHx8IGRwIDwgLU1BWF9EUCB8fCBkcCA+IE1BWF9EUCkge1xyXG4gICAgdGhyb3cgRXJyb3IoSU5WQUxJRF9EUCk7XHJcbiAgfVxyXG4gIHJldHVybiByb3VuZChuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzKSwgZHAgKyB0aGlzLmUgKyAxLCBybSk7XHJcbn07XHJcblxyXG5cclxuLypcclxuICogUmV0dXJuIGEgbmV3IEJpZyB3aG9zZSB2YWx1ZSBpcyB0aGUgc3F1YXJlIHJvb3Qgb2YgdGhlIHZhbHVlIG9mIHRoaXMgQmlnLCByb3VuZGVkLCBpZlxyXG4gKiBuZWNlc3NhcnksIHRvIGEgbWF4aW11bSBvZiBCaWcuRFAgZGVjaW1hbCBwbGFjZXMgdXNpbmcgcm91bmRpbmcgbW9kZSBCaWcuUk0uXHJcbiAqL1xyXG5QLnNxcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIHIsIGMsIHQsXHJcbiAgICB4ID0gdGhpcyxcclxuICAgIEJpZyA9IHguY29uc3RydWN0b3IsXHJcbiAgICBzID0geC5zLFxyXG4gICAgZSA9IHguZSxcclxuICAgIGhhbGYgPSBuZXcgQmlnKCcwLjUnKTtcclxuXHJcbiAgLy8gWmVybz9cclxuICBpZiAoIXguY1swXSkgcmV0dXJuIG5ldyBCaWcoeCk7XHJcblxyXG4gIC8vIE5lZ2F0aXZlP1xyXG4gIGlmIChzIDwgMCkge1xyXG4gICAgdGhyb3cgRXJyb3IoTkFNRSArICdObyBzcXVhcmUgcm9vdCcpO1xyXG4gIH1cclxuXHJcbiAgLy8gRXN0aW1hdGUuXHJcbiAgcyA9IE1hdGguc3FydCh4ICsgJycpO1xyXG5cclxuICAvLyBNYXRoLnNxcnQgdW5kZXJmbG93L292ZXJmbG93P1xyXG4gIC8vIFJlLWVzdGltYXRlOiBwYXNzIHggY29lZmZpY2llbnQgdG8gTWF0aC5zcXJ0IGFzIGludGVnZXIsIHRoZW4gYWRqdXN0IHRoZSByZXN1bHQgZXhwb25lbnQuXHJcbiAgaWYgKHMgPT09IDAgfHwgcyA9PT0gMSAvIDApIHtcclxuICAgIGMgPSB4LmMuam9pbignJyk7XHJcbiAgICBpZiAoIShjLmxlbmd0aCArIGUgJiAxKSkgYyArPSAnMCc7XHJcbiAgICBzID0gTWF0aC5zcXJ0KGMpO1xyXG4gICAgZSA9ICgoZSArIDEpIC8gMiB8IDApIC0gKGUgPCAwIHx8IGUgJiAxKTtcclxuICAgIHIgPSBuZXcgQmlnKChzID09IDEgLyAwID8gJzVlJyA6IChzID0gcy50b0V4cG9uZW50aWFsKCkpLnNsaWNlKDAsIHMuaW5kZXhPZignZScpICsgMSkpICsgZSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHIgPSBuZXcgQmlnKHMgKyAnJyk7XHJcbiAgfVxyXG5cclxuICBlID0gci5lICsgKEJpZy5EUCArPSA0KTtcclxuXHJcbiAgLy8gTmV3dG9uLVJhcGhzb24gaXRlcmF0aW9uLlxyXG4gIGRvIHtcclxuICAgIHQgPSByO1xyXG4gICAgciA9IGhhbGYudGltZXModC5wbHVzKHguZGl2KHQpKSk7XHJcbiAgfSB3aGlsZSAodC5jLnNsaWNlKDAsIGUpLmpvaW4oJycpICE9PSByLmMuc2xpY2UoMCwgZSkuam9pbignJykpO1xyXG5cclxuICByZXR1cm4gcm91bmQociwgKEJpZy5EUCAtPSA0KSArIHIuZSArIDEsIEJpZy5STSk7XHJcbn07XHJcblxyXG5cclxuLypcclxuICogUmV0dXJuIGEgbmV3IEJpZyB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpcyBCaWcgdGltZXMgdGhlIHZhbHVlIG9mIEJpZyB5LlxyXG4gKi9cclxuUC50aW1lcyA9IFAubXVsID0gZnVuY3Rpb24gKHkpIHtcclxuICB2YXIgYyxcclxuICAgIHggPSB0aGlzLFxyXG4gICAgQmlnID0geC5jb25zdHJ1Y3RvcixcclxuICAgIHhjID0geC5jLFxyXG4gICAgeWMgPSAoeSA9IG5ldyBCaWcoeSkpLmMsXHJcbiAgICBhID0geGMubGVuZ3RoLFxyXG4gICAgYiA9IHljLmxlbmd0aCxcclxuICAgIGkgPSB4LmUsXHJcbiAgICBqID0geS5lO1xyXG5cclxuICAvLyBEZXRlcm1pbmUgc2lnbiBvZiByZXN1bHQuXHJcbiAgeS5zID0geC5zID09IHkucyA/IDEgOiAtMTtcclxuXHJcbiAgLy8gUmV0dXJuIHNpZ25lZCAwIGlmIGVpdGhlciAwLlxyXG4gIGlmICgheGNbMF0gfHwgIXljWzBdKSB7XHJcbiAgICB5LmMgPSBbeS5lID0gMF07XHJcbiAgICByZXR1cm4geTtcclxuICB9XHJcblxyXG4gIC8vIEluaXRpYWxpc2UgZXhwb25lbnQgb2YgcmVzdWx0IGFzIHguZSArIHkuZS5cclxuICB5LmUgPSBpICsgajtcclxuXHJcbiAgLy8gSWYgYXJyYXkgeGMgaGFzIGZld2VyIGRpZ2l0cyB0aGFuIHljLCBzd2FwIHhjIGFuZCB5YywgYW5kIGxlbmd0aHMuXHJcbiAgaWYgKGEgPCBiKSB7XHJcbiAgICBjID0geGM7XHJcbiAgICB4YyA9IHljO1xyXG4gICAgeWMgPSBjO1xyXG4gICAgaiA9IGE7XHJcbiAgICBhID0gYjtcclxuICAgIGIgPSBqO1xyXG4gIH1cclxuXHJcbiAgLy8gSW5pdGlhbGlzZSBjb2VmZmljaWVudCBhcnJheSBvZiByZXN1bHQgd2l0aCB6ZXJvcy5cclxuICBmb3IgKGMgPSBuZXcgQXJyYXkoaiA9IGEgKyBiKTsgai0tOykgY1tqXSA9IDA7XHJcblxyXG4gIC8vIE11bHRpcGx5LlxyXG5cclxuICAvLyBpIGlzIGluaXRpYWxseSB4Yy5sZW5ndGguXHJcbiAgZm9yIChpID0gYjsgaS0tOykge1xyXG4gICAgYiA9IDA7XHJcblxyXG4gICAgLy8gYSBpcyB5Yy5sZW5ndGguXHJcbiAgICBmb3IgKGogPSBhICsgaTsgaiA+IGk7KSB7XHJcblxyXG4gICAgICAvLyBDdXJyZW50IHN1bSBvZiBwcm9kdWN0cyBhdCB0aGlzIGRpZ2l0IHBvc2l0aW9uLCBwbHVzIGNhcnJ5LlxyXG4gICAgICBiID0gY1tqXSArIHljW2ldICogeGNbaiAtIGkgLSAxXSArIGI7XHJcbiAgICAgIGNbai0tXSA9IGIgJSAxMDtcclxuXHJcbiAgICAgIC8vIGNhcnJ5XHJcbiAgICAgIGIgPSBiIC8gMTAgfCAwO1xyXG4gICAgfVxyXG5cclxuICAgIGNbal0gPSBiO1xyXG4gIH1cclxuXHJcbiAgLy8gSW5jcmVtZW50IHJlc3VsdCBleHBvbmVudCBpZiB0aGVyZSBpcyBhIGZpbmFsIGNhcnJ5LCBvdGhlcndpc2UgcmVtb3ZlIGxlYWRpbmcgemVyby5cclxuICBpZiAoYikgKyt5LmU7XHJcbiAgZWxzZSBjLnNoaWZ0KCk7XHJcblxyXG4gIC8vIFJlbW92ZSB0cmFpbGluZyB6ZXJvcy5cclxuICBmb3IgKGkgPSBjLmxlbmd0aDsgIWNbLS1pXTspIGMucG9wKCk7XHJcbiAgeS5jID0gYztcclxuXHJcbiAgcmV0dXJuIHk7XHJcbn07XHJcblxyXG5cclxuLypcclxuICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgdmFsdWUgb2YgdGhpcyBCaWcgaW4gZXhwb25lbnRpYWwgbm90YXRpb24gcm91bmRlZCB0byBkcCBmaXhlZFxyXG4gKiBkZWNpbWFsIHBsYWNlcyB1c2luZyByb3VuZGluZyBtb2RlIHJtLCBvciBCaWcuUk0gaWYgcm0gaXMgbm90IHNwZWNpZmllZC5cclxuICpcclxuICogZHA/IHtudW1iZXJ9IERlY2ltYWwgcGxhY2VzOiBpbnRlZ2VyLCAwIHRvIE1BWF9EUCBpbmNsdXNpdmUuXHJcbiAqIHJtPyB7bnVtYmVyfSBSb3VuZGluZyBtb2RlOiAwIChkb3duKSwgMSAoaGFsZi11cCksIDIgKGhhbGYtZXZlbikgb3IgMyAodXApLlxyXG4gKi9cclxuUC50b0V4cG9uZW50aWFsID0gZnVuY3Rpb24gKGRwLCBybSkge1xyXG4gIHZhciB4ID0gdGhpcyxcclxuICAgIG4gPSB4LmNbMF07XHJcblxyXG4gIGlmIChkcCAhPT0gVU5ERUZJTkVEKSB7XHJcbiAgICBpZiAoZHAgIT09IH5+ZHAgfHwgZHAgPCAwIHx8IGRwID4gTUFYX0RQKSB7XHJcbiAgICAgIHRocm93IEVycm9yKElOVkFMSURfRFApO1xyXG4gICAgfVxyXG4gICAgeCA9IHJvdW5kKG5ldyB4LmNvbnN0cnVjdG9yKHgpLCArK2RwLCBybSk7XHJcbiAgICBmb3IgKDsgeC5jLmxlbmd0aCA8IGRwOykgeC5jLnB1c2goMCk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gc3RyaW5naWZ5KHgsIHRydWUsICEhbik7XHJcbn07XHJcblxyXG5cclxuLypcclxuICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgdmFsdWUgb2YgdGhpcyBCaWcgaW4gbm9ybWFsIG5vdGF0aW9uIHJvdW5kZWQgdG8gZHAgZml4ZWRcclxuICogZGVjaW1hbCBwbGFjZXMgdXNpbmcgcm91bmRpbmcgbW9kZSBybSwgb3IgQmlnLlJNIGlmIHJtIGlzIG5vdCBzcGVjaWZpZWQuXHJcbiAqXHJcbiAqIGRwPyB7bnVtYmVyfSBEZWNpbWFsIHBsYWNlczogaW50ZWdlciwgMCB0byBNQVhfRFAgaW5jbHVzaXZlLlxyXG4gKiBybT8ge251bWJlcn0gUm91bmRpbmcgbW9kZTogMCAoZG93biksIDEgKGhhbGYtdXApLCAyIChoYWxmLWV2ZW4pIG9yIDMgKHVwKS5cclxuICpcclxuICogKC0wKS50b0ZpeGVkKDApIGlzICcwJywgYnV0ICgtMC4xKS50b0ZpeGVkKDApIGlzICctMCcuXHJcbiAqICgtMCkudG9GaXhlZCgxKSBpcyAnMC4wJywgYnV0ICgtMC4wMSkudG9GaXhlZCgxKSBpcyAnLTAuMCcuXHJcbiAqL1xyXG5QLnRvRml4ZWQgPSBmdW5jdGlvbiAoZHAsIHJtKSB7XHJcbiAgdmFyIHggPSB0aGlzLFxyXG4gICAgbiA9IHguY1swXTtcclxuXHJcbiAgaWYgKGRwICE9PSBVTkRFRklORUQpIHtcclxuICAgIGlmIChkcCAhPT0gfn5kcCB8fCBkcCA8IDAgfHwgZHAgPiBNQVhfRFApIHtcclxuICAgICAgdGhyb3cgRXJyb3IoSU5WQUxJRF9EUCk7XHJcbiAgICB9XHJcbiAgICB4ID0gcm91bmQobmV3IHguY29uc3RydWN0b3IoeCksIGRwICsgeC5lICsgMSwgcm0pO1xyXG5cclxuICAgIC8vIHguZSBtYXkgaGF2ZSBjaGFuZ2VkIGlmIHRoZSB2YWx1ZSBpcyByb3VuZGVkIHVwLlxyXG4gICAgZm9yIChkcCA9IGRwICsgeC5lICsgMTsgeC5jLmxlbmd0aCA8IGRwOykgeC5jLnB1c2goMCk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gc3RyaW5naWZ5KHgsIGZhbHNlLCAhIW4pO1xyXG59O1xyXG5cclxuXHJcbi8qXHJcbiAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHZhbHVlIG9mIHRoaXMgQmlnLlxyXG4gKiBSZXR1cm4gZXhwb25lbnRpYWwgbm90YXRpb24gaWYgdGhpcyBCaWcgaGFzIGEgcG9zaXRpdmUgZXhwb25lbnQgZXF1YWwgdG8gb3IgZ3JlYXRlciB0aGFuXHJcbiAqIEJpZy5QRSwgb3IgYSBuZWdhdGl2ZSBleHBvbmVudCBlcXVhbCB0byBvciBsZXNzIHRoYW4gQmlnLk5FLlxyXG4gKiBPbWl0IHRoZSBzaWduIGZvciBuZWdhdGl2ZSB6ZXJvLlxyXG4gKi9cclxuUFtTeW1ib2wuZm9yKCdub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbScpXSA9IFAudG9KU09OID0gUC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICB2YXIgeCA9IHRoaXMsXHJcbiAgICBCaWcgPSB4LmNvbnN0cnVjdG9yO1xyXG4gIHJldHVybiBzdHJpbmdpZnkoeCwgeC5lIDw9IEJpZy5ORSB8fCB4LmUgPj0gQmlnLlBFLCAhIXguY1swXSk7XHJcbn07XHJcblxyXG5cclxuLypcclxuICogUmV0dXJuIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZyBhcyBhIHByaW1pdHZlIG51bWJlci5cclxuICovXHJcblAudG9OdW1iZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIG4gPSBOdW1iZXIoc3RyaW5naWZ5KHRoaXMsIHRydWUsIHRydWUpKTtcclxuICBpZiAodGhpcy5jb25zdHJ1Y3Rvci5zdHJpY3QgPT09IHRydWUgJiYgIXRoaXMuZXEobi50b1N0cmluZygpKSkge1xyXG4gICAgdGhyb3cgRXJyb3IoTkFNRSArICdJbXByZWNpc2UgY29udmVyc2lvbicpO1xyXG4gIH1cclxuICByZXR1cm4gbjtcclxufTtcclxuXHJcblxyXG4vKlxyXG4gKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZyByb3VuZGVkIHRvIHNkIHNpZ25pZmljYW50IGRpZ2l0cyB1c2luZ1xyXG4gKiByb3VuZGluZyBtb2RlIHJtLCBvciBCaWcuUk0gaWYgcm0gaXMgbm90IHNwZWNpZmllZC5cclxuICogVXNlIGV4cG9uZW50aWFsIG5vdGF0aW9uIGlmIHNkIGlzIGxlc3MgdGhhbiB0aGUgbnVtYmVyIG9mIGRpZ2l0cyBuZWNlc3NhcnkgdG8gcmVwcmVzZW50XHJcbiAqIHRoZSBpbnRlZ2VyIHBhcnQgb2YgdGhlIHZhbHVlIGluIG5vcm1hbCBub3RhdGlvbi5cclxuICpcclxuICogc2Qge251bWJlcn0gU2lnbmlmaWNhbnQgZGlnaXRzOiBpbnRlZ2VyLCAxIHRvIE1BWF9EUCBpbmNsdXNpdmUuXHJcbiAqIHJtPyB7bnVtYmVyfSBSb3VuZGluZyBtb2RlOiAwIChkb3duKSwgMSAoaGFsZi11cCksIDIgKGhhbGYtZXZlbikgb3IgMyAodXApLlxyXG4gKi9cclxuUC50b1ByZWNpc2lvbiA9IGZ1bmN0aW9uIChzZCwgcm0pIHtcclxuICB2YXIgeCA9IHRoaXMsXHJcbiAgICBCaWcgPSB4LmNvbnN0cnVjdG9yLFxyXG4gICAgbiA9IHguY1swXTtcclxuXHJcbiAgaWYgKHNkICE9PSBVTkRFRklORUQpIHtcclxuICAgIGlmIChzZCAhPT0gfn5zZCB8fCBzZCA8IDEgfHwgc2QgPiBNQVhfRFApIHtcclxuICAgICAgdGhyb3cgRXJyb3IoSU5WQUxJRCArICdwcmVjaXNpb24nKTtcclxuICAgIH1cclxuICAgIHggPSByb3VuZChuZXcgQmlnKHgpLCBzZCwgcm0pO1xyXG4gICAgZm9yICg7IHguYy5sZW5ndGggPCBzZDspIHguYy5wdXNoKDApO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHN0cmluZ2lmeSh4LCBzZCA8PSB4LmUgfHwgeC5lIDw9IEJpZy5ORSB8fCB4LmUgPj0gQmlnLlBFLCAhIW4pO1xyXG59O1xyXG5cclxuXHJcbi8qXHJcbiAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHZhbHVlIG9mIHRoaXMgQmlnLlxyXG4gKiBSZXR1cm4gZXhwb25lbnRpYWwgbm90YXRpb24gaWYgdGhpcyBCaWcgaGFzIGEgcG9zaXRpdmUgZXhwb25lbnQgZXF1YWwgdG8gb3IgZ3JlYXRlciB0aGFuXHJcbiAqIEJpZy5QRSwgb3IgYSBuZWdhdGl2ZSBleHBvbmVudCBlcXVhbCB0byBvciBsZXNzIHRoYW4gQmlnLk5FLlxyXG4gKiBJbmNsdWRlIHRoZSBzaWduIGZvciBuZWdhdGl2ZSB6ZXJvLlxyXG4gKi9cclxuUC52YWx1ZU9mID0gZnVuY3Rpb24gKCkge1xyXG4gIHZhciB4ID0gdGhpcyxcclxuICAgIEJpZyA9IHguY29uc3RydWN0b3I7XHJcbiAgaWYgKEJpZy5zdHJpY3QgPT09IHRydWUpIHtcclxuICAgIHRocm93IEVycm9yKE5BTUUgKyAndmFsdWVPZiBkaXNhbGxvd2VkJyk7XHJcbiAgfVxyXG4gIHJldHVybiBzdHJpbmdpZnkoeCwgeC5lIDw9IEJpZy5ORSB8fCB4LmUgPj0gQmlnLlBFLCB0cnVlKTtcclxufTtcclxuXHJcblxyXG4vLyBFeHBvcnRcclxuXHJcblxyXG5leHBvcnQgdmFyIEJpZyA9IF9CaWdfKCk7XHJcblxyXG4vLy8gPHJlZmVyZW5jZSB0eXBlcz1cImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9EZWZpbml0ZWx5VHlwZWQvRGVmaW5pdGVseVR5cGVkL21hc3Rlci90eXBlcy9iaWcuanMvaW5kZXguZC50c1wiIC8+XHJcbmV4cG9ydCBkZWZhdWx0IEJpZztcclxuIiwiZXhwb3J0IGNsYXNzIFN0YWNrPFR5cGU+IHtcbiAgcHJpdmF0ZSBfaW5uZXI6IFR5cGVbXSA9IFtdO1xuXG4gIHB1c2goaXRlbTogVHlwZSk6IHZvaWQge1xuICAgIHRoaXMuX2lubmVyLnB1c2goaXRlbSk7XG4gIH1cblxuICBwb3AoKTogVHlwZSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX2lubmVyLnBvcCgpO1xuICB9XG5cbiAgdG9wKCk6IFR5cGUgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLl9pbm5lci5hdCgtMSk7XG4gIH1cblxuICBpc0VtcHR5KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9pbm5lci5sZW5ndGggPT0gMDtcbiAgfVxuXG4gIHByaW50KCk6IHZvaWQge1xuICAgIGNvbnNvbGUubG9nKHRoaXMuX2lubmVyKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUXVldWU8VHlwZT4ge1xuICBwcml2YXRlIF9pbm5lcjogeyBba2V5OiBudW1iZXJdOiBUeXBlIH0gPSB7fTtcbiAgcHJpdmF0ZSBfaGVhZDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBfdGFpbDogbnVtYmVyID0gMDtcblxuICBlbnF1ZXVlKGl0ZW06IFR5cGUpOiB2b2lkIHtcbiAgICB0aGlzLl9pbm5lclt0aGlzLl90YWlsXSA9IGl0ZW07XG4gICAgdGhpcy5fdGFpbCsrO1xuICB9XG5cbiAgZGVxdWV1ZSgpOiBUeXBlIHwgdW5kZWZpbmVkIHtcbiAgICBpZiAodGhpcy5fdGFpbCA9PT0gdGhpcy5faGVhZCkgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLl9pbm5lclt0aGlzLl9oZWFkXTtcbiAgICBkZWxldGUgdGhpcy5faW5uZXJbdGhpcy5faGVhZF07XG4gICAgdGhpcy5faGVhZCsrO1xuXG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICBwZWVrKCk6IFR5cGUge1xuICAgIHJldHVybiB0aGlzLl9pbm5lclt0aGlzLl9oZWFkXTtcbiAgfVxuXG4gIGlzRW1wdHkoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2hlYWQgPT0gdGhpcy5fdGFpbDtcbiAgfVxuXG4gIHByaW50KCk6IHZvaWQge1xuICAgIGNvbnNvbGUubG9nKHRoaXMuX2lubmVyKTtcbiAgfVxufVxuXG5leHBvcnQgZW51bSBFeHBlY3RhdGlvbiB7XG4gIFZBUklBQkxFLFxuICBPUEVSQVRPUixcbiAgVU5ERUZJTkVELFxufVxuIiwiZXhwb3J0IGNsYXNzIFJlY29tbWVuZGVyIHtcbiAgcHJpdmF0ZSBfdHJpZTogVHJpZU5vZGU7XG4gIHByaXZhdGUgX21pbmludW1TdWdnZXN0aW9uTGVuZ3RoOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IodmFyaWFibGVzOiBNYXA8c3RyaW5nLCBudW1iZXI+LCBtaW5TdWdnZXN0aW9uTGVuOiBudW1iZXIpIHtcbiAgICB0aGlzLl9taW5pbnVtU3VnZ2VzdGlvbkxlbmd0aCA9IG1pblN1Z2dlc3Rpb25MZW4gPiAwID8gbWluU3VnZ2VzdGlvbkxlbiA6IDE7XG4gICAgdGhpcy5fdHJpZSA9IG5ldyBUcmllTm9kZSgpO1xuXG4gICAgZm9yIChsZXQgdmFyaWFibGUgb2YgdmFyaWFibGVzKSB7XG4gICAgICB0aGlzLmluc2VydCh2YXJpYWJsZVswXSk7XG4gICAgfVxuICB9XG5cbiAgaW5zZXJ0KFxuICAgIHdvcmQ6IHN0cmluZyxcbiAgICBwb3NpdGlvbjogbnVtYmVyID0gLTEsXG4gICAgbm9kZTogVHJpZU5vZGUgfCB1bmRlZmluZWQgPSB1bmRlZmluZWRcbiAgKTogdm9pZCB7XG4gICAgaWYgKHBvc2l0aW9uID09IC0xKSB7XG4gICAgICB0aGlzLmluc2VydCh3b3JkLCAwLCB0aGlzLl90cmllKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocG9zaXRpb24gPT0gd29yZC5sZW5ndGgpIHtcbiAgICAgIG5vZGU/LmFkZENoaWxkKFwiXFwwXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghbm9kZSEuZ2V0Q2hpbGQod29yZFtwb3NpdGlvbl0pKSB7XG4gICAgICBub2RlPy5hZGRDaGlsZCh3b3JkW3Bvc2l0aW9uXSk7XG4gICAgfVxuXG4gICAgdGhpcy5pbnNlcnQod29yZCwgcG9zaXRpb24gKyAxLCBub2RlIS5nZXRDaGlsZCh3b3JkW3Bvc2l0aW9uXSkpO1xuICB9XG5cbiAgZ2V0UmVjb21tZW5kYXRpb24od29yZDogc3RyaW5nKTogc3RyaW5nW10gfCBudWxsIHtcbiAgICBpZiAod29yZC5sZW5ndGggPCB0aGlzLl9taW5pbnVtU3VnZ2VzdGlvbkxlbmd0aCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgbGV0IHJlY29tbWVuZGF0aW9uczogc3RyaW5nW10gPSBbXTtcbiAgICBsZXQgY3VycmVudFBvc2l0aW9uID0gMDtcbiAgICBsZXQgY3VycmVudE5vZGU6IFRyaWVOb2RlIHwgdW5kZWZpbmVkID0gdGhpcy5fdHJpZTtcblxuICAgIHdoaWxlIChjdXJyZW50Tm9kZSAmJiBjdXJyZW50UG9zaXRpb24gPCB3b3JkLmxlbmd0aCkge1xuICAgICAgY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5nZXRDaGlsZCh3b3JkW2N1cnJlbnRQb3NpdGlvbl0pO1xuICAgICAgY3VycmVudFBvc2l0aW9uKys7XG4gICAgfVxuXG4gICAgaWYgKCFjdXJyZW50Tm9kZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdGhpcy5fdHJhdmVyc2VBbmRHZXQocmVjb21tZW5kYXRpb25zLCBjdXJyZW50Tm9kZSwgd29yZCk7XG5cbiAgICBpZiAoXG4gICAgICByZWNvbW1lbmRhdGlvbnMubGVuZ3RoID09IDAgfHxcbiAgICAgIChyZWNvbW1lbmRhdGlvbnMubGVuZ3RoID09IDEgJiYgcmVjb21tZW5kYXRpb25zWzBdID09IHdvcmQpXG4gICAgKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVjb21tZW5kYXRpb25zO1xuICB9XG5cbiAgcHJpdmF0ZSBfdHJhdmVyc2VBbmRHZXQoXG4gICAgcmVjb21tZW5kYXRpb25zOiBzdHJpbmdbXSxcbiAgICBub2RlOiBUcmllTm9kZSxcbiAgICB3b3JkOiBzdHJpbmcsXG4gICAgY3VycmVudFN0cmluZzogc3RyaW5nID0gXCJcIlxuICApIHtcbiAgICBmb3IgKGxldCBjaGlsZCBvZiBub2RlLmNoaWxkcmVuKSB7XG4gICAgICBpZiAoY2hpbGRbMF0gPT0gXCJcXDBcIikge1xuICAgICAgICByZWNvbW1lbmRhdGlvbnMucHVzaCh3b3JkICsgY3VycmVudFN0cmluZyk7XG4gICAgICAgIC8vIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fdHJhdmVyc2VBbmRHZXQoXG4gICAgICAgIHJlY29tbWVuZGF0aW9ucyxcbiAgICAgICAgY2hpbGRbMV0sXG4gICAgICAgIHdvcmQsXG4gICAgICAgIGN1cnJlbnRTdHJpbmcgKyBjaGlsZFswXVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuY2xhc3MgVHJpZU5vZGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9jaGlsZHJlbiA9IG5ldyBNYXA8c3RyaW5nLCBUcmllTm9kZT4oKTtcbiAgfVxuXG4gIHByaXZhdGUgX2NoaWxkcmVuOiBNYXA8c3RyaW5nLCBUcmllTm9kZT47XG4gIFxuICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuO1xuICB9XG5cbiAgZ2V0Q2hpbGQoY2hhcjogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuLmdldChjaGFyKTtcbiAgfVxuXG4gIGFkZENoaWxkKGNoYXI6IHN0cmluZykge1xuICAgIHRoaXMuX2NoaWxkcmVuLnNldChjaGFyLCBuZXcgVHJpZU5vZGUoKSk7XG4gIH1cbn1cbiIsImltcG9ydCBCaWcgZnJvbSBcImJpZy5qc1wiO1xuaW1wb3J0IHsgRXhwZWN0YXRpb24sIFF1ZXVlLCBTdGFjayB9IGZyb20gXCIuL2hlbHBlcnMuanNcIjtcbmltcG9ydCB7IFJlY29tbWVuZGVyIH0gZnJvbSBcIi4vcmVjb21tZW5kb3IuanNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBQYXJzZU91dHB1dCB7XG4gIHJlY29tbWVuZGF0aW9uczogc3RyaW5nW10gfCBudWxsO1xuICBmb3JtYXR0ZWRDb250ZW50OiBIVE1MQm9keUVsZW1lbnQgfCBudWxsO1xuICBmb3JtYXR0ZWRTdHJpbmc6IHN0cmluZyB8IG51bGw7XG4gIG5ld0N1cnNvclBvc2l0aW9uOiBudW1iZXI7XG4gIGVycm9yU3RyOiBzdHJpbmcgfCBudWxsO1xufVxuXG5leHBvcnQgY2xhc3MgUGFyc2VyIHtcbiAgY29uc3RydWN0b3IodmFyaWFibGVzOiBNYXA8c3RyaW5nLCBudW1iZXI+LCBtaW5TdWdnZXN0aW9uTGVuOiBudW1iZXIpIHtcbiAgICB0aGlzLnZhcmlhYmxlcyA9IHZhcmlhYmxlcztcblxuICAgIHRoaXMuX3JlY29tbWVuZGVyID0gbmV3IFJlY29tbWVuZGVyKHRoaXMudmFyaWFibGVzLCBtaW5TdWdnZXN0aW9uTGVuKTtcbiAgfVxuXG4gIHByaXZhdGUgX3JlY29tbWVuZGVyOiBSZWNvbW1lbmRlcjtcblxuICB2YXJpYWJsZXM6IE1hcDxzdHJpbmcsIG51bWJlcj47XG4gIG1hdGhlbWF0aWNhbE9wZXJhdG9yczogU2V0PHN0cmluZz4gPSBuZXcgU2V0KFtcIl5cIiwgXCIrXCIsIFwiLVwiLCBcIipcIiwgXCIvXCJdKTtcbiAgb3BlcmF0b3JQcmVjZWRlbmNlOiB7IFtrZXk6IHN0cmluZ106IG51bWJlciB9ID0ge1xuICAgIFwiXlwiOiAzLFxuICAgIFwiL1wiOiAyLFxuICAgIFwiKlwiOiAyLFxuICAgIFwiK1wiOiAxLFxuICAgIFwiLVwiOiAxLFxuICB9O1xuXG4gIHBhcnNlSW5wdXQoXG4gICAgZm9ybXVsYTogc3RyaW5nLFxuICAgIHByZXZDdXJQb3M6IG51bWJlciB8IG51bGwgPSBudWxsLFxuICAgIHJlY29tbWVuZGF0aW9uOiBzdHJpbmcgfCBudWxsID0gbnVsbFxuICApOiBQYXJzZU91dHB1dCB7XG4gICAgbGV0IHRva2VucyA9IGZvcm11bGEuc3BsaXQoLyhbLSsoKSwqLzo/XFxzXSkvZyksXG4gICAgICBwYXJlbnRoZXNlcyA9IG5ldyBTdGFjazxudW1iZXI+KCksXG4gICAgICBmb3JtYXR0ZWRTdHJpbmcgPSBgYCxcbiAgICAgIGV4cGVjdGF0aW9uID0gRXhwZWN0YXRpb24uVkFSSUFCTEUsXG4gICAgICBicmFja2V0Q291bnQgPSAwLFxuICAgICAgY3VycmVudFBvc2l0aW9uID0gMCxcbiAgICAgIHByZXZpb3VzVG9rZW4gPSBcIlwiLFxuICAgICAgcGFyc2VPdXRwdXQ6IFBhcnNlT3V0cHV0ID0ge1xuICAgICAgICByZWNvbW1lbmRhdGlvbnM6IG51bGwsXG4gICAgICAgIGZvcm1hdHRlZENvbnRlbnQ6IG51bGwsXG4gICAgICAgIGZvcm1hdHRlZFN0cmluZzogbnVsbCxcbiAgICAgICAgbmV3Q3Vyc29yUG9zaXRpb246IHByZXZDdXJQb3MgPz8gLTEsXG4gICAgICAgIGVycm9yU3RyOiBudWxsLFxuICAgICAgfTtcblxuICAgIC8vIGNvbnNvbGUubG9nKHRva2Vucyk7XG5cbiAgICB0b2tlbnMuZm9yRWFjaCgodG9rZW4pID0+IHtcbiAgICAgIGxldCBpc051bWJlciA9XG4gICAgICAgICAgdGhpcy52YXJpYWJsZXMuaGFzKHRva2VuKSB8fFxuICAgICAgICAgIChyZWNvbW1lbmRhdGlvbiAmJiB0aGlzLnZhcmlhYmxlcy5oYXMocmVjb21tZW5kYXRpb24pKSB8fFxuICAgICAgICAgICFOdW1iZXIuaXNOYU4oTnVtYmVyKHRva2VuKSksXG4gICAgICAgIGlzT3BlcmF0b3IgPSB0aGlzLm1hdGhlbWF0aWNhbE9wZXJhdG9ycy5oYXModG9rZW4pLFxuICAgICAgICBpc1NwYWNlID0gdG9rZW4udHJpbSgpID09IFwiXCIsXG4gICAgICAgIGlzQnJhY2tldCA9IHRva2VuID09IFwiKFwiIHx8IHRva2VuID09IFwiKVwiLFxuICAgICAgICBoYXNDdXJzb3IgPSBmYWxzZTtcblxuICAgICAgaWYgKGlzU3BhY2UpIHtcbiAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gYCR7Zm9ybWF0dGVkU3RyaW5nfSR7dG9rZW59YDtcbiAgICAgICAgY3VycmVudFBvc2l0aW9uICs9IHRva2VuLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIGN1cnJlbnRQb3NpdGlvbiA8PSBwcmV2Q3VyUG9zISAmJlxuICAgICAgICBjdXJyZW50UG9zaXRpb24gKyB0b2tlbi5sZW5ndGggPj0gcHJldkN1clBvcyEgJiZcbiAgICAgICAgIXBhcnNlT3V0cHV0LnJlY29tbWVuZGF0aW9uc1xuICAgICAgKSB7XG4gICAgICAgIC8vIElmIGEgcmVjb21tZW5kYXRpb24gd2FzIHByb3ZpZGVkLCByZXBsYWNlIHRoZSBjb3JyZXNwb2RpbmdcbiAgICAgICAgLy8gd29yZCB3aXRoIGl0IGFuZCBtb3ZlIHRoZSBjdXJzb3IgZm9yd2FyZCwgYWNjb3JkaW5nbHkuXG4gICAgICAgIGlmIChyZWNvbW1lbmRhdGlvbikge1xuICAgICAgICAgIHBhcnNlT3V0cHV0Lm5ld0N1cnNvclBvc2l0aW9uID0gTWF0aC5taW4oXG4gICAgICAgICAgICBwYXJzZU91dHB1dC5uZXdDdXJzb3JQb3NpdGlvbiArXG4gICAgICAgICAgICAgIHJlY29tbWVuZGF0aW9uLmxlbmd0aCAtXG4gICAgICAgICAgICAgIHRva2VuLmxlbmd0aCxcbiAgICAgICAgICAgIGZvcm11bGEubGVuZ3RoICsgcmVjb21tZW5kYXRpb24ubGVuZ3RoIC0gdG9rZW4ubGVuZ3RoXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0b2tlbiA9IHJlY29tbWVuZGF0aW9uO1xuICAgICAgICAgIHJlY29tbWVuZGF0aW9uID0gbnVsbDtcbiAgICAgICAgICBoYXNDdXJzb3IgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyc2VPdXRwdXQucmVjb21tZW5kYXRpb25zID1cbiAgICAgICAgICB0aGlzLl9yZWNvbW1lbmRlci5nZXRSZWNvbW1lbmRhdGlvbih0b2tlbik7XG4gICAgICAgIGNvbnNvbGUubG9nKHBhcnNlT3V0cHV0LnJlY29tbWVuZGF0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIGxldCB0b2tlbkNsYXNzTmFtZSA9IFwiXCI7XG5cbiAgICAgIGlmICh0b2tlbiA9PSBcIihcIikge1xuICAgICAgICBicmFja2V0Q291bnQrKztcbiAgICAgICAgcGFyZW50aGVzZXMucHVzaChjdXJyZW50UG9zaXRpb24pO1xuICAgICAgICB0b2tlbkNsYXNzTmFtZSArPSBcIiBicmFja2V0XCI7XG4gICAgICB9IGVsc2UgaWYgKHRva2VuID09IFwiKVwiKSB7XG4gICAgICAgIHBhcmVudGhlc2VzLnBvcCgpO1xuICAgICAgICBicmFja2V0Q291bnQtLTtcbiAgICAgICAgdG9rZW5DbGFzc05hbWUgKz0gXCIgYnJhY2tldFwiO1xuICAgICAgfSBlbHNlIGlmIChpc09wZXJhdG9yKSB7XG4gICAgICAgIHRva2VuQ2xhc3NOYW1lICs9IFwiIG9wZXJhdG9yXCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgZXhwZWN0YXRpb24gPT0gRXhwZWN0YXRpb24uVU5ERUZJTkVEIHx8XG4gICAgICAgIChleHBlY3RhdGlvbiA9PSBFeHBlY3RhdGlvbi5WQVJJQUJMRSAmJlxuICAgICAgICAgICFpc051bWJlciAmJlxuICAgICAgICAgICFpc0JyYWNrZXQgJiZcbiAgICAgICAgICAhKFxuICAgICAgICAgICAgKHRva2VuID09IFwiLVwiIHx8IHRva2VuID09IFwiK1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5tYXRoZW1hdGljYWxPcGVyYXRvcnMuaGFzKHByZXZpb3VzVG9rZW4pXG4gICAgICAgICAgKSkgfHxcbiAgICAgICAgKGV4cGVjdGF0aW9uID09IEV4cGVjdGF0aW9uLk9QRVJBVE9SICYmICEoaXNPcGVyYXRvciB8fCB0b2tlbiA9PSAnKScpKSB8fFxuICAgICAgICAodG9rZW4gPT0gXCIpXCIgJiYgcHJldmlvdXNUb2tlbiA9PSBcIihcIikgfHxcbiAgICAgICAgIShpc051bWJlciB8fCBpc09wZXJhdG9yIHx8IGlzQnJhY2tldCkgfHxcbiAgICAgICAgKGlzTnVtYmVyICYmXG4gICAgICAgICAgcHJldmlvdXNUb2tlbiA9PSBcIi9cIiAmJlxuICAgICAgICAgICh0aGlzLnZhcmlhYmxlcy5nZXQodG9rZW4pID09IDAgfHwgTnVtYmVyKHRva2VuKSA9PSAwKSlcbiAgICAgICkge1xuICAgICAgICB0b2tlbkNsYXNzTmFtZSArPSBcIiBlcnJvclwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXBhcnNlT3V0cHV0LmVycm9yU3RyKSB7XG4gICAgICAgIGlmIChicmFja2V0Q291bnQgPCAwKSB7XG4gICAgICAgICAgcGFyc2VPdXRwdXQuZXJyb3JTdHIgPSBgVW5leHBlY3RlZCAnKScgYXQgcG9zOiAke2N1cnJlbnRQb3NpdGlvbn1gO1xuICAgICAgICAgIGV4cGVjdGF0aW9uID0gRXhwZWN0YXRpb24uVU5ERUZJTkVEO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIGV4cGVjdGF0aW9uID09IEV4cGVjdGF0aW9uLlZBUklBQkxFICYmXG4gICAgICAgICAgIWlzTnVtYmVyICYmXG4gICAgICAgICAgdG9rZW4gIT0gXCIoXCIgJiZcbiAgICAgICAgICAhKFxuICAgICAgICAgICAgKHRva2VuID09IFwiLVwiIHx8IHRva2VuID09IFwiK1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5tYXRoZW1hdGljYWxPcGVyYXRvcnMuaGFzKHByZXZpb3VzVG9rZW4pXG4gICAgICAgICAgKVxuICAgICAgICApIHtcbiAgICAgICAgICBwYXJzZU91dHB1dC5lcnJvclN0ciA9IGBFeHBlY3RlZCB2YXJpYWJsZS9udW1iZXIgYXQgcG9zOiAke2N1cnJlbnRQb3NpdGlvbn1gO1xuICAgICAgICAgIGV4cGVjdGF0aW9uID0gRXhwZWN0YXRpb24uVU5ERUZJTkVEO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIGV4cGVjdGF0aW9uID09IEV4cGVjdGF0aW9uLk9QRVJBVE9SICYmXG4gICAgICAgICAgIWlzT3BlcmF0b3IgJiZcbiAgICAgICAgICB0b2tlbiAhPSBcIilcIlxuICAgICAgICApIHtcbiAgICAgICAgICBwYXJzZU91dHB1dC5lcnJvclN0ciA9IGBFeHBlY3RlZCBtYXRoZW1hdGljYWwgb3BlcmF0b3IgYXQgcG9zOiAke2N1cnJlbnRQb3NpdGlvbn1gO1xuICAgICAgICAgIGV4cGVjdGF0aW9uID0gRXhwZWN0YXRpb24uVU5ERUZJTkVEO1xuICAgICAgICB9IGVsc2UgaWYgKCEoaXNOdW1iZXIgfHwgaXNPcGVyYXRvciB8fCBpc0JyYWNrZXQpKSB7XG4gICAgICAgICAgcGFyc2VPdXRwdXQuZXJyb3JTdHIgPSBgVW5rbm93biB3b3JkIGF0IHBvczogJHtjdXJyZW50UG9zaXRpb259YDtcbiAgICAgICAgICBleHBlY3RhdGlvbiA9IEV4cGVjdGF0aW9uLlVOREVGSU5FRDtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICBpc051bWJlciAmJlxuICAgICAgICAgIHByZXZpb3VzVG9rZW4gPT0gXCIvXCIgJiZcbiAgICAgICAgICAodGhpcy52YXJpYWJsZXMuZ2V0KHRva2VuKSA9PSAwIHx8IE51bWJlcih0b2tlbikgPT0gMClcbiAgICAgICAgKSB7XG4gICAgICAgICAgcGFyc2VPdXRwdXQuZXJyb3JTdHIgPSBgRGl2aXNpb24gYnkgemVybyBhdCBwb3M6ICR7Y3VycmVudFBvc2l0aW9ufWA7XG4gICAgICAgICAgZXhwZWN0YXRpb24gPSBFeHBlY3RhdGlvbi5VTkRFRklORUQ7XG4gICAgICAgIH0gZWxzZSBpZiAocHJldmlvdXNUb2tlbiA9PSBcIihcIiAmJiB0b2tlbiA9PSBcIilcIikge1xuICAgICAgICAgIHBhcnNlT3V0cHV0LmVycm9yU3RyID0gYEVtcHR5IGJyYWNrZXRzIGF0IHBvc2l0aW9uICR7Y3VycmVudFBvc2l0aW9ufWA7XG4gICAgICAgICAgZXhwZWN0YXRpb24gPSBFeHBlY3RhdGlvbi5VTkRFRklORUQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGV4cGVjdGF0aW9uICE9IEV4cGVjdGF0aW9uLlVOREVGSU5FRCkge1xuICAgICAgICBpZiAodG9rZW4gPT0gXCIoXCIgfHwgaXNPcGVyYXRvcikge1xuICAgICAgICAgIGV4cGVjdGF0aW9uID0gRXhwZWN0YXRpb24uVkFSSUFCTEU7XG4gICAgICAgIH0gZWxzZSBpZiAodG9rZW4gPT0gXCIpXCIgfHwgaXNOdW1iZXIpIHtcbiAgICAgICAgICBleHBlY3RhdGlvbiA9IEV4cGVjdGF0aW9uLk9QRVJBVE9SO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChoYXNDdXJzb3IpIHtcbiAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gYCR7Zm9ybWF0dGVkU3RyaW5nfSR7dG9rZW59YDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvcm1hdHRlZFN0cmluZyA9IGAke2Zvcm1hdHRlZFN0cmluZ308c3BhbiBjbGFzcz1cInd5c2l3eWdJbnRlcm5hbHMgJHt0b2tlbkNsYXNzTmFtZX1cIj4ke3Rva2VufTwvc3Bhbj5gO1xuICAgICAgfVxuXG4gICAgICBjdXJyZW50UG9zaXRpb24gKz0gdG9rZW4ubGVuZ3RoO1xuICAgICAgcHJldmlvdXNUb2tlbiA9IHRva2VuO1xuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMubWF0aGVtYXRpY2FsT3BlcmF0b3JzLmhhcyhwcmV2aW91c1Rva2VuKSkge1xuICAgICAgcGFyc2VPdXRwdXQuZXJyb3JTdHIgPSBcIlVuZXhwZWN0ZWQgZW5kaW5nIG9mIGZvcm11bGEuXCI7XG4gICAgfVxuXG4gICAgY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuICAgIGNvbnN0IGRvYyA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoZm9ybWF0dGVkU3RyaW5nLCBcInRleHQvaHRtbFwiKTtcblxuICAgIHBhcnNlT3V0cHV0LmZvcm1hdHRlZENvbnRlbnQgPSBkb2MucXVlcnlTZWxlY3RvcihcImJvZHlcIikhO1xuICAgIHBhcnNlT3V0cHV0LmZvcm1hdHRlZFN0cmluZyA9IGZvcm1hdHRlZFN0cmluZztcblxuICAgIGlmICghcGFyZW50aGVzZXMuaXNFbXB0eSgpKSB7XG4gICAgICBwYXJzZU91dHB1dC5lcnJvclN0ciA9IGBVbmNsb3NlZCAnKCcgYXQgcG9zaXRpb246ICR7cGFyZW50aGVzZXMudG9wKCl9YDtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyc2VPdXRwdXQ7XG4gIH1cblxuICBidWlsZFJQTihmb3JtdWxhOiBzdHJpbmcpOiBRdWV1ZTxzdHJpbmc+IHwgbnVsbCB7XG4gICAgaWYgKHRoaXMucGFyc2VJbnB1dChmb3JtdWxhKS5lcnJvclN0cikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgdG9rZW5zID0gZm9ybXVsYVxuICAgICAgLnNwbGl0KC8oWy0rKCksKi86P1xcc10pL2cpXG4gICAgICAuZmlsdGVyKChlbDogc3RyaW5nKSA9PiAhL1xccysvLnRlc3QoZWwpICYmIGVsICE9PSBcIlwiKTtcblxuICAgIC8vIEhhbmRsaW5nIHRoZSBzcGVjaWFsIGNhc2Ugb2YgdW5hcnkgYC1gIGFuZCBgK2AuXG5cbiAgICBsZXQgcHJldmlvdXNUb2tlbiA9IFwiXCI7XG4gICAgbGV0IGNhcnJpZWRUb2tlbjogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG4gICAgY29uc3QgcGFyc2VkVG9rZW5zOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgZm9yIChjb25zdCB0b2tlbiBvZiB0b2tlbnMpIHtcbiAgICAgIGlmIChcbiAgICAgICAgKHRva2VuID09IFwiK1wiIHx8IHRva2VuID09IFwiLVwiKSAmJlxuICAgICAgICB0aGlzLm1hdGhlbWF0aWNhbE9wZXJhdG9ycy5oYXMocHJldmlvdXNUb2tlbilcbiAgICAgICkge1xuICAgICAgICBjYXJyaWVkVG9rZW4gPSB0b2tlbjtcbiAgICAgIH0gZWxzZSBpZiAoY2FycmllZFRva2VuKSB7XG4gICAgICAgIHBhcnNlZFRva2Vucy5wdXNoKGNhcnJpZWRUb2tlbiArIHRva2VuKTtcbiAgICAgICAgY2FycmllZFRva2VuID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgIH1cblxuICAgICAgcHJldmlvdXNUb2tlbiA9IHRva2VuO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNodW50aW5nIFlhcmQgQWxnb3JpdGhtIChFVyBEaWprc3RyYSlcbiAgICAgKi9cblxuICAgIGNvbnN0IG9wZXJhdG9yU3RhY2sgPSBuZXcgU3RhY2s8c3RyaW5nPigpO1xuICAgIGNvbnN0IG91dHB1dFF1ZXVlID0gbmV3IFF1ZXVlPHN0cmluZz4oKTtcblxuICAgIGZvciAoY29uc3QgdG9rZW4gb2YgcGFyc2VkVG9rZW5zKSB7XG4gICAgICBpZiAodG9rZW4gPT0gXCIoXCIpIHtcbiAgICAgICAgb3BlcmF0b3JTdGFjay5wdXNoKFwiKFwiKTtcbiAgICAgIH0gZWxzZSBpZiAodG9rZW4gPT0gXCIpXCIpIHtcbiAgICAgICAgd2hpbGUgKG9wZXJhdG9yU3RhY2sudG9wKCkgIT0gXCIoXCIpIHtcbiAgICAgICAgICBvdXRwdXRRdWV1ZS5lbnF1ZXVlKG9wZXJhdG9yU3RhY2sucG9wKCkhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9wZXJhdG9yU3RhY2sucG9wKCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMubWF0aGVtYXRpY2FsT3BlcmF0b3JzLmhhcyh0b2tlbikpIHtcbiAgICAgICAgd2hpbGUgKFxuICAgICAgICAgIHRoaXMubWF0aGVtYXRpY2FsT3BlcmF0b3JzLmhhcyhvcGVyYXRvclN0YWNrLnRvcCgpISkgJiZcbiAgICAgICAgICB0aGlzLm9wZXJhdG9yUHJlY2VkZW5jZVt0b2tlbl0gPD1cbiAgICAgICAgICAgIHRoaXMub3BlcmF0b3JQcmVjZWRlbmNlW29wZXJhdG9yU3RhY2sudG9wKCkhXVxuICAgICAgICApIHtcbiAgICAgICAgICBvdXRwdXRRdWV1ZS5lbnF1ZXVlKG9wZXJhdG9yU3RhY2sucG9wKCkhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9wZXJhdG9yU3RhY2sucHVzaCh0b2tlbik7XG4gICAgICB9IGVsc2UgaWYgKCFOdW1iZXIuaXNOYU4odG9rZW4pICYmIHRva2VuICE9IFwiXCIpIHtcbiAgICAgICAgb3V0cHV0UXVldWUuZW5xdWV1ZSh0b2tlbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgd2hpbGUgKG9wZXJhdG9yU3RhY2sudG9wKCkpIHtcbiAgICAgIG91dHB1dFF1ZXVlLmVucXVldWUob3BlcmF0b3JTdGFjay5wb3AoKSEpO1xuICAgIH1cblxuICAgICgoKSA9PiB7XG4gICAgICAvLyBvdXRwdXRRdWV1ZT8ucHJpbnQoKTtcbiAgICB9KSgpO1xuXG4gICAgcmV0dXJuIG91dHB1dFF1ZXVlO1xuICB9XG5cbiAgYWRkUGFyZW50aGVzZXMoZm9ybXVsYTogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgY29uc3QgcnBuID0gdGhpcy5idWlsZFJQTihmb3JtdWxhKTtcblxuICAgIGlmICghcnBuKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBsZXhlZFJQTjogc3RyaW5nW10gPSBbXTtcblxuICAgIHdoaWxlICghcnBuLmlzRW1wdHkoKSkge1xuICAgICAgbGV4ZWRSUE4ucHVzaChycG4uZGVxdWV1ZSgpISk7XG4gICAgfVxuXG4gICAgbGV0IG9wZXJhdG9yU3RhY2sgPSBuZXcgU3RhY2s8c3RyaW5nIHwgbnVsbD4oKTtcbiAgICBsZXQgcmVzdWx0U3RhY2sgPSBuZXcgU3RhY2s8c3RyaW5nPigpO1xuXG4gICAgbGV4ZWRSUE4uZm9yRWFjaCgoc3ltYm9sKSA9PiB7XG4gICAgICBsZXQgcGFyc2VkTGVmdEV4cHJlc3Npb246IHN0cmluZywgcGFyc2VkUmlnaHRFeHByZXNzaW9uOiBzdHJpbmc7XG5cbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy52YXJpYWJsZXMuaGFzKHN5bWJvbCkgfHxcbiAgICAgICAgKCFpc05hTihwYXJzZUZsb2F0KHN5bWJvbCkpICYmIGlzRmluaXRlKHBhcnNlRmxvYXQoc3ltYm9sKSkpXG4gICAgICApIHtcbiAgICAgICAgcmVzdWx0U3RhY2sucHVzaChzeW1ib2wpO1xuICAgICAgICBvcGVyYXRvclN0YWNrLnB1c2gobnVsbCk7XG4gICAgICB9IGVsc2UgaWYgKE9iamVjdC5rZXlzKHRoaXMub3BlcmF0b3JQcmVjZWRlbmNlKS5pbmNsdWRlcyhzeW1ib2wpKSB7XG4gICAgICAgIGxldCBbcmlnaHRFeHByZXNzaW9uLCBsZWZ0RXhwcmVzc2lvbiwgb3BlcmF0b3JBLCBvcGVyYXRvckJdID0gW1xuICAgICAgICAgIHJlc3VsdFN0YWNrLnBvcCgpISxcbiAgICAgICAgICByZXN1bHRTdGFjay5wb3AoKSEsXG4gICAgICAgICAgb3BlcmF0b3JTdGFjay5wb3AoKSEsXG4gICAgICAgICAgb3BlcmF0b3JTdGFjay5wb3AoKSEsXG4gICAgICAgIF07XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRoaXMub3BlcmF0b3JQcmVjZWRlbmNlW29wZXJhdG9yQl0gPD1cbiAgICAgICAgICAgIHRoaXMub3BlcmF0b3JQcmVjZWRlbmNlW3N5bWJvbF0gfHxcbiAgICAgICAgICAodGhpcy5vcGVyYXRvclByZWNlZGVuY2Vbb3BlcmF0b3JCXSA9PT1cbiAgICAgICAgICAgIHRoaXMub3BlcmF0b3JQcmVjZWRlbmNlW3N5bWJvbF0gJiZcbiAgICAgICAgICAgIFtcIi9cIiwgXCItXCJdLmluY2x1ZGVzKHN5bWJvbCkpXG4gICAgICAgICkge1xuICAgICAgICAgIHBhcnNlZExlZnRFeHByZXNzaW9uID0gYCgke2xlZnRFeHByZXNzaW9ufSlgO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhcnNlZExlZnRFeHByZXNzaW9uID0gbGVmdEV4cHJlc3Npb247XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgdGhpcy5vcGVyYXRvclByZWNlZGVuY2Vbb3BlcmF0b3JBXSA8PVxuICAgICAgICAgICAgdGhpcy5vcGVyYXRvclByZWNlZGVuY2Vbc3ltYm9sXSB8fFxuICAgICAgICAgICh0aGlzLm9wZXJhdG9yUHJlY2VkZW5jZVtvcGVyYXRvckFdID09PVxuICAgICAgICAgICAgdGhpcy5vcGVyYXRvclByZWNlZGVuY2Vbc3ltYm9sXSAmJlxuICAgICAgICAgICAgW1wiL1wiLCBcIi1cIl0uaW5jbHVkZXMoc3ltYm9sKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgcGFyc2VkUmlnaHRFeHByZXNzaW9uID0gYCgke3JpZ2h0RXhwcmVzc2lvbn0pYDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJzZWRSaWdodEV4cHJlc3Npb24gPSByaWdodEV4cHJlc3Npb247XG4gICAgICAgIH1cblxuICAgICAgICByZXN1bHRTdGFjay5wdXNoKFxuICAgICAgICAgIGAke3BhcnNlZExlZnRFeHByZXNzaW9ufSAke3N5bWJvbH0gJHtwYXJzZWRSaWdodEV4cHJlc3Npb259YFxuICAgICAgICApO1xuICAgICAgICBvcGVyYXRvclN0YWNrLnB1c2goc3ltYm9sKTtcbiAgICAgIH0gZWxzZSB0aHJvdyBgJHtzeW1ib2x9IGlzIG5vdCBhIHJlY29nbml6ZWQgc3ltYm9sYDtcbiAgICB9KTtcblxuICAgIGlmICghcmVzdWx0U3RhY2suaXNFbXB0eSgpKSB7XG4gICAgICByZXR1cm4gcmVzdWx0U3RhY2sucG9wKCkhO1xuICAgIH0gZWxzZSB0aHJvdyBgJHtsZXhlZFJQTn0gaXMgbm90IGEgY29ycmVjdCBSUE5gO1xuICB9XG5cbiAgY2FsY3VsYXRlKGZvcm11bGE6IHN0cmluZyk6IG51bWJlciB8IHVuZGVmaW5lZCB7XG4gICAgbGV0IHJwbiA9IHRoaXMuYnVpbGRSUE4oZm9ybXVsYSk7XG5cbiAgICBpZiAoIXJwbikge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBsZXQgY2FsY1N0YWNrID0gbmV3IFN0YWNrPEJpZz4oKTtcblxuICAgIHdoaWxlICghcnBuLmlzRW1wdHkoKSkge1xuICAgICAgY29uc3QgZnJvbnRJdGVtID0gcnBuLmRlcXVldWUoKSE7XG5cbiAgICAgIGlmICghdGhpcy5tYXRoZW1hdGljYWxPcGVyYXRvcnMuaGFzKGZyb250SXRlbSkpIHtcbiAgICAgICAgY2FsY1N0YWNrLnB1c2goXG4gICAgICAgICAgQmlnKFxuICAgICAgICAgICAgTnVtYmVyLnBhcnNlRmxvYXQoXG4gICAgICAgICAgICAgIHRoaXMudmFyaWFibGVzLmdldChmcm9udEl0ZW0pPy50b1N0cmluZygpID8/IGZyb250SXRlbVxuICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBvcGVyYXRvciA9IGZyb250SXRlbTtcbiAgICAgICAgbGV0IG51bUIgPSBjYWxjU3RhY2sucG9wKCkhO1xuICAgICAgICBsZXQgbnVtQSA9IGNhbGNTdGFjay5wb3AoKSE7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBzd2l0Y2ggKG9wZXJhdG9yKSB7XG4gICAgICAgICAgICBjYXNlIFwiK1wiOlxuICAgICAgICAgICAgICBjYWxjU3RhY2sucHVzaChCaWcobnVtQSkuYWRkKEJpZyhudW1CKSkpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCItXCI6XG4gICAgICAgICAgICAgIGNhbGNTdGFjay5wdXNoKEJpZyhudW1BKS5zdWIoQmlnKG51bUIpKSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIipcIjpcbiAgICAgICAgICAgICAgY2FsY1N0YWNrLnB1c2goQmlnKG51bUEpLm11bChCaWcobnVtQikpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiL1wiOlxuICAgICAgICAgICAgICBjYWxjU3RhY2sucHVzaChCaWcobnVtQSkuZGl2KEJpZyhudW1CKSkpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgLy8gQmlnLmpzIGRvZXNuJ3Qgc3VwcG9ydCBleHBvbmVudGlhdGluZyBhIEJpZyB0byBhIEJpZywgd2hpY2hcbiAgICAgICAgICAgIC8vIGlzIG9iaW91cyBkdWUgdG8gcGVyZm9ybWFuY2Ugb3ZlcmhlYWRzLiBVc2UgdGhpcyBjYXNlIHdpdGggY2FyZS5cblxuICAgICAgICAgICAgY2FzZSBcIl5cIjpcbiAgICAgICAgICAgICAgY2FsY1N0YWNrLnB1c2goQmlnKG51bUEpLnBvdyhCaWcobnVtQikudG9OdW1iZXIoKSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyOiB1bmtub3duKSB7XG4gICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjYWxjU3RhY2sudG9wKCk/LnRvTnVtYmVyKCk7XG4gIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBDdXJzb3Ige1xuICBzdGF0aWMgZ2V0Q3VycmVudEN1cnNvclBvc2l0aW9uKHBhcmVudEVsZW1lbnQ6IGFueSkge1xuICAgIGxldCBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCksXG4gICAgICBjaGFyQ291bnQgPSAtMSxcbiAgICAgIG5vZGU7XG5cbiAgICBpZiAoc2VsZWN0aW9uPy5mb2N1c05vZGUpIHtcbiAgICAgIGlmIChDdXJzb3IuX2lzQ2hpbGRPZihzZWxlY3Rpb24uZm9jdXNOb2RlLCBwYXJlbnRFbGVtZW50KSkge1xuICAgICAgICBub2RlID0gc2VsZWN0aW9uLmZvY3VzTm9kZTtcbiAgICAgICAgY2hhckNvdW50ID0gc2VsZWN0aW9uLmZvY3VzT2Zmc2V0O1xuXG4gICAgICAgIHdoaWxlIChub2RlKSB7XG4gICAgICAgICAgaWYgKG5vZGUgPT09IHBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChub2RlLnByZXZpb3VzU2libGluZykge1xuICAgICAgICAgICAgbm9kZSA9IG5vZGUucHJldmlvdXNTaWJsaW5nO1xuICAgICAgICAgICAgY2hhckNvdW50ICs9IG5vZGUudGV4dENvbnRlbnQ/Lmxlbmd0aCA/PyAwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgaWYgKG5vZGUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoYXJDb3VudDtcbiAgfVxuXG4gIHN0YXRpYyBzZXRDdXJyZW50Q3Vyc29yUG9zaXRpb24oY2hhcnM6IG51bWJlciwgZWxlbWVudDogYW55KSB7XG4gICAgaWYgKGNoYXJzID49IDApIHtcbiAgICAgIHZhciBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICBsZXQgcmFuZ2UgPSBDdXJzb3IuX2NyZWF0ZVJhbmdlKGVsZW1lbnQsIHsgY291bnQ6IGNoYXJzIH0sIHVuZGVmaW5lZCk7XG5cbiAgICAgIGlmIChyYW5nZSkge1xuICAgICAgICByYW5nZS5jb2xsYXBzZShmYWxzZSk7XG4gICAgICAgIHNlbGVjdGlvbj8ucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICAgIHNlbGVjdGlvbj8uYWRkUmFuZ2UocmFuZ2UpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBfY3JlYXRlUmFuZ2Uobm9kZTogYW55LCBjaGFyczogYW55LCByYW5nZTogYW55KSB7XG4gICAgaWYgKCFyYW5nZSkge1xuICAgICAgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZShub2RlKTtcbiAgICAgIHJhbmdlLnNldFN0YXJ0KG5vZGUsIDApO1xuICAgIH1cblxuICAgIGlmIChjaGFycy5jb3VudCA9PT0gMCkge1xuICAgICAgcmFuZ2Uuc2V0RW5kKG5vZGUsIGNoYXJzLmNvdW50KTtcbiAgICB9IGVsc2UgaWYgKG5vZGUgJiYgY2hhcnMuY291bnQgPiAwKSB7XG4gICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpIHtcbiAgICAgICAgaWYgKG5vZGUudGV4dENvbnRlbnQubGVuZ3RoIDwgY2hhcnMuY291bnQpIHtcbiAgICAgICAgICBjaGFycy5jb3VudCAtPSBub2RlLnRleHRDb250ZW50Lmxlbmd0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByYW5nZS5zZXRFbmQobm9kZSwgY2hhcnMuY291bnQpO1xuICAgICAgICAgIGNoYXJzLmNvdW50ID0gMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yICh2YXIgbHAgPSAwOyBscCA8IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGg7IGxwKyspIHtcbiAgICAgICAgICByYW5nZSA9IEN1cnNvci5fY3JlYXRlUmFuZ2Uobm9kZS5jaGlsZE5vZGVzW2xwXSwgY2hhcnMsIHJhbmdlKTtcblxuICAgICAgICAgIGlmIChjaGFycy5jb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJhbmdlO1xuICB9XG5cbiAgc3RhdGljIF9pc0NoaWxkT2Yobm9kZTogYW55LCBwYXJlbnRFbGVtZW50OiBhbnkpIHtcbiAgICB3aGlsZSAobm9kZSAhPT0gbnVsbCkge1xuICAgICAgaWYgKG5vZGUgPT09IHBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRDYXJldCA9IChlbGVtZW50OiBhbnkpID0+IHtcbiAgICBjb25zdCByYW5nZSA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKSEuZ2V0UmFuZ2VBdCgwKTtcbiAgICBjb25zdCBwcmVmaXggPSByYW5nZS5jbG9uZVJhbmdlKCk7XG4gICAgcHJlZml4LnNlbGVjdE5vZGVDb250ZW50cyhlbGVtZW50KTtcbiAgICBwcmVmaXguc2V0RW5kKHJhbmdlLmVuZENvbnRhaW5lciwgcmFuZ2UuZW5kT2Zmc2V0KTtcbiAgICByZXR1cm4gcHJlZml4LnRvU3RyaW5nKCkubGVuZ3RoO1xuICB9O1xuXG4gIHN0YXRpYyBzZXRDYXJldCA9IChwb3M6IGFueSwgcGFyZW50OiBhbnkpID0+IHtcbiAgICBmb3IgKGNvbnN0IG5vZGUgb2YgcGFyZW50LmNoaWxkTm9kZXMpIHtcbiAgICAgIGlmIChub2RlLm5vZGVUeXBlID09IE5vZGUuVEVYVF9OT0RFKSB7XG4gICAgICAgIGlmIChub2RlLmxlbmd0aCA+PSBwb3MpIHtcbiAgICAgICAgICBjb25zdCByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgICAgICAgY29uc3Qgc2VsID0gd2luZG93LmdldFNlbGVjdGlvbigpITtcbiAgICAgICAgICByYW5nZS5zZXRTdGFydChub2RlLCBwb3MpO1xuICAgICAgICAgIHJhbmdlLmNvbGxhcHNlKHRydWUpO1xuICAgICAgICAgIHNlbC5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgICAgICBzZWwuYWRkUmFuZ2UocmFuZ2UpO1xuICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwb3MgPSBwb3MgLSBub2RlLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcG9zID0gdGhpcy5zZXRDYXJldChwb3MsIG5vZGUpO1xuICAgICAgICBpZiAocG9zIDwgMCkge1xuICAgICAgICAgIHJldHVybiBwb3M7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBvcztcbiAgfTtcblxuICBzdGF0aWMgZ2V0Q3Vyc29yUmVjdCgpIHtcbiAgICByZXR1cm4gd2luZG93LmdldFNlbGVjdGlvbigpPy5nZXRSYW5nZUF0KDApPy5nZXRDbGllbnRSZWN0cygpWzBdO1xuICB9XG59XG4iLCJpbXBvcnQgeyBjc3MsIGh0bWwsIExpdEVsZW1lbnQgfSBmcm9tIFwibGl0XCI7XG5pbXBvcnQgeyBjdXN0b21FbGVtZW50LCBwcm9wZXJ0eSB9IGZyb20gXCJsaXQvZGVjb3JhdG9ycy5qc1wiO1xuXG5AY3VzdG9tRWxlbWVudChcInN1Z2dlc3Rpb24tbWVudVwiKVxuZXhwb3J0IGNsYXNzIFN1Z2dlc3Rpb25NZW51IGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gIEBwcm9wZXJ0eSgpXG4gIHJlY29tbWVuZGF0aW9uczogc3RyaW5nW10gPSBbXTtcblxuICBAcHJvcGVydHkoKVxuICBvbkNsaWNrUmVjb21tZW5kYXRpb246IEZ1bmN0aW9uID0gKHJlY29tbWVuZGF0aW9uOiBzdHJpbmcpID0+IHt9O1xuXG4gIHN0YXRpYyBzdHlsZXMgPSBjc3NgXG4gICAgdWwge1xuICAgICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tZmUtc3VnZ2VzdGlvbi1jb2xvciwgd2hpdGUpO1xuICAgICAgY29sb3I6IHZhcigtLWZlLXN1Z2dlc3Rpb24tY29sb3IsICNiYWI2YzApO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZmUtc3VnZ2VzdGlvbi1iYWNrZ3JvdW5kLWNvbG9yLCAjMzYzNTM3KTtcbiAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICB3aWR0aDogZml0LWNvbnRlbnQ7XG4gICAgICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XG4gICAgICBwYWRkaW5nOiA0cHggMHB4O1xuICAgICAgbWFyZ2luOiAycHg7XG4gICAgfVxuXG4gICAgbGkge1xuICAgICAgbWFyZ2luOiAwcHg7XG4gICAgICBwYWRkaW5nOiAycHggNnB4O1xuICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIH1cblxuICAgIGxpOmZvY3VzLXZpc2libGUge1xuICAgICAgLyogb3V0bGluZTogMXB4IHNvbGlkIHJlZDsgKi9cbiAgICAgIG91dGxpbmU6IDBweDtcbiAgICAgIGNvbG9yOiB2YXIoLS1mZS1zdWdnZXN0aW9uLWZvY3VzLWNvbG9yLCAjZmNlNTY2KTtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWZlLXN1Z2dlc3Rpb24tZm9jdXMtYmFja2dyb3VuZC1jb2xvciwgIzY5Njc2Yyk7XG4gICAgfVxuICBgO1xuXG4gIGhhbmRsZUtleWRvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQsIHJlY29tbWVuZGF0aW9uOiBzdHJpbmcpIHtcbiAgICBpZiAoZXZlbnQuY29kZSA9PSBcIkVudGVyXCIpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHRoaXMub25DbGlja1JlY29tbWVuZGF0aW9uKHJlY29tbWVuZGF0aW9uKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIGh0bWxgXG4gICAgICA8dWwgY2xhc3M9XCJ3eXNpd3lnLXN1Z2dlc3Rpb24tbWVudVwiPlxuICAgICAgICAke3RoaXMucmVjb21tZW5kYXRpb25zLm1hcCgocmVjb21tZW5kYXRpb24pID0+IHtcbiAgICAgICAgICByZXR1cm4gaHRtbGA8bGlcbiAgICAgICAgICAgIHRhYmluZGV4PVwiMFwiXG4gICAgICAgICAgICBAY2xpY2s9JHsoZTogYW55KSA9PiB0aGlzLm9uQ2xpY2tSZWNvbW1lbmRhdGlvbihyZWNvbW1lbmRhdGlvbil9XG4gICAgICAgICAgICBAa2V5ZG93bj0keyhlOiBhbnkpID0+IHRoaXMuaGFuZGxlS2V5ZG93bihlLCByZWNvbW1lbmRhdGlvbil9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgJHtyZWNvbW1lbmRhdGlvbn1cbiAgICAgICAgICA8L2xpPmA7XG4gICAgICAgIH0pfVxuICAgICAgPC91bD5cbiAgICBgO1xuICB9XG59XG4iLCJpbXBvcnQgeyBodG1sLCBMaXRFbGVtZW50LCBQcm9wZXJ0eVZhbHVlTWFwIH0gZnJvbSBcImxpdFwiO1xuaW1wb3J0IHsgY3VzdG9tRWxlbWVudCwgcHJvcGVydHksIHN0YXRlIH0gZnJvbSBcImxpdC9kZWNvcmF0b3JzLmpzXCI7XG5pbXBvcnQgeyBGb3JtdWxhRWRpdG9yU3R5bGVzIH0gZnJvbSBcIi4vc3R5bGVzL2Zvcm11bGEtZWRpdG9yLXN0eWxlcy5qc1wiO1xuaW1wb3J0IHsgVGV4dEJ1dHRvblN0eWxlcyB9IGZyb20gXCIuLi8uLi9zdHlsZXMvc3JjL2J1dHRvbi1zdHlsZXMuanNcIjtcbmltcG9ydCB7IFBhcnNlciB9IGZyb20gXCIuL3BhcnNlci5qc1wiO1xuaW1wb3J0IHsgQ3Vyc29yIH0gZnJvbSBcIi4vY3Vyc29yLmpzXCI7XG5pbXBvcnQgXCIuL3N1Z2dlc3Rpb24tbWVudS5qc1wiO1xuXG5AY3VzdG9tRWxlbWVudChcImZvcm11bGEtZWRpdG9yXCIpXG5leHBvcnQgY2xhc3MgRm9ybXVsYUVkaXRvciBleHRlbmRzIExpdEVsZW1lbnQge1xuICBwcml2YXRlIF9wYXJzZXI6IFBhcnNlcjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5fcGFyc2VyID0gbmV3IFBhcnNlcih0aGlzLnZhcmlhYmxlcywgdGhpcy5taW5TdWdnZXN0aW9uTGVuKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBmaXJzdFVwZGF0ZWQoXG4gICAgX2NoYW5nZWRQcm9wZXJ0aWVzOiBQcm9wZXJ0eVZhbHVlTWFwPGFueT4gfCBNYXA8UHJvcGVydHlLZXksIHVua25vd24+XG4gICk6IHZvaWQge1xuICAgIHRoaXMuX3BhcnNlciA9IG5ldyBQYXJzZXIodGhpcy52YXJpYWJsZXMsIHRoaXMubWluU3VnZ2VzdGlvbkxlbik7XG4gIH1cblxuICAvKipcbiAgICogVGhlc2UgYHN0YXRlc2AgYW5kIGBwcm9wZXJ0aWVzYCBjYW4ndCBiZSBkZWZpbmVkIGFzIGBzdGF0aWMgZ2V0IHByb3BlcnRpZXNgLFxuICAgKiBiZWNhdXNlIFRTIGRvZXNuJ3Qgc3VwcG9ydCB0aGF0LlxuICAgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9saXQvbGl0LWVsZW1lbnQvaXNzdWVzLzQxNFxuICAgKi9cblxuICBAc3RhdGUoKVxuICBfY29udGVudDogc3RyaW5nID0gXCJcIjtcblxuICBAc3RhdGUoKVxuICBfZm9ybWF0dGVkQ29udGVudDogRWxlbWVudCB8IG51bGwgPSBudWxsO1xuXG4gIEBzdGF0ZSgpXG4gIF9yZWNvbW1lbmRhdGlvbnM6IHN0cmluZ1tdIHwgbnVsbCA9IG51bGw7XG5cbiAgQHN0YXRlKClcbiAgX2Vycm9yU3RyOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcblxuICBAc3RhdGUoKVxuICBfY2FsY3VsYXRlZFJlc3VsdDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG5cbiAgLyoqXG4gICAqIElmIGBwYXJzZUlucHV0YCBpcyBjYWxsZWQgdG8gYWRkIGEgcmVjb21tZW5kYXRpb24sIHNheSBieSBjbGlja2luZyxcbiAgICogYnJvd3NlciByZW1vdmVzIGZvY3VzIGZyb20gdGhlIGlucHV0IGJveC4gSW4gdGhhdCBjYXNlLCB3ZSBoYXZlIG5vIHdheVxuICAgKiBvZiBrbm93aW5nIHdoZXJlIHRoZSBjdXJzb3IgcHJldmlvdXNseSB3YXMsIG90aGVyIHRoYW4gc3RvcmluZyBpdCBzb21ld2hlcmUuXG4gICAqL1xuXG4gIEBzdGF0ZSgpXG4gIGN1cnJlbnRDdXJzb3JQb3NpdGlvbjogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG5cbiAgQHN0YXRlKClcbiAgY3VycmVudEN1cnNvclJlY3Q6IERPTVJlY3QgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG5cbiAgQHN0YXRlKClcbiAgbGFzdElucHV0VHlwZTogc3RyaW5nID0gXCJ1bmRlZlwiO1xuXG4gIEBwcm9wZXJ0eSh7XG4gICAgdHlwZTogTWFwPHN0cmluZywgbnVtYmVyPixcbiAgICBjb252ZXJ0ZXI6IHtcbiAgICAgIGZyb21BdHRyaWJ1dGU6ICh2YWx1ZSkgPT4ge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IE1hcDxzdHJpbmcsIG51bWJlcj4oSlNPTi5wYXJzZSh2YWx1ZSkpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdG9BdHRyaWJ1dGU6ICh2YWx1ZTogTWFwPHN0cmluZywgbnVtYmVyPikgPT4ge1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoQXJyYXkuZnJvbSh2YWx1ZS5lbnRyaWVzKCkpKTtcbiAgICAgIH0sXG4gICAgfSxcbiAgfSlcbiAgdmFyaWFibGVzID0gbmV3IE1hcCgpO1xuXG4gIEBwcm9wZXJ0eSgpXG4gIG1pblN1Z2dlc3Rpb25MZW46IG51bWJlciA9IDI7XG5cbiAgaGFuZGxlQ2hhbmdlKGV2ZW50OiBJbnB1dEV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIHRoaXMubGFzdElucHV0VHlwZSA9IGV2ZW50LmlucHV0VHlwZTtcbiAgICB0aGlzLl9jb250ZW50ID0gKGV2ZW50LnRhcmdldCBhcyBIVE1MRGl2RWxlbWVudCkuaW5uZXJUZXh0O1xuICAgIHRoaXMucGFyc2VJbnB1dCgpO1xuXG4gICAgKGV2ZW50LnRhcmdldCBhcyBIVE1MRGl2RWxlbWVudCkuZm9jdXMoKTtcbiAgfVxuXG4gIGhhbmRsZVRhYihldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgIGlmIChldmVudC5jb2RlID09IFwiVGFiXCIgJiYgdGhpcy5fcmVjb21tZW5kYXRpb25zPy5sZW5ndGggPT0gMSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMucGFyc2VJbnB1dCh0aGlzLl9yZWNvbW1lbmRhdGlvbnNbMF0pO1xuICAgIH1cbiAgfVxuXG4gIG9uQ2xpY2tSZWNvbW1lbmRhdGlvbihyZWNvbW1lbmRhdGlvbjogc3RyaW5nKSB7XG4gICAgbGV0IGVkaXRvciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwid3lzaXd5Zy1lZGl0b3JcIik7XG4gICAgaWYgKCFlZGl0b3IpIHJldHVybjtcblxuICAgIHRoaXMucGFyc2VJbnB1dChyZWNvbW1lbmRhdGlvbik7XG4gICAgdGhpcy5jdXJyZW50Q3Vyc29yUG9zaXRpb24gPSBudWxsO1xuICB9XG5cbiAgcGFyc2VJbnB1dChhZGRSZWNvbW1lbmRhdGlvbjogc3RyaW5nIHwgbnVsbCA9IG51bGwpIHtcbiAgICBsZXQgZWRpdG9yID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ3eXNpd3lnLWVkaXRvclwiKTtcbiAgICBpZiAoIWVkaXRvcikgcmV0dXJuO1xuXG4gICAgdGhpcy5jdXJyZW50Q3Vyc29yUG9zaXRpb24gPSBhZGRSZWNvbW1lbmRhdGlvblxuICAgICAgPyB0aGlzLmN1cnJlbnRDdXJzb3JQb3NpdGlvblxuICAgICAgOiBDdXJzb3IuZ2V0Q2FyZXQoZWRpdG9yKTtcblxuICAgIGNvbnN0IHBhcnNlT3V0cHV0ID0gdGhpcy5fcGFyc2VyLnBhcnNlSW5wdXQoXG4gICAgICB0aGlzLl9jb250ZW50LFxuICAgICAgdGhpcy5jdXJyZW50Q3Vyc29yUG9zaXRpb24sXG4gICAgICBhZGRSZWNvbW1lbmRhdGlvblxuICAgICk7XG5cbiAgICB0aGlzLl9yZWNvbW1lbmRhdGlvbnMgPSBwYXJzZU91dHB1dC5yZWNvbW1lbmRhdGlvbnM7XG4gICAgdGhpcy5fZm9ybWF0dGVkQ29udGVudCA9IHBhcnNlT3V0cHV0LmZvcm1hdHRlZENvbnRlbnQ7XG4gICAgdGhpcy5fZXJyb3JTdHIgPSBwYXJzZU91dHB1dC5lcnJvclN0cjtcblxuICAgIC8qKiAgXG4gICAgICogRG9uJ3QgbW9kaWZ5IHRoZSB0ZXh0IHN0cmVhbSBtYW51YWxseSBpZiB0aGUgdGV4dCBpcyBiZWluZyBjb21wb3NlZCxcbiAgICAgKiB1bmxlc3MgdGhlIHVzZXIgbWFudWFsbHkgY2hvb3NlcyB0byBkbyBzbyBieSBzZWxlY3RpbmcgYSBzdWdnZXN0aW9uLlxuICAgICAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3czYy9pbnB1dC1ldmVudHMvaXNzdWVzLzg2XG4gICAgICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vdzNjL2lucHV0LWV2ZW50cy9wdWxsLzEyMlxuICAgICAqIEBzZWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Njg5NTQxXG4gICAgICogKi9cblxuICAgIGlmICh0aGlzLmxhc3RJbnB1dFR5cGUgIT0gXCJpbnNlcnRDb21wb3NpdGlvblRleHRcIiB8fCBhZGRSZWNvbW1lbmRhdGlvbikge1xuICAgICAgZWRpdG9yLmlubmVySFRNTCA9IHBhcnNlT3V0cHV0LmZvcm1hdHRlZFN0cmluZyE7XG4gICAgfVxuXG4gICAgdGhpcy5fY29udGVudCA9IChlZGl0b3IgYXMgSFRNTERpdkVsZW1lbnQpLmlubmVyVGV4dDtcblxuICAgIGlmIChhZGRSZWNvbW1lbmRhdGlvbikge1xuICAgICAgdGhpcy5fcmVjb21tZW5kYXRpb25zID0gbnVsbDtcbiAgICAgIHRoaXMuY3VycmVudEN1cnNvclBvc2l0aW9uID0gcGFyc2VPdXRwdXQubmV3Q3Vyc29yUG9zaXRpb247XG4gICAgfVxuXG4gICAgQ3Vyc29yLnNldENhcmV0KHRoaXMuY3VycmVudEN1cnNvclBvc2l0aW9uISwgZWRpdG9yKTtcbiAgICBlZGl0b3I/LmZvY3VzKCk7XG5cbiAgICB0aGlzLmN1cnJlbnRDdXJzb3JSZWN0ID0gQ3Vyc29yLmdldEN1cnNvclJlY3QoKTtcbiAgICB0aGlzLnJlcXVlc3RVcGRhdGUoKTtcbiAgfVxuXG4gIHJlcXVlc3RDYWxjdWxhdGUoKSB7XG4gICAgaWYgKHRoaXMuX3BhcnNlci5wYXJzZUlucHV0KHRoaXMuX2NvbnRlbnQpLmVycm9yU3RyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgY2FsY3VsYXRlZFJlc3VsdCA9IHRoaXMuX3BhcnNlci5jYWxjdWxhdGUodGhpcy5fY29udGVudCk7XG5cbiAgICB0aGlzLl9jb250ZW50ID0gdGhpcy5fcGFyc2VyLmFkZFBhcmVudGhlc2VzKHRoaXMuX2NvbnRlbnQpID8/IHRoaXMuX2NvbnRlbnQ7XG4gICAgdGhpcy5wYXJzZUlucHV0KCk7XG5cbiAgICB0aGlzLl9jYWxjdWxhdGVkUmVzdWx0ID0gY2FsY3VsYXRlZFJlc3VsdCA/PyBOYU47XG4gICAgdGhpcy5fZXJyb3JTdHIgPVxuICAgICAgY2FsY3VsYXRlZFJlc3VsdCA9PSB1bmRlZmluZWRcbiAgICAgICAgPyBcIkRpdmlzaW9uIGJ5IHplcm8gZW5jb3VudGVyZWRcIlxuICAgICAgICA6IHRoaXMuX2Vycm9yU3RyO1xuXG4gICAgdGhpcy5fcmVjb21tZW5kYXRpb25zID0gbnVsbDtcbiAgICB0aGlzLnJlcXVlc3RVcGRhdGUoKTtcbiAgfVxuXG4gIHJlcXVlc3RGb3JtYXQoKSB7XG4gICAgdGhpcy5fY29udGVudCA9IHRoaXMuX3BhcnNlci5hZGRQYXJlbnRoZXNlcyh0aGlzLl9jb250ZW50KSA/PyB0aGlzLl9jb250ZW50O1xuICAgIHRoaXMucGFyc2VJbnB1dCgpO1xuICAgIHRoaXMuX3JlY29tbWVuZGF0aW9ucyA9IG51bGw7XG4gICAgdGhpcy5yZXF1ZXN0VXBkYXRlKCk7XG4gIH1cblxuICAvLyBEaXNhYmxlIHNoYWRvdy1yb290IGFzIGl0IG1lc3NlcyB1cCBjdXJzb3IgZGV0ZWN0aW9uLlxuICBjcmVhdGVSZW5kZXJSb290KCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBodG1sYFxuICAgICAgPHN0eWxlPlxuICAgICAgICAke0Zvcm11bGFFZGl0b3JTdHlsZXN9XG4gICAgICAgICR7VGV4dEJ1dHRvblN0eWxlc31cbiAgICAgIDwvc3R5bGU+XG4gICAgICA8ZGl2XG4gICAgICAgIGNvbnRlbnRlZGl0YWJsZVxuICAgICAgICBpZD1cInd5c2l3eWctZWRpdG9yXCJcbiAgICAgICAgc3BlbGxjaGVjaz1cImZhbHNlXCJcbiAgICAgICAgYXV0b2NvbXBsZXRlPVwib2ZmXCJcbiAgICAgICAgQGlucHV0PSR7dGhpcy5oYW5kbGVDaGFuZ2V9XG4gICAgICAgIEBrZXlkb3duPSR7dGhpcy5oYW5kbGVUYWJ9XG4gICAgICA+PC9kaXY+XG4gICAgICAke3RoaXMuX3JlY29tbWVuZGF0aW9uc1xuICAgICAgICA/IGh0bWxgIDxzdWdnZXN0aW9uLW1lbnVcbiAgICAgICAgICAgIHN0eWxlPVwiXG4gICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsgXG4gICAgICAgICAgICAgIGxlZnQ6ICR7dGhpcy5jdXJyZW50Q3Vyc29yUmVjdD8ubGVmdCArIFwicHhcIn07IFxuICAgICAgICAgICAgICB0b3A6ICR7KHRoaXMuY3VycmVudEN1cnNvclJlY3Q/LnRvcCA/PyAwKSArXG4gICAgICAgICAgICB3aW5kb3cuc2Nyb2xsWSArXG4gICAgICAgICAgICBcInB4XCJ9O1xuICAgICAgICAgICAgXCJcbiAgICAgICAgICAgIC5yZWNvbW1lbmRhdGlvbnM9JHt0aGlzLl9yZWNvbW1lbmRhdGlvbnN9XG4gICAgICAgICAgICAub25DbGlja1JlY29tbWVuZGF0aW9uPSR7KGU6IGFueSkgPT4gdGhpcy5vbkNsaWNrUmVjb21tZW5kYXRpb24oZSl9XG4gICAgICAgICAgPjwvc3VnZ2VzdGlvbi1tZW51PmBcbiAgICAgICAgOiBodG1sYGB9XG4gICAgICA8ZGl2IGlkPVwid3lzaXd5Zy1lcnJcIiBjbGFzcz1cIiR7dGhpcy5fZXJyb3JTdHIgPz8gXCJ3eXNpd3lnLW5vLWVyclwifVwiPlxuICAgICAgICAke3RoaXMuX2Vycm9yU3RyID8/IFwiTm8gRXJyb3JzXCJ9XG4gICAgICA8L2Rpdj5cbiAgICAgIDxidXR0b24gY2xhc3M9XCJwcmltYXJ5LXRleHQtYnV0dG9uXCIgQGNsaWNrPSR7dGhpcy5yZXF1ZXN0Q2FsY3VsYXRlfT5cbiAgICAgICAgQ2FsY3VsYXRlXG4gICAgICA8L2J1dHRvbj5cbiAgICAgIDxidXR0b24gY2xhc3M9XCJwcmltYXJ5LXRleHQtYnV0dG9uXCIgQGNsaWNrPSR7dGhpcy5yZXF1ZXN0Rm9ybWF0fT5cbiAgICAgICAgRm9ybWF0XG4gICAgICA8L2J1dHRvbj5cbiAgICAgIDxwPiR7dGhpcy5fY2FsY3VsYXRlZFJlc3VsdH08L3A+XG4gICAgYDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTGl0RWxlbWVudCwgaHRtbCB9IGZyb20gXCJsaXRcIjtcbmltcG9ydCB7IGN1c3RvbUVsZW1lbnQgfSBmcm9tIFwibGl0LWVsZW1lbnRcIjtcbmltcG9ydCB7IEZvcm11bGFFZGl0b3IgfSBmcm9tIFwiLi4vLi4vcGFja2FnZXMvZm9ybXVsYS1lZGl0b3Ivc3JjL2Zvcm11bGEtZWRpdG9yXCI7XG5cbkBjdXN0b21FbGVtZW50KFwic2hvd2Nhc2UtZ2FsbGVyeVwiKVxuY2xhc3MgU2hvd2Nhc2VHYWxsZXJ5IGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gIGZtID0gbmV3IEZvcm11bGFFZGl0b3IoKTtcblxuICByZW5kZXIoKSB7XG4gICAgaHRtbGAgPGZvcm11bGEtZWRpdG9yPjwvZm9ybXVsYS1lZGl0b3I+IGA7XG4gIH1cbn1cblxuLy8gY3VzdG9tRWxlbWVudHMuZ2V0KCdzaG93Y2FzZS1nYWxsZXJ5JykgfHwgY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdzaG93Y2FzZS1nYWxsZXJ5JywgU2hvd2Nhc2VHYWxsZXJ5KTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuY29uc3QgZT1lPT5uPT5cImZ1bmN0aW9uXCI9PXR5cGVvZiBuPygoZSxuKT0+KGN1c3RvbUVsZW1lbnRzLmRlZmluZShlLG4pLG4pKShlLG4pOigoZSxuKT0+e2NvbnN0e2tpbmQ6dCxlbGVtZW50czpzfT1uO3JldHVybntraW5kOnQsZWxlbWVudHM6cyxmaW5pc2hlcihuKXtjdXN0b21FbGVtZW50cy5kZWZpbmUoZSxuKX19fSkoZSxuKTtleHBvcnR7ZSBhcyBjdXN0b21FbGVtZW50fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWN1c3RvbS1lbGVtZW50LmpzLm1hcFxuIl0sIm5hbWVzIjpbIndpbmRvdyIsIlNoYWRvd1Jvb3QiLCJTaGFkeUNTUyIsIm5hdGl2ZVNoYWRvdyIsIkRvY3VtZW50IiwicHJvdG90eXBlIiwiQ1NTU3R5bGVTaGVldCIsInMiLCJTeW1ib2wiLCJuIiwiV2Vha01hcCIsImNvbnN0cnVjdG9yIiwidCIsImUiLCJ0aGlzIiwiXyRjc3NSZXN1bHQkIiwiRXJyb3IiLCJjc3NUZXh0Iiwic3R5bGVTaGVldCIsIm8iLCJsZW5ndGgiLCJnZXQiLCJyZXBsYWNlU3luYyIsInNldCIsInRvU3RyaW5nIiwiYyIsImNzc1J1bGVzIiwiciIsInRydXN0ZWRUeXBlcyIsImgiLCJlbXB0eVNjcmlwdCIsInJlYWN0aXZlRWxlbWVudFBvbHlmaWxsU3VwcG9ydCIsInRvQXR0cmlidXRlIiwiaSIsIkJvb2xlYW4iLCJPYmplY3QiLCJBcnJheSIsIkpTT04iLCJzdHJpbmdpZnkiLCJmcm9tQXR0cmlidXRlIiwiTnVtYmVyIiwicGFyc2UiLCJhIiwibCIsImF0dHJpYnV0ZSIsInR5cGUiLCJTdHJpbmciLCJjb252ZXJ0ZXIiLCJyZWZsZWN0IiwiaGFzQ2hhbmdlZCIsImQiLCJ1IiwiSFRNTEVsZW1lbnQiLCJzdXBlciIsIl8kRWkiLCJNYXAiLCJpc1VwZGF0ZVBlbmRpbmciLCJoYXNVcGRhdGVkIiwiXyRFbCIsInN0YXRpYyIsImZpbmFsaXplIiwicHVzaCIsIm9ic2VydmVkQXR0cmlidXRlcyIsImVsZW1lbnRQcm9wZXJ0aWVzIiwiZm9yRWFjaCIsIl8kRXAiLCJfJEV2Iiwic3RhdGUiLCJub0FjY2Vzc29yIiwiaGFzT3duUHJvcGVydHkiLCJnZXRQcm9wZXJ0eURlc2NyaXB0b3IiLCJkZWZpbmVQcm9wZXJ0eSIsInJlcXVlc3RVcGRhdGUiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0UHJvdG90eXBlT2YiLCJwcm9wZXJ0aWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImNyZWF0ZVByb3BlcnR5IiwiZWxlbWVudFN0eWxlcyIsImZpbmFsaXplU3R5bGVzIiwic3R5bGVzIiwiaXNBcnJheSIsIlNldCIsImZsYXQiLCJyZXZlcnNlIiwidW5zaGlmdCIsInRvTG93ZXJDYXNlIiwiXyRFXyIsIlByb21pc2UiLCJlbmFibGVVcGRhdGluZyIsIl8kQUwiLCJfJEVnIiwiYWRkQ29udHJvbGxlciIsIl8kRVMiLCJyZW5kZXJSb290IiwiaXNDb25uZWN0ZWQiLCJob3N0Q29ubmVjdGVkIiwiY2FsbCIsInJlbW92ZUNvbnRyb2xsZXIiLCJzcGxpY2UiLCJpbmRleE9mIiwiY3JlYXRlUmVuZGVyUm9vdCIsInNoYWRvd1Jvb3QiLCJhdHRhY2hTaGFkb3ciLCJzaGFkb3dSb290T3B0aW9ucyIsImFkb3B0ZWRTdHlsZVNoZWV0cyIsIm1hcCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImxpdE5vbmNlIiwic2V0QXR0cmlidXRlIiwidGV4dENvbnRlbnQiLCJhcHBlbmRDaGlsZCIsImNvbm5lY3RlZENhbGxiYWNrIiwiZGlzY29ubmVjdGVkQ2FsbGJhY2siLCJob3N0RGlzY29ubmVjdGVkIiwiYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrIiwiXyRBSyIsIl8kRU8iLCJyZW1vdmVBdHRyaWJ1dGUiLCJnZXRQcm9wZXJ0eU9wdGlvbnMiLCJoYXMiLCJfJEVDIiwiXyRFaiIsImFzeW5jIiwicmVqZWN0Iiwic2NoZWR1bGVVcGRhdGUiLCJwZXJmb3JtVXBkYXRlIiwic2hvdWxkVXBkYXRlIiwid2lsbFVwZGF0ZSIsImhvc3RVcGRhdGUiLCJ1cGRhdGUiLCJfJEVrIiwiXyRBRSIsImhvc3RVcGRhdGVkIiwiZmlyc3RVcGRhdGVkIiwidXBkYXRlZCIsInVwZGF0ZUNvbXBsZXRlIiwiZ2V0VXBkYXRlQ29tcGxldGUiLCJtb2RlIiwiUmVhY3RpdmVFbGVtZW50IiwicmVhY3RpdmVFbGVtZW50VmVyc2lvbnMiLCJjcmVhdGVQb2xpY3kiLCJjcmVhdGVIVE1MIiwiTWF0aCIsInJhbmRvbSIsInNsaWNlIiwiY3JlYXRlQ29tbWVudCIsImYiLCJfIiwibSIsInAiLCJSZWdFeHAiLCJnIiwiJCIsInkiLCJ3IiwiXyRsaXRUeXBlJCIsInN0cmluZ3MiLCJ2YWx1ZXMiLCJ4IiwiVCIsImZvciIsIkEiLCJFIiwiQyIsImNyZWF0ZVRyZWVXYWxrZXIiLCJQIiwidiIsImxhc3RJbmRleCIsImV4ZWMiLCJ0ZXN0Iiwic3RhcnRzV2l0aCIsIlYiLCJwYXJ0cyIsImVsIiwiY3VycmVudE5vZGUiLCJjb250ZW50IiwiZmlyc3RDaGlsZCIsInJlbW92ZSIsImFwcGVuZCIsImNoaWxkTm9kZXMiLCJuZXh0Tm9kZSIsIm5vZGVUeXBlIiwiaGFzQXR0cmlidXRlcyIsImdldEF0dHJpYnV0ZU5hbWVzIiwiZW5kc1dpdGgiLCJnZXRBdHRyaWJ1dGUiLCJzcGxpdCIsImluZGV4IiwibmFtZSIsImN0b3IiLCJrIiwiSSIsIkwiLCJSIiwidGFnTmFtZSIsImRhdGEiLCJpbm5lckhUTUwiLCJOIiwiXyRDbyIsIl8kQ2wiLCJfJGxpdERpcmVjdGl2ZSQiLCJfJEFPIiwiXyRBVCIsIl8kQVMiLCJfJEFWIiwiXyRBTiIsIl8kQUQiLCJfJEFNIiwicGFyZW50Tm9kZSIsIl8kQVUiLCJjcmVhdGlvblNjb3BlIiwiaW1wb3J0Tm9kZSIsIk0iLCJuZXh0U2libGluZyIsInoiLCJfJEFJIiwiXyRBSCIsIl8kQUEiLCJfJEFCIiwib3B0aW9ucyIsIl8kQ3AiLCJzdGFydE5vZGUiLCJlbmROb2RlIiwiXyRBUiIsIml0ZXJhdG9yIiwiaW5zZXJ0QmVmb3JlIiwiY3JlYXRlVGV4dE5vZGUiLCJfJEFDIiwiXyRBUCIsInNldENvbm5lY3RlZCIsImVsZW1lbnQiLCJmaWxsIiwiaiIsImFyZ3VtZW50cyIsIkgiLCJjYXB0dXJlIiwib25jZSIsInBhc3NpdmUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhbmRsZUV2ZW50IiwiaG9zdCIsImxpdEh0bWxQb2x5ZmlsbFN1cHBvcnQiLCJsaXRIdG1sVmVyc2lvbnMiLCJyZW5kZXJPcHRpb25zIiwiXyREbyIsInJlbmRlckJlZm9yZSIsInJlbmRlciIsIl8kbGl0UGFydCQiLCJmaW5hbGl6ZWQiLCJfJGxpdEVsZW1lbnQkIiwiZ2xvYmFsVGhpcyIsImxpdEVsZW1lbnRIeWRyYXRlU3VwcG9ydCIsIkxpdEVsZW1lbnQiLCJsaXRFbGVtZW50UG9seWZpbGxTdXBwb3J0IiwibGl0RWxlbWVudFZlcnNpb25zIiwiSFRNTFNsb3RFbGVtZW50IiwiYXNzaWduZWRFbGVtZW50cyIsImNvbnNvbGUiLCJ3YXJuIiwicmVkdWNlIiwiY3VzdG9tRWxlbWVudHMiLCJkZWZpbmUiLCJraW5kIiwiZWxlbWVudHMiLCJmaW5pc2hlciIsImRlc2NyaXB0b3IiLCJrZXkiLCJwbGFjZW1lbnQiLCJvcmlnaW5hbEtleSIsImluaXRpYWxpemVyIiwiRm9ybXVsYUVkaXRvclN0eWxlcyIsIlRleHRCdXR0b25TdHlsZXMiLCJNQVhfRFAiLCJOQU1FIiwiSU5WQUxJRCIsIklOVkFMSURfRFAiLCJJTlZBTElEX1JNIiwiRElWX0JZX1pFUk8iLCJVTkRFRklORUQiLCJOVU1FUklDIiwicm91bmQiLCJzZCIsInJtIiwibW9yZSIsInhjIiwiUk0iLCJwb3AiLCJkb0V4cG9uZW50aWFsIiwiaXNOb256ZXJvIiwiam9pbiIsImNoYXJBdCIsImFicyIsImNtcCIsImlzbmVnIiwieWMiLCJkaXYiLCJCaWciLCJiIiwiZHAiLCJEUCIsImJsIiwiYnQiLCJyaSIsImJ6IiwiYWkiLCJhbCIsInJsIiwicSIsInFjIiwicWkiLCJzaGlmdCIsImVxIiwiZ3QiLCJndGUiLCJsdCIsImx0ZSIsIm1pbnVzIiwic3ViIiwieGx0eSIsInBsdXMiLCJ4ZSIsInllIiwibW9kIiwieWd0eCIsInRpbWVzIiwibmVnIiwiYWRkIiwicG93Iiwib25lIiwicHJlYyIsInNxcnQiLCJoYWxmIiwidG9FeHBvbmVudGlhbCIsIm11bCIsInRvRml4ZWQiLCJ0b0pTT04iLCJORSIsIlBFIiwidG9OdW1iZXIiLCJzdHJpY3QiLCJ0b1ByZWNpc2lvbiIsInZhbHVlT2YiLCJfQmlnXyIsIlR5cGVFcnJvciIsIm5sIiwicmVwbGFjZSIsInNlYXJjaCIsInN1YnN0cmluZyIsInJvdW5kRG93biIsInJvdW5kSGFsZlVwIiwicm91bmRIYWxmRXZlbiIsInJvdW5kVXAiLCJTdGFjayIsIl9pbm5lciIsIml0ZW0iLCJ0b3AiLCJhdCIsImlzRW1wdHkiLCJwcmludCIsImxvZyIsIlF1ZXVlIiwiX2hlYWQiLCJfdGFpbCIsImVucXVldWUiLCJkZXF1ZXVlIiwicGVlayIsIkV4cGVjdGF0aW9uIiwiUmVjb21tZW5kZXIiLCJ2YXJpYWJsZXMiLCJtaW5TdWdnZXN0aW9uTGVuIiwiX21pbmludW1TdWdnZXN0aW9uTGVuZ3RoIiwiX3RyaWUiLCJUcmllTm9kZSIsInZhcmlhYmxlIiwiaW5zZXJ0Iiwid29yZCIsInBvc2l0aW9uIiwibm9kZSIsInVuZGVmaW5lZCIsImdldENoaWxkIiwiYWRkQ2hpbGQiLCJnZXRSZWNvbW1lbmRhdGlvbiIsInJlY29tbWVuZGF0aW9ucyIsImN1cnJlbnRQb3NpdGlvbiIsIl90cmF2ZXJzZUFuZEdldCIsImN1cnJlbnRTdHJpbmciLCJjaGlsZCIsImNoaWxkcmVuIiwiX2NoaWxkcmVuIiwiY2hhciIsIlBhcnNlciIsIm1hdGhlbWF0aWNhbE9wZXJhdG9ycyIsIm9wZXJhdG9yUHJlY2VkZW5jZSIsIl9yZWNvbW1lbmRlciIsInBhcnNlSW5wdXQiLCJmb3JtdWxhIiwicHJldkN1clBvcyIsInJlY29tbWVuZGF0aW9uIiwidG9rZW5zIiwicGFyZW50aGVzZXMiLCJmb3JtYXR0ZWRTdHJpbmciLCJleHBlY3RhdGlvbiIsIlZBUklBQkxFIiwiYnJhY2tldENvdW50IiwicHJldmlvdXNUb2tlbiIsInBhcnNlT3V0cHV0IiwiZm9ybWF0dGVkQ29udGVudCIsIm5ld0N1cnNvclBvc2l0aW9uIiwiZXJyb3JTdHIiLCJ0b2tlbiIsImlzTnVtYmVyIiwiaXNOYU4iLCJpc09wZXJhdG9yIiwiaXNTcGFjZSIsInRyaW0iLCJpc0JyYWNrZXQiLCJoYXNDdXJzb3IiLCJtaW4iLCJ0b2tlbkNsYXNzTmFtZSIsIk9QRVJBVE9SIiwiZG9jIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwicXVlcnlTZWxlY3RvciIsImJ1aWxkUlBOIiwiZmlsdGVyIiwiY2FycmllZFRva2VuIiwicGFyc2VkVG9rZW5zIiwib3BlcmF0b3JTdGFjayIsIm91dHB1dFF1ZXVlIiwiYWRkUGFyZW50aGVzZXMiLCJycG4iLCJsZXhlZFJQTiIsInJlc3VsdFN0YWNrIiwic3ltYm9sIiwicGFyc2VkTGVmdEV4cHJlc3Npb24iLCJwYXJzZWRSaWdodEV4cHJlc3Npb24iLCJwYXJzZUZsb2F0IiwiaXNGaW5pdGUiLCJrZXlzIiwiaW5jbHVkZXMiLCJyaWdodEV4cHJlc3Npb24iLCJsZWZ0RXhwcmVzc2lvbiIsIm9wZXJhdG9yQSIsIm9wZXJhdG9yQiIsImNhbGN1bGF0ZSIsImNhbGNTdGFjayIsImZyb250SXRlbSIsIm9wZXJhdG9yIiwibnVtQiIsIm51bUEiLCJlcnIiLCJDdXJzb3IiLCJwYXJlbnRFbGVtZW50Iiwic2VsZWN0aW9uIiwiZ2V0U2VsZWN0aW9uIiwiY2hhckNvdW50IiwiZm9jdXNOb2RlIiwiX2lzQ2hpbGRPZiIsImZvY3VzT2Zmc2V0IiwicHJldmlvdXNTaWJsaW5nIiwiY2hhcnMiLCJyYW5nZSIsIl9jcmVhdGVSYW5nZSIsImNvdW50IiwiY29sbGFwc2UiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsImNyZWF0ZVJhbmdlIiwic2VsZWN0Tm9kZSIsInNldFN0YXJ0Iiwic2V0RW5kIiwiTm9kZSIsIlRFWFRfTk9ERSIsImxwIiwiZ2V0UmFuZ2VBdCIsImdldENsaWVudFJlY3RzIiwiZ2V0Q2FyZXQiLCJwcmVmaXgiLCJjbG9uZVJhbmdlIiwic2VsZWN0Tm9kZUNvbnRlbnRzIiwiZW5kQ29udGFpbmVyIiwiZW5kT2Zmc2V0Iiwic2V0Q2FyZXQiLCJwb3MiLCJwYXJlbnQiLCJzZWwiLCJTdWdnZXN0aW9uTWVudSIsIm9uQ2xpY2tSZWNvbW1lbmRhdGlvbiIsImhhbmRsZUtleWRvd24iLCJldmVudCIsImNvZGUiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsIkZvcm11bGFFZGl0b3IiLCJfY29udGVudCIsIl9mb3JtYXR0ZWRDb250ZW50IiwiX3JlY29tbWVuZGF0aW9ucyIsIl9lcnJvclN0ciIsIl9jYWxjdWxhdGVkUmVzdWx0IiwiY3VycmVudEN1cnNvclBvc2l0aW9uIiwiY3VycmVudEN1cnNvclJlY3QiLCJsYXN0SW5wdXRUeXBlIiwiX3BhcnNlciIsIl9jaGFuZ2VkUHJvcGVydGllcyIsImhhbmRsZUNoYW5nZSIsImlucHV0VHlwZSIsInRhcmdldCIsImlubmVyVGV4dCIsImZvY3VzIiwiaGFuZGxlVGFiIiwiZ2V0RWxlbWVudEJ5SWQiLCJhZGRSZWNvbW1lbmRhdGlvbiIsImVkaXRvciIsImdldEN1cnNvclJlY3QiLCJyZXF1ZXN0Q2FsY3VsYXRlIiwiY2FsY3VsYXRlZFJlc3VsdCIsIk5hTiIsInJlcXVlc3RGb3JtYXQiLCJsZWZ0Iiwic2Nyb2xsWSIsInZhbHVlIiwiZnJvbSIsImVudHJpZXMiLCJTaG93Y2FzZUdhbGxlcnkiLCJmbSJdLCJzb3VyY2VSb290IjoiIn0=