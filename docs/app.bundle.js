/*! For license information please see app.bundle.js.LICENSE.txt */
(()=>{"use strict";const t=window,e=t.ShadowRoot&&(void 0===t.ShadyCSS||t.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,r=Symbol(),i=new WeakMap;class o{constructor(t,e,i){if(this._$cssResult$=!0,i!==r)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const r=this.t;if(e&&void 0===t){const e=void 0!==r&&1===r.length;e&&(t=i.get(r)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),e&&i.set(r,t))}return t}toString(){return this.cssText}}const s=e?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const r of t.cssRules)e+=r.cssText;return(t=>new o("string"==typeof t?t:t+"",void 0,r))(e)})(t):t;var n;const l=window,a=l.trustedTypes,h=a?a.emptyScript:"",c=l.reactiveElementPolyfillSupport,d={toAttribute(t,e){switch(e){case Boolean:t=t?h:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){let r=t;switch(e){case Boolean:r=null!==t;break;case Number:r=null===t?null:Number(t);break;case Object:case Array:try{r=JSON.parse(t)}catch(t){r=null}}return r}},u=(t,e)=>e!==t&&(e==e||t==t),p={attribute:!0,type:String,converter:d,reflect:!1,hasChanged:u},f="finalized";class v extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(t){var e;this.finalize(),(null!==(e=this.h)&&void 0!==e?e:this.h=[]).push(t)}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((e,r)=>{const i=this._$Ep(r,e);void 0!==i&&(this._$Ev.set(i,r),t.push(i))})),t}static createProperty(t,e=p){if(e.state&&(e.attribute=!1),this.finalize(),this.elementProperties.set(t,e),!e.noAccessor&&!this.prototype.hasOwnProperty(t)){const r="symbol"==typeof t?Symbol():"__"+t,i=this.getPropertyDescriptor(t,r,e);void 0!==i&&Object.defineProperty(this.prototype,t,i)}}static getPropertyDescriptor(t,e,r){return{get(){return this[e]},set(i){const o=this[t];this[e]=i,this.requestUpdate(t,o,r)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||p}static finalize(){if(this.hasOwnProperty(f))return!1;this[f]=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),void 0!==t.h&&(this.h=[...t.h]),this.elementProperties=new Map(t.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const t=this.properties,e=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const r of e)this.createProperty(r,t[r])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(t){const e=[];if(Array.isArray(t)){const r=new Set(t.flat(1/0).reverse());for(const t of r)e.unshift(s(t))}else void 0!==t&&e.push(s(t));return e}static _$Ep(t,e){const r=e.attribute;return!1===r?void 0:"string"==typeof r?r:"string"==typeof t?t.toLowerCase():void 0}u(){var t;this._$E_=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(t=this.constructor.h)||void 0===t||t.forEach((t=>t(this)))}addController(t){var e,r;(null!==(e=this._$ES)&&void 0!==e?e:this._$ES=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(r=t.hostConnected)||void 0===r||r.call(t))}removeController(t){var e;null===(e=this._$ES)||void 0===e||e.splice(this._$ES.indexOf(t)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((t,e)=>{this.hasOwnProperty(e)&&(this._$Ei.set(e,this[e]),delete this[e])}))}createRenderRoot(){var r;const i=null!==(r=this.shadowRoot)&&void 0!==r?r:this.attachShadow(this.constructor.shadowRootOptions);return((r,i)=>{e?r.adoptedStyleSheets=i.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):i.forEach((e=>{const i=document.createElement("style"),o=t.litNonce;void 0!==o&&i.setAttribute("nonce",o),i.textContent=e.cssText,r.appendChild(i)}))})(i,this.constructor.elementStyles),i}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostConnected)||void 0===e?void 0:e.call(t)}))}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostDisconnected)||void 0===e?void 0:e.call(t)}))}attributeChangedCallback(t,e,r){this._$AK(t,r)}_$EO(t,e,r=p){var i;const o=this.constructor._$Ep(t,r);if(void 0!==o&&!0===r.reflect){const s=(void 0!==(null===(i=r.converter)||void 0===i?void 0:i.toAttribute)?r.converter:d).toAttribute(e,r.type);this._$El=t,null==s?this.removeAttribute(o):this.setAttribute(o,s),this._$El=null}}_$AK(t,e){var r;const i=this.constructor,o=i._$Ev.get(t);if(void 0!==o&&this._$El!==o){const t=i.getPropertyOptions(o),s="function"==typeof t.converter?{fromAttribute:t.converter}:void 0!==(null===(r=t.converter)||void 0===r?void 0:r.fromAttribute)?t.converter:d;this._$El=o,this[o]=s.fromAttribute(e,t.type),this._$El=null}}requestUpdate(t,e,r){let i=!0;void 0!==t&&(((r=r||this.constructor.getPropertyOptions(t)).hasChanged||u)(this[t],e)?(this._$AL.has(t)||this._$AL.set(t,e),!0===r.reflect&&this._$El!==t&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(t,r))):i=!1),!this.isUpdatePending&&i&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((t,e)=>this[e]=t)),this._$Ei=void 0);let e=!1;const r=this._$AL;try{e=this.shouldUpdate(r),e?(this.willUpdate(r),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostUpdate)||void 0===e?void 0:e.call(t)})),this.update(r)):this._$Ek()}catch(t){throw e=!1,this._$Ek(),t}e&&this._$AE(r)}willUpdate(t){}_$AE(t){var e;null===(e=this._$ES)||void 0===e||e.forEach((t=>{var e;return null===(e=t.hostUpdated)||void 0===e?void 0:e.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(t){return!0}update(t){void 0!==this._$EC&&(this._$EC.forEach(((t,e)=>this._$EO(e,this[e],t))),this._$EC=void 0),this._$Ek()}updated(t){}firstUpdated(t){}}var g;v[f]=!0,v.elementProperties=new Map,v.elementStyles=[],v.shadowRootOptions={mode:"open"},null==c||c({ReactiveElement:v}),(null!==(n=l.reactiveElementVersions)&&void 0!==n?n:l.reactiveElementVersions=[]).push("1.6.2");const m=window,y=m.trustedTypes,_=y?y.createPolicy("lit-html",{createHTML:t=>t}):void 0,$="$lit$",b=`lit$${(Math.random()+"").slice(9)}$`,A="?"+b,w=`<${A}>`,x=document,E=()=>x.createComment(""),S=t=>null===t||"object"!=typeof t&&"function"!=typeof t,C=Array.isArray,P="[ \t\n\f\r]",R=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,k=/-->/g,U=/>/g,N=RegExp(`>|${P}(?:([^\\s"'>=/]+)(${P}*=${P}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),O=/'/g,T=/"/g,z=/^(?:script|style|textarea|title)$/i,H=t=>(e,...r)=>({_$litType$:t,strings:e,values:r}),M=H(1),j=(H(2),Symbol.for("lit-noChange")),D=Symbol.for("lit-nothing"),I=new WeakMap,L=x.createTreeWalker(x,129,null,!1),B=(t,e)=>{const r=t.length-1,i=[];let o,s=2===e?"<svg>":"",n=R;for(let e=0;e<r;e++){const r=t[e];let l,a,h=-1,c=0;for(;c<r.length&&(n.lastIndex=c,a=n.exec(r),null!==a);)c=n.lastIndex,n===R?"!--"===a[1]?n=k:void 0!==a[1]?n=U:void 0!==a[2]?(z.test(a[2])&&(o=RegExp("</"+a[2],"g")),n=N):void 0!==a[3]&&(n=N):n===N?">"===a[0]?(n=null!=o?o:R,h=-1):void 0===a[1]?h=-2:(h=n.lastIndex-a[2].length,l=a[1],n=void 0===a[3]?N:'"'===a[3]?T:O):n===T||n===O?n=N:n===k||n===U?n=R:(n=N,o=void 0);const d=n===N&&t[e+1].startsWith("/>")?" ":"";s+=n===R?r+w:h>=0?(i.push(l),r.slice(0,h)+$+r.slice(h)+b+d):r+b+(-2===h?(i.push(void 0),e):d)}const l=s+(t[r]||"<?>")+(2===e?"</svg>":"");if(!Array.isArray(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return[void 0!==_?_.createHTML(l):l,i]};class q{constructor({strings:t,_$litType$:e},r){let i;this.parts=[];let o=0,s=0;const n=t.length-1,l=this.parts,[a,h]=B(t,e);if(this.el=q.createElement(a,r),L.currentNode=this.el.content,2===e){const t=this.el.content,e=t.firstChild;e.remove(),t.append(...e.childNodes)}for(;null!==(i=L.nextNode())&&l.length<n;){if(1===i.nodeType){if(i.hasAttributes()){const t=[];for(const e of i.getAttributeNames())if(e.endsWith($)||e.startsWith(b)){const r=h[s++];if(t.push(e),void 0!==r){const t=i.getAttribute(r.toLowerCase()+$).split(b),e=/([.?@])?(.*)/.exec(r);l.push({type:1,index:o,name:e[2],strings:t,ctor:"."===e[1]?K:"?"===e[1]?G:"@"===e[1]?X:J})}else l.push({type:6,index:o})}for(const e of t)i.removeAttribute(e)}if(z.test(i.tagName)){const t=i.textContent.split(b),e=t.length-1;if(e>0){i.textContent=y?y.emptyScript:"";for(let r=0;r<e;r++)i.append(t[r],E()),L.nextNode(),l.push({type:2,index:++o});i.append(t[e],E())}}}else if(8===i.nodeType)if(i.data===A)l.push({type:2,index:o});else{let t=-1;for(;-1!==(t=i.data.indexOf(b,t+1));)l.push({type:7,index:o}),t+=b.length-1}o++}}static createElement(t,e){const r=x.createElement("template");return r.innerHTML=t,r}}function V(t,e,r=t,i){var o,s,n,l;if(e===j)return e;let a=void 0!==i?null===(o=r._$Co)||void 0===o?void 0:o[i]:r._$Cl;const h=S(e)?void 0:e._$litDirective$;return(null==a?void 0:a.constructor)!==h&&(null===(s=null==a?void 0:a._$AO)||void 0===s||s.call(a,!1),void 0===h?a=void 0:(a=new h(t),a._$AT(t,r,i)),void 0!==i?(null!==(n=(l=r)._$Co)&&void 0!==n?n:l._$Co=[])[i]=a:r._$Cl=a),void 0!==a&&(e=V(t,a._$AS(t,e.values),a,i)),e}class F{constructor(t,e){this._$AV=[],this._$AN=void 0,this._$AD=t,this._$AM=e}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(t){var e;const{el:{content:r},parts:i}=this._$AD,o=(null!==(e=null==t?void 0:t.creationScope)&&void 0!==e?e:x).importNode(r,!0);L.currentNode=o;let s=L.nextNode(),n=0,l=0,a=i[0];for(;void 0!==a;){if(n===a.index){let e;2===a.type?e=new W(s,s.nextSibling,this,t):1===a.type?e=new a.ctor(s,a.name,a.strings,this,t):6===a.type&&(e=new Y(s,this,t)),this._$AV.push(e),a=i[++l]}n!==(null==a?void 0:a.index)&&(s=L.nextNode(),n++)}return L.currentNode=x,o}v(t){let e=0;for(const r of this._$AV)void 0!==r&&(void 0!==r.strings?(r._$AI(t,r,e),e+=r.strings.length-2):r._$AI(t[e])),e++}}class W{constructor(t,e,r,i){var o;this.type=2,this._$AH=D,this._$AN=void 0,this._$AA=t,this._$AB=e,this._$AM=r,this.options=i,this._$Cp=null===(o=null==i?void 0:i.isConnected)||void 0===o||o}get _$AU(){var t,e;return null!==(e=null===(t=this._$AM)||void 0===t?void 0:t._$AU)&&void 0!==e?e:this._$Cp}get parentNode(){let t=this._$AA.parentNode;const e=this._$AM;return void 0!==e&&11===(null==t?void 0:t.nodeType)&&(t=e.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,e=this){t=V(this,t,e),S(t)?t===D||null==t||""===t?(this._$AH!==D&&this._$AR(),this._$AH=D):t!==this._$AH&&t!==j&&this._(t):void 0!==t._$litType$?this.g(t):void 0!==t.nodeType?this.$(t):(t=>C(t)||"function"==typeof(null==t?void 0:t[Symbol.iterator]))(t)?this.T(t):this._(t)}k(t){return this._$AA.parentNode.insertBefore(t,this._$AB)}$(t){this._$AH!==t&&(this._$AR(),this._$AH=this.k(t))}_(t){this._$AH!==D&&S(this._$AH)?this._$AA.nextSibling.data=t:this.$(x.createTextNode(t)),this._$AH=t}g(t){var e;const{values:r,_$litType$:i}=t,o="number"==typeof i?this._$AC(t):(void 0===i.el&&(i.el=q.createElement(i.h,this.options)),i);if((null===(e=this._$AH)||void 0===e?void 0:e._$AD)===o)this._$AH.v(r);else{const t=new F(o,this),e=t.u(this.options);t.v(r),this.$(e),this._$AH=t}}_$AC(t){let e=I.get(t.strings);return void 0===e&&I.set(t.strings,e=new q(t)),e}T(t){C(this._$AH)||(this._$AH=[],this._$AR());const e=this._$AH;let r,i=0;for(const o of t)i===e.length?e.push(r=new W(this.k(E()),this.k(E()),this,this.options)):r=e[i],r._$AI(o),i++;i<e.length&&(this._$AR(r&&r._$AB.nextSibling,i),e.length=i)}_$AR(t=this._$AA.nextSibling,e){var r;for(null===(r=this._$AP)||void 0===r||r.call(this,!1,!0,e);t&&t!==this._$AB;){const e=t.nextSibling;t.remove(),t=e}}setConnected(t){var e;void 0===this._$AM&&(this._$Cp=t,null===(e=this._$AP)||void 0===e||e.call(this,t))}}class J{constructor(t,e,r,i,o){this.type=1,this._$AH=D,this._$AN=void 0,this.element=t,this.name=e,this._$AM=i,this.options=o,r.length>2||""!==r[0]||""!==r[1]?(this._$AH=Array(r.length-1).fill(new String),this.strings=r):this._$AH=D}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(t,e=this,r,i){const o=this.strings;let s=!1;if(void 0===o)t=V(this,t,e,0),s=!S(t)||t!==this._$AH&&t!==j,s&&(this._$AH=t);else{const i=t;let n,l;for(t=o[0],n=0;n<o.length-1;n++)l=V(this,i[r+n],e,n),l===j&&(l=this._$AH[n]),s||(s=!S(l)||l!==this._$AH[n]),l===D?t=D:t!==D&&(t+=(null!=l?l:"")+o[n+1]),this._$AH[n]=l}s&&!i&&this.j(t)}j(t){t===D?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=t?t:"")}}class K extends J{constructor(){super(...arguments),this.type=3}j(t){this.element[this.name]=t===D?void 0:t}}const Z=y?y.emptyScript:"";class G extends J{constructor(){super(...arguments),this.type=4}j(t){t&&t!==D?this.element.setAttribute(this.name,Z):this.element.removeAttribute(this.name)}}class X extends J{constructor(t,e,r,i,o){super(t,e,r,i,o),this.type=5}_$AI(t,e=this){var r;if((t=null!==(r=V(this,t,e,0))&&void 0!==r?r:D)===j)return;const i=this._$AH,o=t===D&&i!==D||t.capture!==i.capture||t.once!==i.once||t.passive!==i.passive,s=t!==D&&(i===D||o);o&&this.element.removeEventListener(this.name,this,i),s&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){var e,r;"function"==typeof this._$AH?this._$AH.call(null!==(r=null===(e=this.options)||void 0===e?void 0:e.host)&&void 0!==r?r:this.element,t):this._$AH.handleEvent(t)}}class Y{constructor(t,e,r){this.element=t,this.type=6,this._$AN=void 0,this._$AM=e,this.options=r}get _$AU(){return this._$AM._$AU}_$AI(t){V(this,t)}}const Q=m.litHtmlPolyfillSupport;var tt,et;null==Q||Q(q,W),(null!==(g=m.litHtmlVersions)&&void 0!==g?g:m.litHtmlVersions=[]).push("2.7.4");class rt extends v{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var t,e;const r=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=r.firstChild),r}update(t){const e=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=((t,e,r)=>{var i,o;const s=null!==(i=null==r?void 0:r.renderBefore)&&void 0!==i?i:e;let n=s._$litPart$;if(void 0===n){const t=null!==(o=null==r?void 0:r.renderBefore)&&void 0!==o?o:null;s._$litPart$=n=new W(e.insertBefore(E(),t),t,void 0,null!=r?r:{})}return n._$AI(t),n})(e,this.renderRoot,this.renderOptions)}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!0)}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!1)}render(){return j}}rt.finalized=!0,rt._$litElement$=!0,null===(tt=globalThis.litElementHydrateSupport)||void 0===tt||tt.call(globalThis,{LitElement:rt});const it=globalThis.litElementPolyfillSupport;var ot;null==it||it({LitElement:rt}),(null!==(et=globalThis.litElementVersions)&&void 0!==et?et:globalThis.litElementVersions=[]).push("3.3.2"),null===(ot=window.HTMLSlotElement)||void 0===ot||ot.prototype.assignedElements,console.warn("The main 'lit-element' module entrypoint is deprecated. Please update your imports to use the 'lit' package: 'lit' and 'lit/decorators.ts' or import from 'lit-element/lit-element.ts'. See https://lit.dev/msg/deprecated-import-path for more information.");const st=window,nt=st.ShadowRoot&&(void 0===st.ShadyCSS||st.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,lt=Symbol(),at=new WeakMap;class ht{constructor(t,e,r){if(this._$cssResult$=!0,r!==lt)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const e=this.t;if(nt&&void 0===t){const r=void 0!==e&&1===e.length;r&&(t=at.get(e)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),r&&at.set(e,t))}return t}toString(){return this.cssText}}const ct=nt?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const r of t.cssRules)e+=r.cssText;return(t=>new ht("string"==typeof t?t:t+"",void 0,lt))(e)})(t):t;var dt;const ut=window,pt=ut.trustedTypes,ft=pt?pt.emptyScript:"",vt=ut.reactiveElementPolyfillSupport,gt={toAttribute(t,e){switch(e){case Boolean:t=t?ft:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){let r=t;switch(e){case Boolean:r=null!==t;break;case Number:r=null===t?null:Number(t);break;case Object:case Array:try{r=JSON.parse(t)}catch(t){r=null}}return r}},mt=(t,e)=>e!==t&&(e==e||t==t),yt={attribute:!0,type:String,converter:gt,reflect:!1,hasChanged:mt};class _t extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(t){var e;this.finalize(),(null!==(e=this.h)&&void 0!==e?e:this.h=[]).push(t)}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((e,r)=>{const i=this._$Ep(r,e);void 0!==i&&(this._$Ev.set(i,r),t.push(i))})),t}static createProperty(t,e=yt){if(e.state&&(e.attribute=!1),this.finalize(),this.elementProperties.set(t,e),!e.noAccessor&&!this.prototype.hasOwnProperty(t)){const r="symbol"==typeof t?Symbol():"__"+t,i=this.getPropertyDescriptor(t,r,e);void 0!==i&&Object.defineProperty(this.prototype,t,i)}}static getPropertyDescriptor(t,e,r){return{get(){return this[e]},set(i){const o=this[t];this[e]=i,this.requestUpdate(t,o,r)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||yt}static finalize(){if(this.hasOwnProperty("finalized"))return!1;this.finalized=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),void 0!==t.h&&(this.h=[...t.h]),this.elementProperties=new Map(t.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const t=this.properties,e=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const r of e)this.createProperty(r,t[r])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(t){const e=[];if(Array.isArray(t)){const r=new Set(t.flat(1/0).reverse());for(const t of r)e.unshift(ct(t))}else void 0!==t&&e.push(ct(t));return e}static _$Ep(t,e){const r=e.attribute;return!1===r?void 0:"string"==typeof r?r:"string"==typeof t?t.toLowerCase():void 0}u(){var t;this._$E_=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(t=this.constructor.h)||void 0===t||t.forEach((t=>t(this)))}addController(t){var e,r;(null!==(e=this._$ES)&&void 0!==e?e:this._$ES=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(r=t.hostConnected)||void 0===r||r.call(t))}removeController(t){var e;null===(e=this._$ES)||void 0===e||e.splice(this._$ES.indexOf(t)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((t,e)=>{this.hasOwnProperty(e)&&(this._$Ei.set(e,this[e]),delete this[e])}))}createRenderRoot(){var t;const e=null!==(t=this.shadowRoot)&&void 0!==t?t:this.attachShadow(this.constructor.shadowRootOptions);return((t,e)=>{nt?t.adoptedStyleSheets=e.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):e.forEach((e=>{const r=document.createElement("style"),i=st.litNonce;void 0!==i&&r.setAttribute("nonce",i),r.textContent=e.cssText,t.appendChild(r)}))})(e,this.constructor.elementStyles),e}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostConnected)||void 0===e?void 0:e.call(t)}))}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostDisconnected)||void 0===e?void 0:e.call(t)}))}attributeChangedCallback(t,e,r){this._$AK(t,r)}_$EO(t,e,r=yt){var i;const o=this.constructor._$Ep(t,r);if(void 0!==o&&!0===r.reflect){const s=(void 0!==(null===(i=r.converter)||void 0===i?void 0:i.toAttribute)?r.converter:gt).toAttribute(e,r.type);this._$El=t,null==s?this.removeAttribute(o):this.setAttribute(o,s),this._$El=null}}_$AK(t,e){var r;const i=this.constructor,o=i._$Ev.get(t);if(void 0!==o&&this._$El!==o){const t=i.getPropertyOptions(o),s="function"==typeof t.converter?{fromAttribute:t.converter}:void 0!==(null===(r=t.converter)||void 0===r?void 0:r.fromAttribute)?t.converter:gt;this._$El=o,this[o]=s.fromAttribute(e,t.type),this._$El=null}}requestUpdate(t,e,r){let i=!0;void 0!==t&&(((r=r||this.constructor.getPropertyOptions(t)).hasChanged||mt)(this[t],e)?(this._$AL.has(t)||this._$AL.set(t,e),!0===r.reflect&&this._$El!==t&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(t,r))):i=!1),!this.isUpdatePending&&i&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((t,e)=>this[e]=t)),this._$Ei=void 0);let e=!1;const r=this._$AL;try{e=this.shouldUpdate(r),e?(this.willUpdate(r),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostUpdate)||void 0===e?void 0:e.call(t)})),this.update(r)):this._$Ek()}catch(t){throw e=!1,this._$Ek(),t}e&&this._$AE(r)}willUpdate(t){}_$AE(t){var e;null===(e=this._$ES)||void 0===e||e.forEach((t=>{var e;return null===(e=t.hostUpdated)||void 0===e?void 0:e.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(t){return!0}update(t){void 0!==this._$EC&&(this._$EC.forEach(((t,e)=>this._$EO(e,this[e],t))),this._$EC=void 0),this._$Ek()}updated(t){}firstUpdated(t){}}var $t;_t.finalized=!0,_t.elementProperties=new Map,_t.elementStyles=[],_t.shadowRootOptions={mode:"open"},null==vt||vt({ReactiveElement:_t}),(null!==(dt=ut.reactiveElementVersions)&&void 0!==dt?dt:ut.reactiveElementVersions=[]).push("1.6.1");const bt=window,At=bt.trustedTypes,wt=At?At.createPolicy("lit-html",{createHTML:t=>t}):void 0,xt="$lit$",Et=`lit$${(Math.random()+"").slice(9)}$`,St="?"+Et,Ct=`<${St}>`,Pt=document,Rt=()=>Pt.createComment(""),kt=t=>null===t||"object"!=typeof t&&"function"!=typeof t,Ut=Array.isArray,Nt="[ \t\n\f\r]",Ot=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,Tt=/-->/g,zt=/>/g,Ht=RegExp(`>|${Nt}(?:([^\\s"'>=/]+)(${Nt}*=${Nt}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),Mt=/'/g,jt=/"/g,Dt=/^(?:script|style|textarea|title)$/i,It=t=>(e,...r)=>({_$litType$:t,strings:e,values:r}),Lt=It(1),Bt=(It(2),Symbol.for("lit-noChange")),qt=Symbol.for("lit-nothing"),Vt=new WeakMap,Ft=Pt.createTreeWalker(Pt,129,null,!1);class Wt{constructor({strings:t,_$litType$:e},r){let i;this.parts=[];let o=0,s=0;const n=t.length-1,l=this.parts,[a,h]=((t,e)=>{const r=t.length-1,i=[];let o,s=2===e?"<svg>":"",n=Ot;for(let e=0;e<r;e++){const r=t[e];let l,a,h=-1,c=0;for(;c<r.length&&(n.lastIndex=c,a=n.exec(r),null!==a);)c=n.lastIndex,n===Ot?"!--"===a[1]?n=Tt:void 0!==a[1]?n=zt:void 0!==a[2]?(Dt.test(a[2])&&(o=RegExp("</"+a[2],"g")),n=Ht):void 0!==a[3]&&(n=Ht):n===Ht?">"===a[0]?(n=null!=o?o:Ot,h=-1):void 0===a[1]?h=-2:(h=n.lastIndex-a[2].length,l=a[1],n=void 0===a[3]?Ht:'"'===a[3]?jt:Mt):n===jt||n===Mt?n=Ht:n===Tt||n===zt?n=Ot:(n=Ht,o=void 0);const d=n===Ht&&t[e+1].startsWith("/>")?" ":"";s+=n===Ot?r+Ct:h>=0?(i.push(l),r.slice(0,h)+xt+r.slice(h)+Et+d):r+Et+(-2===h?(i.push(void 0),e):d)}const l=s+(t[r]||"<?>")+(2===e?"</svg>":"");if(!Array.isArray(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return[void 0!==wt?wt.createHTML(l):l,i]})(t,e);if(this.el=Wt.createElement(a,r),Ft.currentNode=this.el.content,2===e){const t=this.el.content,e=t.firstChild;e.remove(),t.append(...e.childNodes)}for(;null!==(i=Ft.nextNode())&&l.length<n;){if(1===i.nodeType){if(i.hasAttributes()){const t=[];for(const e of i.getAttributeNames())if(e.endsWith(xt)||e.startsWith(Et)){const r=h[s++];if(t.push(e),void 0!==r){const t=i.getAttribute(r.toLowerCase()+xt).split(Et),e=/([.?@])?(.*)/.exec(r);l.push({type:1,index:o,name:e[2],strings:t,ctor:"."===e[1]?Xt:"?"===e[1]?Qt:"@"===e[1]?te:Gt})}else l.push({type:6,index:o})}for(const e of t)i.removeAttribute(e)}if(Dt.test(i.tagName)){const t=i.textContent.split(Et),e=t.length-1;if(e>0){i.textContent=At?At.emptyScript:"";for(let r=0;r<e;r++)i.append(t[r],Rt()),Ft.nextNode(),l.push({type:2,index:++o});i.append(t[e],Rt())}}}else if(8===i.nodeType)if(i.data===St)l.push({type:2,index:o});else{let t=-1;for(;-1!==(t=i.data.indexOf(Et,t+1));)l.push({type:7,index:o}),t+=Et.length-1}o++}}static createElement(t,e){const r=Pt.createElement("template");return r.innerHTML=t,r}}function Jt(t,e,r=t,i){var o,s,n,l;if(e===Bt)return e;let a=void 0!==i?null===(o=r._$Co)||void 0===o?void 0:o[i]:r._$Cl;const h=kt(e)?void 0:e._$litDirective$;return(null==a?void 0:a.constructor)!==h&&(null===(s=null==a?void 0:a._$AO)||void 0===s||s.call(a,!1),void 0===h?a=void 0:(a=new h(t),a._$AT(t,r,i)),void 0!==i?(null!==(n=(l=r)._$Co)&&void 0!==n?n:l._$Co=[])[i]=a:r._$Cl=a),void 0!==a&&(e=Jt(t,a._$AS(t,e.values),a,i)),e}class Kt{constructor(t,e){this._$AV=[],this._$AN=void 0,this._$AD=t,this._$AM=e}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(t){var e;const{el:{content:r},parts:i}=this._$AD,o=(null!==(e=null==t?void 0:t.creationScope)&&void 0!==e?e:Pt).importNode(r,!0);Ft.currentNode=o;let s=Ft.nextNode(),n=0,l=0,a=i[0];for(;void 0!==a;){if(n===a.index){let e;2===a.type?e=new Zt(s,s.nextSibling,this,t):1===a.type?e=new a.ctor(s,a.name,a.strings,this,t):6===a.type&&(e=new ee(s,this,t)),this._$AV.push(e),a=i[++l]}n!==(null==a?void 0:a.index)&&(s=Ft.nextNode(),n++)}return Ft.currentNode=Pt,o}v(t){let e=0;for(const r of this._$AV)void 0!==r&&(void 0!==r.strings?(r._$AI(t,r,e),e+=r.strings.length-2):r._$AI(t[e])),e++}}class Zt{constructor(t,e,r,i){var o;this.type=2,this._$AH=qt,this._$AN=void 0,this._$AA=t,this._$AB=e,this._$AM=r,this.options=i,this._$Cp=null===(o=null==i?void 0:i.isConnected)||void 0===o||o}get _$AU(){var t,e;return null!==(e=null===(t=this._$AM)||void 0===t?void 0:t._$AU)&&void 0!==e?e:this._$Cp}get parentNode(){let t=this._$AA.parentNode;const e=this._$AM;return void 0!==e&&11===(null==t?void 0:t.nodeType)&&(t=e.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,e=this){t=Jt(this,t,e),kt(t)?t===qt||null==t||""===t?(this._$AH!==qt&&this._$AR(),this._$AH=qt):t!==this._$AH&&t!==Bt&&this._(t):void 0!==t._$litType$?this.g(t):void 0!==t.nodeType?this.$(t):(t=>Ut(t)||"function"==typeof(null==t?void 0:t[Symbol.iterator]))(t)?this.T(t):this._(t)}k(t){return this._$AA.parentNode.insertBefore(t,this._$AB)}$(t){this._$AH!==t&&(this._$AR(),this._$AH=this.k(t))}_(t){this._$AH!==qt&&kt(this._$AH)?this._$AA.nextSibling.data=t:this.$(Pt.createTextNode(t)),this._$AH=t}g(t){var e;const{values:r,_$litType$:i}=t,o="number"==typeof i?this._$AC(t):(void 0===i.el&&(i.el=Wt.createElement(i.h,this.options)),i);if((null===(e=this._$AH)||void 0===e?void 0:e._$AD)===o)this._$AH.v(r);else{const t=new Kt(o,this),e=t.u(this.options);t.v(r),this.$(e),this._$AH=t}}_$AC(t){let e=Vt.get(t.strings);return void 0===e&&Vt.set(t.strings,e=new Wt(t)),e}T(t){Ut(this._$AH)||(this._$AH=[],this._$AR());const e=this._$AH;let r,i=0;for(const o of t)i===e.length?e.push(r=new Zt(this.k(Rt()),this.k(Rt()),this,this.options)):r=e[i],r._$AI(o),i++;i<e.length&&(this._$AR(r&&r._$AB.nextSibling,i),e.length=i)}_$AR(t=this._$AA.nextSibling,e){var r;for(null===(r=this._$AP)||void 0===r||r.call(this,!1,!0,e);t&&t!==this._$AB;){const e=t.nextSibling;t.remove(),t=e}}setConnected(t){var e;void 0===this._$AM&&(this._$Cp=t,null===(e=this._$AP)||void 0===e||e.call(this,t))}}class Gt{constructor(t,e,r,i,o){this.type=1,this._$AH=qt,this._$AN=void 0,this.element=t,this.name=e,this._$AM=i,this.options=o,r.length>2||""!==r[0]||""!==r[1]?(this._$AH=Array(r.length-1).fill(new String),this.strings=r):this._$AH=qt}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(t,e=this,r,i){const o=this.strings;let s=!1;if(void 0===o)t=Jt(this,t,e,0),s=!kt(t)||t!==this._$AH&&t!==Bt,s&&(this._$AH=t);else{const i=t;let n,l;for(t=o[0],n=0;n<o.length-1;n++)l=Jt(this,i[r+n],e,n),l===Bt&&(l=this._$AH[n]),s||(s=!kt(l)||l!==this._$AH[n]),l===qt?t=qt:t!==qt&&(t+=(null!=l?l:"")+o[n+1]),this._$AH[n]=l}s&&!i&&this.j(t)}j(t){t===qt?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=t?t:"")}}class Xt extends Gt{constructor(){super(...arguments),this.type=3}j(t){this.element[this.name]=t===qt?void 0:t}}const Yt=At?At.emptyScript:"";class Qt extends Gt{constructor(){super(...arguments),this.type=4}j(t){t&&t!==qt?this.element.setAttribute(this.name,Yt):this.element.removeAttribute(this.name)}}class te extends Gt{constructor(t,e,r,i,o){super(t,e,r,i,o),this.type=5}_$AI(t,e=this){var r;if((t=null!==(r=Jt(this,t,e,0))&&void 0!==r?r:qt)===Bt)return;const i=this._$AH,o=t===qt&&i!==qt||t.capture!==i.capture||t.once!==i.once||t.passive!==i.passive,s=t!==qt&&(i===qt||o);o&&this.element.removeEventListener(this.name,this,i),s&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){var e,r;"function"==typeof this._$AH?this._$AH.call(null!==(r=null===(e=this.options)||void 0===e?void 0:e.host)&&void 0!==r?r:this.element,t):this._$AH.handleEvent(t)}}class ee{constructor(t,e,r){this.element=t,this.type=6,this._$AN=void 0,this._$AM=e,this.options=r}get _$AU(){return this._$AM._$AU}_$AI(t){Jt(this,t)}}const re=bt.litHtmlPolyfillSupport;null==re||re(Wt,Zt),(null!==($t=bt.litHtmlVersions)&&void 0!==$t?$t:bt.litHtmlVersions=[]).push("2.7.4");const ie=window,oe=ie.ShadowRoot&&(void 0===ie.ShadyCSS||ie.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,se=Symbol(),ne=new WeakMap;class le{constructor(t,e,r){if(this._$cssResult$=!0,r!==se)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const e=this.t;if(oe&&void 0===t){const r=void 0!==e&&1===e.length;r&&(t=ne.get(e)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),r&&ne.set(e,t))}return t}toString(){return this.cssText}}const ae=(t,...e)=>{const r=1===t.length?t[0]:e.reduce(((e,r,i)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if("number"==typeof t)return t;throw Error("Value passed to 'css' function must be a 'css' function result: "+t+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(r)+t[i+1]),t[0]);return new le(r,t,se)},he=oe?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const r of t.cssRules)e+=r.cssText;return(t=>new le("string"==typeof t?t:t+"",void 0,se))(e)})(t):t;var ce;const de=window,ue=de.trustedTypes,pe=ue?ue.emptyScript:"",fe=de.reactiveElementPolyfillSupport,ve={toAttribute(t,e){switch(e){case Boolean:t=t?pe:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){let r=t;switch(e){case Boolean:r=null!==t;break;case Number:r=null===t?null:Number(t);break;case Object:case Array:try{r=JSON.parse(t)}catch(t){r=null}}return r}},ge=(t,e)=>e!==t&&(e==e||t==t),me={attribute:!0,type:String,converter:ve,reflect:!1,hasChanged:ge};class ye extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(t){var e;this.finalize(),(null!==(e=this.h)&&void 0!==e?e:this.h=[]).push(t)}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((e,r)=>{const i=this._$Ep(r,e);void 0!==i&&(this._$Ev.set(i,r),t.push(i))})),t}static createProperty(t,e=me){if(e.state&&(e.attribute=!1),this.finalize(),this.elementProperties.set(t,e),!e.noAccessor&&!this.prototype.hasOwnProperty(t)){const r="symbol"==typeof t?Symbol():"__"+t,i=this.getPropertyDescriptor(t,r,e);void 0!==i&&Object.defineProperty(this.prototype,t,i)}}static getPropertyDescriptor(t,e,r){return{get(){return this[e]},set(i){const o=this[t];this[e]=i,this.requestUpdate(t,o,r)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||me}static finalize(){if(this.hasOwnProperty("finalized"))return!1;this.finalized=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),void 0!==t.h&&(this.h=[...t.h]),this.elementProperties=new Map(t.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const t=this.properties,e=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const r of e)this.createProperty(r,t[r])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(t){const e=[];if(Array.isArray(t)){const r=new Set(t.flat(1/0).reverse());for(const t of r)e.unshift(he(t))}else void 0!==t&&e.push(he(t));return e}static _$Ep(t,e){const r=e.attribute;return!1===r?void 0:"string"==typeof r?r:"string"==typeof t?t.toLowerCase():void 0}u(){var t;this._$E_=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(t=this.constructor.h)||void 0===t||t.forEach((t=>t(this)))}addController(t){var e,r;(null!==(e=this._$ES)&&void 0!==e?e:this._$ES=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(r=t.hostConnected)||void 0===r||r.call(t))}removeController(t){var e;null===(e=this._$ES)||void 0===e||e.splice(this._$ES.indexOf(t)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((t,e)=>{this.hasOwnProperty(e)&&(this._$Ei.set(e,this[e]),delete this[e])}))}createRenderRoot(){var t;const e=null!==(t=this.shadowRoot)&&void 0!==t?t:this.attachShadow(this.constructor.shadowRootOptions);return((t,e)=>{oe?t.adoptedStyleSheets=e.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):e.forEach((e=>{const r=document.createElement("style"),i=ie.litNonce;void 0!==i&&r.setAttribute("nonce",i),r.textContent=e.cssText,t.appendChild(r)}))})(e,this.constructor.elementStyles),e}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostConnected)||void 0===e?void 0:e.call(t)}))}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostDisconnected)||void 0===e?void 0:e.call(t)}))}attributeChangedCallback(t,e,r){this._$AK(t,r)}_$EO(t,e,r=me){var i;const o=this.constructor._$Ep(t,r);if(void 0!==o&&!0===r.reflect){const s=(void 0!==(null===(i=r.converter)||void 0===i?void 0:i.toAttribute)?r.converter:ve).toAttribute(e,r.type);this._$El=t,null==s?this.removeAttribute(o):this.setAttribute(o,s),this._$El=null}}_$AK(t,e){var r;const i=this.constructor,o=i._$Ev.get(t);if(void 0!==o&&this._$El!==o){const t=i.getPropertyOptions(o),s="function"==typeof t.converter?{fromAttribute:t.converter}:void 0!==(null===(r=t.converter)||void 0===r?void 0:r.fromAttribute)?t.converter:ve;this._$El=o,this[o]=s.fromAttribute(e,t.type),this._$El=null}}requestUpdate(t,e,r){let i=!0;void 0!==t&&(((r=r||this.constructor.getPropertyOptions(t)).hasChanged||ge)(this[t],e)?(this._$AL.has(t)||this._$AL.set(t,e),!0===r.reflect&&this._$El!==t&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(t,r))):i=!1),!this.isUpdatePending&&i&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((t,e)=>this[e]=t)),this._$Ei=void 0);let e=!1;const r=this._$AL;try{e=this.shouldUpdate(r),e?(this.willUpdate(r),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostUpdate)||void 0===e?void 0:e.call(t)})),this.update(r)):this._$Ek()}catch(t){throw e=!1,this._$Ek(),t}e&&this._$AE(r)}willUpdate(t){}_$AE(t){var e;null===(e=this._$ES)||void 0===e||e.forEach((t=>{var e;return null===(e=t.hostUpdated)||void 0===e?void 0:e.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(t){return!0}update(t){void 0!==this._$EC&&(this._$EC.forEach(((t,e)=>this._$EO(e,this[e],t))),this._$EC=void 0),this._$Ek()}updated(t){}firstUpdated(t){}}var _e,$e;ye.finalized=!0,ye.elementProperties=new Map,ye.elementStyles=[],ye.shadowRootOptions={mode:"open"},null==fe||fe({ReactiveElement:ye}),(null!==(ce=de.reactiveElementVersions)&&void 0!==ce?ce:de.reactiveElementVersions=[]).push("1.6.1");class be extends ye{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var t,e;const r=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=r.firstChild),r}update(t){const e=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=((t,e,r)=>{var i,o;const s=null!==(i=null==r?void 0:r.renderBefore)&&void 0!==i?i:e;let n=s._$litPart$;if(void 0===n){const t=null!==(o=null==r?void 0:r.renderBefore)&&void 0!==o?o:null;s._$litPart$=n=new Zt(e.insertBefore(Rt(),t),t,void 0,null!=r?r:{})}return n._$AI(t),n})(e,this.renderRoot,this.renderOptions)}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!0)}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!1)}render(){return Bt}}be.finalized=!0,be._$litElement$=!0,null===(_e=globalThis.litElementHydrateSupport)||void 0===_e||_e.call(globalThis,{LitElement:be});const Ae=globalThis.litElementPolyfillSupport;null==Ae||Ae({LitElement:be}),(null!==($e=globalThis.litElementVersions)&&void 0!==$e?$e:globalThis.litElementVersions=[]).push("3.3.2");const we=t=>e=>"function"==typeof e?((t,e)=>(customElements.define(t,e),e))(t,e):((t,e)=>{const{kind:r,elements:i}=e;return{kind:r,elements:i,finisher(e){customElements.define(t,e)}}})(t,e),xe=(t,e)=>"method"===e.kind&&e.descriptor&&!("value"in e.descriptor)?{...e,finisher(r){r.createProperty(e.key,t)}}:{kind:"field",key:Symbol(),placement:"own",descriptor:{},originalKey:e.key,initializer(){"function"==typeof e.initializer&&(this[e.key]=e.initializer.call(this))},finisher(r){r.createProperty(e.key,t)}};function Ee(t){return(e,r)=>void 0!==r?((t,e,r)=>{e.constructor.createProperty(r,t)})(t,e,r):xe(t,e)}function Se(t){return Ee({...t,state:!0})}var Ce;null===(Ce=window.HTMLSlotElement)||void 0===Ce||Ce.prototype.assignedElements;const Pe=ae`
  #wysiwyg-editor {
    display: inline-block;
    border: none;
    padding: 4px;
    caret-color: var(--fe-caret-color, #fff);
    color: var(--fe-text-color, #f7f1ff);
    line-height: 1.1;
    width: 100%;
    height: 100%;
    border-radius: var(--fe-border-radius, 4px) var(--fe-border-radius, 4px) 0px
      0px;
    overflow: auto;
    border: 2px solid black;
    outline: 0px solid black;
    white-space: pre-wrap;
    background-color: var(--fe-background-color, #222222);
    margin: 0px;
  }

  #wysiwyg-err {
    width: 100%;
    border-radius: 0px 0px var(--fe-border-radius, 4px)
      var(--fe-border-radius, 4px);
    color: var(--fe-err-text-color, #fc514f);
    border: 2px solid black;
    /* border-top: 0px; */
    background-color: var(--fe-background-color, #222222);
    padding: 4px;
    margin: 0px 0px 8px 0px;
  }

  .wysiwyg-no-err {
    color: #098668 !important;
  }

  .wysiwygInternals.error {
    text-decoration: underline;
    -webkit-text-decoration-color: var(--fe-err-underline-color, #fc514f);
    text-decoration-color: var(--fe-err-underline-color, #fc514f);
    -webkit-text-decoration-style: wavy;
    text-decoration-style: wavy;
    text-decoration-thickness: 1px;
    text-decoration-color: var(--fe-err-underline-color, red);
  }

  .wysiwygInternals.bracket {
    color: var(--fe-bracket-color, #fc514f);
  }

  .wysiwygInternals.operator {
    font-weight: bold;
    color: var(--fe-operator-color, #fc618d);
  }

  .wysiwygInternals.variable {
    color: var(--fe-variable-color, #fc618d);
  }
`,Re=(Lt`
  <style>
    .primary-text-underlined {
      font-family: var(--theme-font);
      border: none;
      font-size: var(--secondary-font-size, 16px);
      color: var(--primary-color, #205081);
      padding: 0;
      margin: 0;
      border-radius: 0;
      min-width: max-content;
      text-transform: none;
      border-bottom: 1px solid rgba(var(--secondary-color-rgb), 0.3);
    }

    .secondary-text-underlined {
      font-family: var(--theme-font);
      border: none;
      font-size: var(--secondary-font-size, 16px);
      color: var(--secondary-color, #515151);
      margin: 0;
      padding: 0;
      border-radius: 0;
      min-width: max-content;
      text-transform: none;
      border-bottom: 1px solid rgba(var(--secondary-color-rgb), 0.3);
    }
  </style>
`,Lt`
  <style>
    .primary-text-button {
      font-family: var(--theme-font);
      border: none;
      font-size: var(--secondary-font-size, 16px);
      color: var(--primary-color, #205081);
      padding: 0 8px;
      min-width: 64px;
      height: var(--button-height, 36px);
      margin: 0;
      text-transform: none;
    }

    .secondary-text-button {
      font-family: var(--theme-font);
      border: none;
      font-size: var(--secondary-font-size, 16px);
      color: var(--secondary-color, #515151);
      padding: 0 8px;
      min-width: 64px;
      margin: 0;
      height: var(--button-height, 36px);
      text-transform: none;
    }

    .primary-text-button:hover {
      font-weight: bold;
    }

    .secondary-text-button:hover {
      font-weight: bold;
    }

    .primary-text-button[disabled], .secondary-text-button[disabled] {
        opacity: 0.5;
    }
  </style>
`);Lt`
  <style>
    .primary-outlined {
      font-family: var(--theme-font);
      border: 1px solid var(--primary-color, #205081);
      border-radius: 5px;
      font-size: var(--secondary-font-size, 16px);
      color: var(--secondary-color, #515151);
      padding: 0 var(--button-padding, 16px);
      min-width: 64px;
      margin: 0;
      height: var(--button-height, 36px);
      text-transform: none;
    }
    .primary-outlined:hover {
      background-color: var(--primary-color, #205081);
      color: var(--light-color, #fff);
    }
    .primary-colored {
      font-family: var(--theme-font);
      background-color: var(--primary-color, #205081);
      border-radius: 5px;
      font-size: var(--secondary-font-size, 16px);
      color: var(--light-color, #fff);
      margin: 0;
      padding: 0 var(--button-padding, 16px);
      min-width: 64px;
      height: var(--button-height, 36px);
      text-transform: none;
    }
    .primary-colored:hover {
      box-shadow: 0 1px 2px 1px var(--primary-color, #205081);
    }
    .primary-outlined[disabled], .primary-colored[disabled] {
        opacity: 0.5;
    }
  </style>
`,Lt`
  <style>
    .secondary-outlined {
      font-family: var(--theme-font);
      border: 1px solid rgba(var(--secondary-color-rgb), 0.3);
      border-radius: 5px;
      font-size: var(--secondary-font-size, 16px);
      color: var(--secondary-color, #515151);
      padding: 0 var(--button-padding, 16px);
      margin: 0;
      min-width: 64px;
      height: var(--button-height, 36px);
      text-transform: none;
    }

    .secondary-outlined:hover {
      background-color: var(--secondary-color, #515151);
      color: var(--light-color, #fff);
    }

    .secondary-colored {
      font-family: var(--theme-font);
      background-color: var(--secondary-color, #515151);
      border-radius: 5px;
      font-size: var(--secondary-font-size, 16px);
      color: var(--light-color, #fff);
      padding: 0 var(--button-padding, 16px);
      margin: 0;
      min-width: 64px;
      height: var(--button-height, 36px);
      text-transform: none;
    }

    .secondary-colored:hover {
      box-shadow: 0 1px 2px 1px var(--secondary-color, #515151);
    }

    .secondary-outlined[disabled], .secondary-colored[disabled] {
        opacity: 0.5;
    }
  </style>
`,Lt`
  <style>
    .alert-outlined {
      font-family: var(--theme-font);
      border: 1px solid var(--error-color);
      border-radius: 5px;
      font-size: var(--secondary-font-size, 16px);
      color: var(--error-color, #d50000);
      padding: 0 var(--button-padding, 16px);
      margin: 0;
      min-width: 64px;
      height: var(--button-height, 36px);
      text-transform: none;
    }

    .alert-outlined:hover {
      background-color: var(--error-color-l1, #db4437);
      color: var(--light-color, #fff);
    }

    .alert-colored {
      font-family: var(--theme-font);
      background-color: var(--error-color, #d50000);
      border-radius: 5px;
      font-size: var(--secondary-font-size, 16px);
      color: var(--light-color, #fff);
      padding: 0 var(--button-padding, 16px);
      margin: 0;
      min-width: 64px;
      height: var(--button-height, 36px);
      text-transform: none;
    }

    .alert-colored:hover {
      box-shadow: 0 1px 2px 1px var(--error-color, #d50000);
    }

    .alert-outlined[disabled], .alert-colored[disabled] {
        opacity: 0.5;
    }
  </style>
`,Lt`
  <style>
    .toggle-group {
      display: flex; justify-content: flex-end; align-items: center; flex-wrap: wrap;
    }

    .toggle-group .toggle:first-child{
      border-top-left-radius: 5px; border-bottom-left-radius: 5px;
    }
    .toggle-group .toggle:last-child{
      border-top-right-radius: 5px; border-bottom-right-radius: 5px;
    }

    .toggle {
      text-transform: none;
      margin: 0px;
      border-radius: 0px;
      background-color: transparent;
      border: 1px solid var(--secondary-color-l3);
      color: var(--secondary-color);
      font-size: var(--secondary-font-size, 16px);
      font-family: var(--theme-font);
      display: flex;
      justify-content: space-around;
      min-width: 64px;
      align-items: center;
    }

    .toggle.small {
      height: 30px;
      font-size: var(--tertiary-font-size, 14px);
    }

    .toggle:hover {
      box-shadow: 0 1px 2px 1px rgba(var(--secondary-color-rgb), 0.1);
    }

    .selected-toggle {
      background-color: var(--secondary-color);
      color: var(--light-color, #fff);
    }

    .toggle iron-icon{
      --iron-icon-height: var(--body-font-size, 16px);
      margin-right: 5px;
    }

    .toggle mwc-icon{
      --mdc-icon-size: var(--body-font-size, 16px);
      margin-right: 5px;
    }
  </style>
`,Lt`
  <style>
    paper-fab {
      position: fixed;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      bottom: 3%;
      right: 2%;
    }

    paper-fab[disabled], .fab[disabled] {
        opacity: 0.5;
    }

    .fab {
      font-size: var(--secondary-font-size, 16px);
      position: fixed;
      display: flex;
      justify-content: center;
      align-items: center;
      bottom: 3%;
      right: 2%;
      box-shadow: var(--paper-material-elevation-2_-_box-shadow);
      font-family: var(--theme-font);
    }

    .colored-fab {
      background-color: var(--secondary-color, #515151);
      --iron-icon-height: var(--h2-font-size, 26px);
      --iron-icon-width: var(--h2-font-size, 26px);
      color: var(--light-color, #fff);
    }

    .light-colored-fab {
      background-color: var(--light-color, #fff);
      --iron-icon-height: var(--h2-font-size, 20px);
      --iron-icon-width: var(--h2-font-size, 20px);
      color: var(--secondary-color);
      /* --iron-icon-stroke-color: var(--secondary-color); */
    }

    .light-colored-fab:hover,
    .colored-fab:hover {
      box-shadow: var(--paper-material-elevation-3_-_box-shadow);
      font-weight: bold;
    }

    .rectangular-fab {
      height:  var(--rectangular-fab-height, 50px);
      width: var(--rectangular-fab-width, 120px);
      border-radius:  var(--rectangular-fab-height, 50px);
      padding: var(--rectangular-fab-padding, 0px);
      max-height: var(--rectangular-fab-max-height, 50px);
      z-index:  var(--rectangular-fab-z-index, 1);
    }
    .small-fab {
      height: 50px;
      width: 50px;
      padding: 5px;
    }
    @media all and (max-width: 767px) {
      .rectangular-fab {
        height: var(--rectangular-fab-height, 40px);
        width: var(--rectangular-fab-width, 120px);
        border-radius: 50px;
        padding: 0;
        --fab-icon-height: 40px;
      }
    }
  </style>
`,Lt`
  <style>
    .colored-bt-spinner {
      width: 18px;
      height: 18px;
      --paper-spinner-color: var(--light-color, #fff);
      --paper-spinner-stroke-width: 3px;
      margin-right: 8px;
    }

    .secondary-outlined-bt-spinner {
      width: 18px;
      height: 18px;
      --paper-spinner-color: var(--secondary-color, #fff);
      --paper-spinner-stroke-width: 3px;
      margin-right: 8px;
    }

    .primary-outlined-bt-spinner {
      width: 18px;
      height: 18px;
      --paper-spinner-color: var(--primary-color, #fff);
      --paper-spinner-stroke-width: 3px;
      margin-right: 8px;
    }

    .button-prefix-icon {
      --iron-icon-height: var(--body-font-size, 16px);
      --mdc-icon-size: var(--body-font-size, 16px);
      margin-right: 5px;
    }
  </style>
`,Lt`
  <style>
    .small-button {
      height: 25px !important;
      width: auto !important;
      padding: 0px !important;
      font-size: var(--tertiary-font-size) !important;
    }
    @media all and (max-width: 767px) {
      .small-button{
        height: 20px !important;
      }
    }
  </style>
`,Lt`
  <custom-style>
    <style>
      paper-toggle-button {
        font-family: var(--theme-font);
        cursor: pointer;
        --paper-toggle-button-checked-button: {
          height: 15px;
          width: 50%;
          border-radius: 0;
          bottom: 2px;
          box-shadow: none;
          border-bottom-right-radius : 8px;
          border-top-right-radius: 8px;
        }
        --paper-toggle-button-unchecked-button: {
          height: 15px;
          width: 50%;
          border-radius: 0;
          bottom: 2px;
          box-shadow: none;
          border-bottom-left-radius : 8px;
          border-top-left-radius: 8px;
        }
        --paper-toggle-button-unchecked-bar: {
          height: 15px;
          bottom: 2px;
          box-shadow: none;
        }
        --paper-toggle-button-checked-bar: {
          height: 15px;
          bottom: 2px;
          box-shadow: none;
        }
        --paper-toggle-button-label-color: var(--secondary-color);
        align-items: flex-start;
      }

      paper-toggle-button.primary-colored {
        --paper-toggle-button-unchecked-bar-color: var(--secondary-color-l1);
        --paper-toggle-button-unchecked-button-color:  var(--secondary-color-l1);
        --paper-toggle-button-checked-bar-color:  var(--primary-color-l1);
        --paper-toggle-button-checked-button-color:  var(--primary-color);
      }

      paper-toggle-button.secondary-colored {
        --paper-toggle-button-unchecked-bar-color: var(--secondary-color-l2);
        --paper-toggle-button-unchecked-button-color:  var(--secondary-color-l2);
        --paper-toggle-button-checked-bar-color:  var(--secondary-color-l1);
        --paper-toggle-button-checked-button-color:  var(--secondary-color);
      }
    </style>
  </custom-style>
`;var ke=1e6,Ue="[big.js] ",Ne=Ue+"Invalid ",Oe=Ne+"decimal places",Te=Ne+"rounding mode",ze=Ue+"Division by zero",He={},Me=void 0,je=/^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;function De(t,e,r,i){var o=t.c;if(r===Me&&(r=t.constructor.RM),0!==r&&1!==r&&2!==r&&3!==r)throw Error(Te);if(e<1)i=3===r&&(i||!!o[0])||0===e&&(1===r&&o[0]>=5||2===r&&(o[0]>5||5===o[0]&&(i||o[1]!==Me))),o.length=1,i?(t.e=t.e-e+1,o[0]=1):o[0]=t.e=0;else if(e<o.length){if(i=1===r&&o[e]>=5||2===r&&(o[e]>5||5===o[e]&&(i||o[e+1]!==Me||1&o[e-1]))||3===r&&(i||!!o[0]),o.length=e,i)for(;++o[--e]>9;)if(o[e]=0,0===e){++t.e,o.unshift(1);break}for(e=o.length;!o[--e];)o.pop()}return t}function Ie(t,e,r){var i=t.e,o=t.c.join(""),s=o.length;if(e)o=o.charAt(0)+(s>1?"."+o.slice(1):"")+(i<0?"e":"e+")+i;else if(i<0){for(;++i;)o="0"+o;o="0."+o}else if(i>0)if(++i>s)for(i-=s;i--;)o+="0";else i<s&&(o=o.slice(0,i)+"."+o.slice(i));else s>1&&(o=o.charAt(0)+"."+o.slice(1));return t.s<0&&r?"-"+o:o}He.abs=function(){var t=new this.constructor(this);return t.s=1,t},He.cmp=function(t){var e,r=this,i=r.c,o=(t=new r.constructor(t)).c,s=r.s,n=t.s,l=r.e,a=t.e;if(!i[0]||!o[0])return i[0]?s:o[0]?-n:0;if(s!=n)return s;if(e=s<0,l!=a)return l>a^e?1:-1;for(n=(l=i.length)<(a=o.length)?l:a,s=-1;++s<n;)if(i[s]!=o[s])return i[s]>o[s]^e?1:-1;return l==a?0:l>a^e?1:-1},He.div=function(t){var e=this,r=e.constructor,i=e.c,o=(t=new r(t)).c,s=e.s==t.s?1:-1,n=r.DP;if(n!==~~n||n<0||n>ke)throw Error(Oe);if(!o[0])throw Error(ze);if(!i[0])return t.s=s,t.c=[t.e=0],t;var l,a,h,c,d,u=o.slice(),p=l=o.length,f=i.length,v=i.slice(0,l),g=v.length,m=t,y=m.c=[],_=0,$=n+(m.e=e.e-t.e)+1;for(m.s=s,s=$<0?0:$,u.unshift(0);g++<l;)v.push(0);do{for(h=0;h<10;h++){if(l!=(g=v.length))c=l>g?1:-1;else for(d=-1,c=0;++d<l;)if(o[d]!=v[d]){c=o[d]>v[d]?1:-1;break}if(!(c<0))break;for(a=g==l?o:u;g;){if(v[--g]<a[g]){for(d=g;d&&!v[--d];)v[d]=9;--v[d],v[g]+=10}v[g]-=a[g]}for(;!v[0];)v.shift()}y[_++]=c?h:++h,v[0]&&c?v[g]=i[p]||0:v=[i[p]]}while((p++<f||v[0]!==Me)&&s--);return y[0]||1==_||(y.shift(),m.e--,$--),_>$&&De(m,$,r.RM,v[0]!==Me),m},He.eq=function(t){return 0===this.cmp(t)},He.gt=function(t){return this.cmp(t)>0},He.gte=function(t){return this.cmp(t)>-1},He.lt=function(t){return this.cmp(t)<0},He.lte=function(t){return this.cmp(t)<1},He.minus=He.sub=function(t){var e,r,i,o,s=this,n=s.constructor,l=s.s,a=(t=new n(t)).s;if(l!=a)return t.s=-a,s.plus(t);var h=s.c.slice(),c=s.e,d=t.c,u=t.e;if(!h[0]||!d[0])return d[0]?t.s=-a:h[0]?t=new n(s):t.s=1,t;if(l=c-u){for((o=l<0)?(l=-l,i=h):(u=c,i=d),i.reverse(),a=l;a--;)i.push(0);i.reverse()}else for(r=((o=h.length<d.length)?h:d).length,l=a=0;a<r;a++)if(h[a]!=d[a]){o=h[a]<d[a];break}if(o&&(i=h,h=d,d=i,t.s=-t.s),(a=(r=d.length)-(e=h.length))>0)for(;a--;)h[e++]=0;for(a=e;r>l;){if(h[--r]<d[r]){for(e=r;e&&!h[--e];)h[e]=9;--h[e],h[r]+=10}h[r]-=d[r]}for(;0===h[--a];)h.pop();for(;0===h[0];)h.shift(),--u;return h[0]||(t.s=1,h=[u=0]),t.c=h,t.e=u,t},He.mod=function(t){var e,r=this,i=r.constructor,o=r.s,s=(t=new i(t)).s;if(!t.c[0])throw Error(ze);return r.s=t.s=1,e=1==t.cmp(r),r.s=o,t.s=s,e?new i(r):(o=i.DP,s=i.RM,i.DP=i.RM=0,r=r.div(t),i.DP=o,i.RM=s,this.minus(r.times(t)))},He.neg=function(){var t=new this.constructor(this);return t.s=-t.s,t},He.plus=He.add=function(t){var e,r,i,o=this,s=o.constructor;if(t=new s(t),o.s!=t.s)return t.s=-t.s,o.minus(t);var n=o.e,l=o.c,a=t.e,h=t.c;if(!l[0]||!h[0])return h[0]||(l[0]?t=new s(o):t.s=o.s),t;if(l=l.slice(),e=n-a){for(e>0?(a=n,i=h):(e=-e,i=l),i.reverse();e--;)i.push(0);i.reverse()}for(l.length-h.length<0&&(i=h,h=l,l=i),e=h.length,r=0;e;l[e]%=10)r=(l[--e]=l[e]+h[e]+r)/10|0;for(r&&(l.unshift(r),++a),e=l.length;0===l[--e];)l.pop();return t.c=l,t.e=a,t},He.pow=function(t){var e=this,r=new e.constructor("1"),i=r,o=t<0;if(t!==~~t||t<-1e6||t>1e6)throw Error(Ne+"exponent");for(o&&(t=-t);1&t&&(i=i.times(e)),t>>=1;)e=e.times(e);return o?r.div(i):i},He.prec=function(t,e){if(t!==~~t||t<1||t>ke)throw Error(Ne+"precision");return De(new this.constructor(this),t,e)},He.round=function(t,e){if(t===Me)t=0;else if(t!==~~t||t<-ke||t>ke)throw Error(Oe);return De(new this.constructor(this),t+this.e+1,e)},He.sqrt=function(){var t,e,r,i=this,o=i.constructor,s=i.s,n=i.e,l=new o("0.5");if(!i.c[0])return new o(i);if(s<0)throw Error(Ue+"No square root");0===(s=Math.sqrt(i+""))||s===1/0?((e=i.c.join("")).length+n&1||(e+="0"),n=((n+1)/2|0)-(n<0||1&n),t=new o(((s=Math.sqrt(e))==1/0?"5e":(s=s.toExponential()).slice(0,s.indexOf("e")+1))+n)):t=new o(s+""),n=t.e+(o.DP+=4);do{r=t,t=l.times(r.plus(i.div(r)))}while(r.c.slice(0,n).join("")!==t.c.slice(0,n).join(""));return De(t,(o.DP-=4)+t.e+1,o.RM)},He.times=He.mul=function(t){var e,r=this,i=r.constructor,o=r.c,s=(t=new i(t)).c,n=o.length,l=s.length,a=r.e,h=t.e;if(t.s=r.s==t.s?1:-1,!o[0]||!s[0])return t.c=[t.e=0],t;for(t.e=a+h,n<l&&(e=o,o=s,s=e,h=n,n=l,l=h),e=new Array(h=n+l);h--;)e[h]=0;for(a=l;a--;){for(l=0,h=n+a;h>a;)l=e[h]+s[a]*o[h-a-1]+l,e[h--]=l%10,l=l/10|0;e[h]=l}for(l?++t.e:e.shift(),a=e.length;!e[--a];)e.pop();return t.c=e,t},He.toExponential=function(t,e){var r=this,i=r.c[0];if(t!==Me){if(t!==~~t||t<0||t>ke)throw Error(Oe);for(r=De(new r.constructor(r),++t,e);r.c.length<t;)r.c.push(0)}return Ie(r,!0,!!i)},He.toFixed=function(t,e){var r=this,i=r.c[0];if(t!==Me){if(t!==~~t||t<0||t>ke)throw Error(Oe);for(t=t+(r=De(new r.constructor(r),t+r.e+1,e)).e+1;r.c.length<t;)r.c.push(0)}return Ie(r,!1,!!i)},He[Symbol.for("nodejs.util.inspect.custom")]=He.toJSON=He.toString=function(){var t=this,e=t.constructor;return Ie(t,t.e<=e.NE||t.e>=e.PE,!!t.c[0])},He.toNumber=function(){var t=Number(Ie(this,!0,!0));if(!0===this.constructor.strict&&!this.eq(t.toString()))throw Error(Ue+"Imprecise conversion");return t},He.toPrecision=function(t,e){var r=this,i=r.constructor,o=r.c[0];if(t!==Me){if(t!==~~t||t<1||t>ke)throw Error(Ne+"precision");for(r=De(new i(r),t,e);r.c.length<t;)r.c.push(0)}return Ie(r,t<=r.e||r.e<=i.NE||r.e>=i.PE,!!o)},He.valueOf=function(){var t=this,e=t.constructor;if(!0===e.strict)throw Error(Ue+"valueOf disallowed");return Ie(t,t.e<=e.NE||t.e>=e.PE,!0)};var Le=function t(){function e(r){var i=this;if(!(i instanceof e))return r===Me?t():new e(r);if(r instanceof e)i.s=r.s,i.e=r.e,i.c=r.c.slice();else{if("string"!=typeof r){if(!0===e.strict&&"bigint"!=typeof r)throw TypeError(Ne+"value");r=0===r&&1/r<0?"-0":String(r)}!function(t,e){var r,i,o;if(!je.test(e))throw Error(Ne+"number");for(t.s="-"==e.charAt(0)?(e=e.slice(1),-1):1,(r=e.indexOf("."))>-1&&(e=e.replace(".","")),(i=e.search(/e/i))>0?(r<0&&(r=i),r+=+e.slice(i+1),e=e.substring(0,i)):r<0&&(r=e.length),o=e.length,i=0;i<o&&"0"==e.charAt(i);)++i;if(i==o)t.c=[t.e=0];else{for(;o>0&&"0"==e.charAt(--o););for(t.e=r-i-1,t.c=[],r=0;i<=o;)t.c[r++]=+e.charAt(i++)}}(i,r)}i.constructor=e}return e.prototype=He,e.DP=20,e.RM=1,e.NE=-7,e.PE=21,e.strict=!1,e.roundDown=0,e.roundHalfUp=1,e.roundHalfEven=2,e.roundUp=3,e}();const Be=Le;class qe{constructor(){this._inner=[]}push(t){this._inner.push(t)}pop(){return this._inner.pop()}top(){return this._inner.at(-1)}empty(){return 0==this._inner.length}print(){console.log(this._inner)}}class Ve{constructor(){this._inner={},this._head=0,this._tail=0}enqueue(t){this._inner[this._tail]=t,this._tail++}dequeue(){if(this._tail===this._head)return;const t=this._inner[this._head];return delete this._inner[this._head],this._head++,t}peek(){return this._inner[this._head]}empty(){return this._head==this._tail}print(){console.log(this._inner)}}var Fe,We;!function(t){t[t.VARIABLE=0]="VARIABLE",t[t.OPERATOR=1]="OPERATOR",t[t.UNDEF=2]="UNDEF"}(Fe||(Fe={}));class Je{constructor(t,e){this._minSuggestionLen=e>0?e:1,this._trie=new Ke,this._trie.insertAll();for(let e of t)this.insert(e[0])}insert(t,e=-1,r=void 0){-1!=e?e!=t.length?(r.getChild(t[e])||null==r||r.addChild(t[e]),this.insert(t,e+1,r.getChild(t[e]))):null==r||r.addChild("\0"):this.insert(t,0,this._trie)}getRecommendation(t){if(t.length<this._minSuggestionLen)return null;let e=[],r=0,i=this._trie;for(;i&&r<t.length;)i=i.getChild(t[r]),r++;return i?(this._traverseAndGet(e,i,t,r),0==e.length||1==e.length&&e[0]==t?null:e):null}_traverseAndGet(t,e,r,i,o=""){for(let s of e.children)"\0"==s[0]&&t.push(r+o),this._traverseAndGet(t,s[1],r,i,o+s[0])}}class Ke{constructor(){this._children=new Map}get children(){return this._children}insertAll(){for(let t=0;t<26;t++)this._children.set(String.fromCharCode(t+97),new Ke)}getChild(t){return this._children.get(t)}addChild(t){this._children.set(t,new Ke)}}class Ze{constructor(t,e){this.mathematicalOperators=new Set(["+","-","*","/"]),this.operatorPrecedence={"^":3,"/":2,"*":2,"+":1,"-":1},this.variables=t,this._recommender=new Je(this.variables,e)}parseInput(t,e=null,r=null){let i=t.split(/([-+(),*/:?\s])/g),o=new qe,s="",n=Fe.VARIABLE,l=0,a=0,h="",c={recommendations:null,formattedContent:null,formattedString:null,newCursorPosition:null!=e?e:-1,errorStr:null};i.forEach((i=>{let d=this.variables.has(i)||r&&this.variables.has(r)||!Number.isNaN(Number(i)),u=this.mathematicalOperators.has(i),p=""==i.trim(),f="("==i||")"==i,v=!1;if(p)return s=`${s}${i}`,void(a+=i.length);a<=e&&a+i.length>=e&&!c.recommendations&&(r&&(c.newCursorPosition=Math.min(c.newCursorPosition+r.length-i.length,t.length+r.length-i.length),i=r,r=null,v=!0),c.recommendations=this._recommender.getRecommendation(i));let g="";"("==i?(l++,o.push(a),g+=" bracket"):")"==i?(o.pop(),l--,g+=" bracket"):u&&(g+=" operator"),(n==Fe.UNDEF||n==Fe.VARIABLE&&!d&&!f||n==Fe.OPERATOR&&!u||")"==i&&"("==h||!(d||u||f)||d&&"/"==h&&(0==this.variables.get(i)||0==Number(i)))&&(g+=" error"),c.errorStr||(l<0?(c.errorStr=`Unexpected ')' at pos: ${a}`,n=Fe.UNDEF):n!=Fe.VARIABLE||d||f?n!=Fe.OPERATOR||u||")"==i?d||u||f?!d||"/"!=h||0!=this.variables.get(i)&&0!=Number(i)?"("==h&&")"==i&&(c.errorStr=`Empty brackets at position ${a}`,n=Fe.UNDEF):(c.errorStr=`Division by zero at pos: ${a}`,n=Fe.UNDEF):(c.errorStr=`Unknown word at pos: ${a}`,n=Fe.UNDEF):(c.errorStr=`Expected mathematical operator at pos: ${a}`,n=Fe.UNDEF):(c.errorStr=`Expected variable/number at pos: ${a}`,n=Fe.UNDEF)),n!=Fe.UNDEF&&("("==i||u?n=Fe.VARIABLE:(")"==i||d)&&(n=Fe.OPERATOR)),s=v?`${s}${i}`:`${s}<span class="wysiwygInternals ${g}">${i}</span>`,a+=i.length,h=i})),this.mathematicalOperators.has(h)&&(c.errorStr="Unexpected ending of formula.");const d=(new DOMParser).parseFromString(s,"text/html");return c.formattedContent=d.querySelector("body"),c.formattedString=s,o.empty()||(c.errorStr=`Unclosed '(' at position: ${o.top()}`),c}buildRPN(t){if(this.parseInput(t).errorStr)return null;let e=t.split(/([-+(),*/:?\s])/g).filter((t=>!/\s+/.test(t)&&""!==t));const r=new qe,i=new Ve;for(let t of e)if("("==t)r.push("(");else if(")"==t){for(;"("!=r.top();)i.enqueue(r.pop());r.pop()}else if(this.mathematicalOperators.has(t)){for(;this.mathematicalOperators.has(r.top())&&this.operatorPrecedence[t]<=this.operatorPrecedence[r.top()];)i.enqueue(r.pop());r.push(t)}else Number.isNaN(t)||""==t||i.enqueue(t);for(;r.top();)i.enqueue(r.pop());return i}addParens(t){const e=this.buildRPN(t);if(!e)return null;let r="";for(;!e.empty();)r+=e.dequeue()+" ";let i=r.split(/\s+/g).filter((t=>!/\s+/.test(t)&&""!==t)),o=new qe,s=new qe;if(i.forEach((t=>{let e,r;if(this.variables.has(t)||!isNaN(parseFloat(t))&&isFinite(parseFloat(t)))s.push(t),o.push(null);else{if(!Object.keys(this.operatorPrecedence).includes(t))throw`${t} is not a recognized symbol`;{let[i,n,l,a]=[s.pop(),s.pop(),o.pop(),o.pop()];r=this.operatorPrecedence[a]<=this.operatorPrecedence[t]||this.operatorPrecedence[a]===this.operatorPrecedence[t]&&["/","-"].includes(t)?`(${n})`:`${n}`,e=this.operatorPrecedence[l]<=this.operatorPrecedence[t]||this.operatorPrecedence[l]===this.operatorPrecedence[t]&&["/","-"].includes(t)?`(${i})`:`${i}`,s.push(`${r} ${t} ${e}`),o.push(t)}}})),s.empty())throw`${r} is not a correct RPN`;return s.pop()}calculate(t){var e,r,i;let o=this.buildRPN(t);if(!o)return;let s=new qe;for(;!o.empty();){const t=o.dequeue();if(this.mathematicalOperators.has(t)){let e=t,r=s.pop(),i=s.pop();try{switch(e){case"+":s.push(Be(i).add(Be(r)));break;case"-":s.push(Be(i).sub(Be(r)));break;case"*":s.push(Be(i).mul(Be(r)));break;case"/":s.push(Be(i).div(Be(r)))}}catch(t){return}}else s.push(Be(Number.parseFloat(null!==(r=null===(e=this.variables.get(t))||void 0===e?void 0:e.toString())&&void 0!==r?r:t)))}return null===(i=s.top())||void 0===i?void 0:i.toNumber()}}class Ge{static getCurrentCursorPosition(t){var e,r;let i,o=window.getSelection(),s=-1;if((null==o?void 0:o.focusNode)&&Ge._isChildOf(o.focusNode,t))for(i=o.focusNode,s=o.focusOffset;i&&i!==t;)if(i.previousSibling)i=i.previousSibling,s+=null!==(r=null===(e=i.textContent)||void 0===e?void 0:e.length)&&void 0!==r?r:0;else if(i=i.parentNode,null===i)break;return s}static setCurrentCursorPosition(t,e){if(t>=0){var r=window.getSelection();let i=Ge._createRange(e,{count:t},void 0);i&&(i.collapse(!1),null==r||r.removeAllRanges(),null==r||r.addRange(i))}}static _createRange(t,e,r){if(r||((r=document.createRange()).selectNode(t),r.setStart(t,0)),0===e.count)r.setEnd(t,e.count);else if(t&&e.count>0)if(t.nodeType===Node.TEXT_NODE)t.textContent.length<e.count?e.count-=t.textContent.length:(r.setEnd(t,e.count),e.count=0);else for(var i=0;i<t.childNodes.length&&(r=Ge._createRange(t.childNodes[i],e,r),0!==e.count);i++);return r}static _isChildOf(t,e){for(;null!==t;){if(t===e)return!0;t=t.parentNode}return!1}static getCursorRect(){var t,e;return null===(e=null===(t=window.getSelection())||void 0===t?void 0:t.getRangeAt(0))||void 0===e?void 0:e.getClientRects()[0]}}We=Ge,Ge.getCaret=t=>{const e=window.getSelection().getRangeAt(0),r=e.cloneRange();return r.selectNodeContents(t),r.setEnd(e.endContainer,e.endOffset),r.toString().length},Ge.setCaret=(t,e)=>{for(const r of e.childNodes)if(r.nodeType==Node.TEXT_NODE){if(r.length>=t){const e=document.createRange(),i=window.getSelection();return e.setStart(r,t),e.collapse(!0),i.removeAllRanges(),i.addRange(e),-1}t-=r.length}else if((t=We.setCaret(t,r))<0)return t;return t};var Xe=function(t,e,r,i){var o,s=arguments.length,n=s<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(t,e,r,i);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(n=(s<3?o(n):s>3?o(e,r,n):o(e,r))||n);return s>3&&n&&Object.defineProperty(e,r,n),n};let Ye=class extends be{constructor(){super(...arguments),this.recommendations=[],this.onClickRecommendation=t=>{}}handleKeydown(t,e){"Enter"==t.code&&(t.preventDefault(),t.stopPropagation(),this.onClickRecommendation(e))}render(){return Lt`
      <ul class="wysiwyg-suggestion-menu">
        ${this.recommendations.map((t=>Lt`<li
            tabindex="0"
            @click=${e=>this.onClickRecommendation(t)}
            @keydown=${e=>this.handleKeydown(e,t)}
          >
            ${t}
          </li>`))}
      </ul>
    `}};Ye.styles=ae`
    ul {
      border: 1px solid var(--fe-suggestion-color, white);
      color: var(--fe-suggestion-color, #bab6c0);
      background-color: var(--fe-suggestion-background-color, #363537);
      box-sizing: border-box;
      width: fit-content;
      list-style-type: none;
      padding: 4px 0px;
      margin: 2px;
    }

    li {
      margin: 0px;
      padding: 2px 6px;
      cursor: pointer;
    }

    li:focus-visible {
      /* outline: 1px solid red; */
      outline: 0px;
      color: var(--fe-suggestion-focus-color, #fce566);
      background-color: var(--fe-suggestion-focus-background-color, #69676c);
    }
  `,Xe([Ee()],Ye.prototype,"recommendations",void 0),Xe([Ee()],Ye.prototype,"onClickRecommendation",void 0),Ye=Xe([we("suggestion-menu")],Ye);var Qe=function(t,e,r,i){var o,s=arguments.length,n=s<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(t,e,r,i);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(n=(s<3?o(n):s>3?o(e,r,n):o(e,r))||n);return s>3&&n&&Object.defineProperty(e,r,n),n};let tr=class extends be{constructor(){super(),this._content="",this._formattedContent=null,this._recommendations=null,this._errorStr=null,this._calculatedResult=null,this.currentCursorPosition=null,this.currentCursorRect=void 0,this.lastInputType="undef",this.variables=new Map,this.minSuggestionLen=2,this._parser=new Ze(this.variables,this.minSuggestionLen)}firstUpdated(t){this._parser=new Ze(this.variables,this.minSuggestionLen)}handleChange(t){t.preventDefault(),this.lastInputType=t.inputType,this._content=t.target.innerText,this.parseInput(),t.target.focus()}onClickRecommendation(t){document.getElementById("wysiwyg-editor")&&(this.parseInput(t),this.currentCursorPosition=null)}parseInput(t=null){let e=document.getElementById("wysiwyg-editor");if(!e)return;this.currentCursorPosition=t?this.currentCursorPosition:Ge.getCaret(e);const r=this._parser.parseInput(this._content,this.currentCursorPosition,t);this._recommendations=r.recommendations,this._formattedContent=r.formattedContent,this._errorStr=r.errorStr,("insertCompositionText"!=this.lastInputType||t)&&(e.innerHTML=r.formattedString),this._content=e.innerText,t&&(this._recommendations=null,this.currentCursorPosition=r.newCursorPosition),Ge.setCaret(this.currentCursorPosition,e),null==e||e.focus(),this.currentCursorRect=Ge.getCursorRect(),this.requestUpdate()}requestCalculate(){var t;if(this._parser.parseInput(this._content).errorStr)return;const e=this._parser.calculate(this._content);this._content=null!==(t=this._parser.addParens(this._content))&&void 0!==t?t:this._content,this.parseInput(),this._calculatedResult=null!=e?e:NaN,this._errorStr=null==e?"Division by zero encountered":this._errorStr,this._recommendations=null,this.requestUpdate()}requestFormat(){var t;this._content=null!==(t=this._parser.addParens(this._content))&&void 0!==t?t:this._content,this.parseInput(),this._recommendations=null,this.requestUpdate()}createRenderRoot(){return this}render(){var t,e,r,i,o;return Lt`
      <style>
        ${Pe}
        ${Re}
      </style>
      <div
        contenteditable
        id="wysiwyg-editor"
        spellcheck="false"
        autocomplete="off"
        @input=${this.handleChange}
      ></div>
      ${this._recommendations?Lt`<div
            style="
              position: absolute; 
              left: ${(null===(t=this.currentCursorRect)||void 0===t?void 0:t.left)+"px"}; 
              top: ${(null!==(r=null===(e=this.currentCursorRect)||void 0===e?void 0:e.top)&&void 0!==r?r:0)+window.scrollY+"px"};
            "
          >
            <suggestion-menu
              .recommendations=${this._recommendations}
              .onClickRecommendation=${t=>this.onClickRecommendation(t)}
            ></suggestion-menu>
          </div>`:Lt``}
      <div id="wysiwyg-err" class="${null!==(i=this._errorStr)&&void 0!==i?i:"wysiwyg-no-err"}">
        ${null!==(o=this._errorStr)&&void 0!==o?o:"No Errors"}
      </div>
      <button class="primary-text-button" @click=${this.requestCalculate}>
        Calculate
      </button>
      <button class="primary-text-button" @click=${this.requestFormat}>
        Format
      </button>
      <p>${this._calculatedResult}</p>
    `}};Qe([Se()],tr.prototype,"_content",void 0),Qe([Se()],tr.prototype,"_formattedContent",void 0),Qe([Se()],tr.prototype,"_recommendations",void 0),Qe([Se()],tr.prototype,"_errorStr",void 0),Qe([Se()],tr.prototype,"_calculatedResult",void 0),Qe([Se()],tr.prototype,"currentCursorPosition",void 0),Qe([Se()],tr.prototype,"currentCursorRect",void 0),Qe([Se()],tr.prototype,"lastInputType",void 0),Qe([Ee({type:Map,converter:{fromAttribute:t=>{if(t)return new Map(JSON.parse(t))},toAttribute:t=>JSON.stringify(Array.from(t.entries()))}})],tr.prototype,"variables",void 0),Qe([Ee()],tr.prototype,"minSuggestionLen",void 0),tr=Qe([we("formula-editor")],tr);let er=class extends rt{constructor(){super(...arguments),this.fm=new tr}render(){M` <formula-editor></formula-editor> `}};var rr;er=function(t,e,r,i){var o,s=arguments.length,n=s<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(t,e,r,i);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(n=(s<3?o(n):s>3?o(e,r,n):o(e,r))||n);return s>3&&n&&Object.defineProperty(e,r,n),n}([(rr="showcase-gallery",t=>"function"==typeof t?((t,e)=>(customElements.define(t,e),e))(rr,t):((t,e)=>{const{kind:r,elements:i}=e;return{kind:r,elements:i,finisher(e){customElements.define(t,e)}}})(rr,t))],er)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,