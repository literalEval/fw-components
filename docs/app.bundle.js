/*! For license information please see app.bundle.js.LICENSE.txt */
(()=>{"use strict";const t=window,e=t.ShadowRoot&&(void 0===t.ShadyCSS||t.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,i=Symbol(),s=new WeakMap;class r{constructor(t,e,s){if(this._$cssResult$=!0,s!==i)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const i=this.t;if(e&&void 0===t){const e=void 0!==i&&1===i.length;e&&(t=s.get(i)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),e&&s.set(i,t))}return t}toString(){return this.cssText}}const n=e?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const i of t.cssRules)e+=i.cssText;return(t=>new r("string"==typeof t?t:t+"",void 0,i))(e)})(t):t;var o;const l=window,h=l.trustedTypes,a=h?h.emptyScript:"",c=l.reactiveElementPolyfillSupport,d={toAttribute(t,e){switch(e){case Boolean:t=t?a:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){let i=t;switch(e){case Boolean:i=null!==t;break;case Number:i=null===t?null:Number(t);break;case Object:case Array:try{i=JSON.parse(t)}catch(t){i=null}}return i}},u=(t,e)=>e!==t&&(e==e||t==t),p={attribute:!0,type:String,converter:d,reflect:!1,hasChanged:u};class f extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(t){var e;this.finalize(),(null!==(e=this.h)&&void 0!==e?e:this.h=[]).push(t)}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((e,i)=>{const s=this._$Ep(i,e);void 0!==s&&(this._$Ev.set(s,i),t.push(s))})),t}static createProperty(t,e=p){if(e.state&&(e.attribute=!1),this.finalize(),this.elementProperties.set(t,e),!e.noAccessor&&!this.prototype.hasOwnProperty(t)){const i="symbol"==typeof t?Symbol():"__"+t,s=this.getPropertyDescriptor(t,i,e);void 0!==s&&Object.defineProperty(this.prototype,t,s)}}static getPropertyDescriptor(t,e,i){return{get(){return this[e]},set(s){const r=this[t];this[e]=s,this.requestUpdate(t,r,i)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||p}static finalize(){if(this.hasOwnProperty("finalized"))return!1;this.finalized=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),void 0!==t.h&&(this.h=[...t.h]),this.elementProperties=new Map(t.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const t=this.properties,e=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const i of e)this.createProperty(i,t[i])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(t){const e=[];if(Array.isArray(t)){const i=new Set(t.flat(1/0).reverse());for(const t of i)e.unshift(n(t))}else void 0!==t&&e.push(n(t));return e}static _$Ep(t,e){const i=e.attribute;return!1===i?void 0:"string"==typeof i?i:"string"==typeof t?t.toLowerCase():void 0}u(){var t;this._$E_=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(t=this.constructor.h)||void 0===t||t.forEach((t=>t(this)))}addController(t){var e,i;(null!==(e=this._$ES)&&void 0!==e?e:this._$ES=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(i=t.hostConnected)||void 0===i||i.call(t))}removeController(t){var e;null===(e=this._$ES)||void 0===e||e.splice(this._$ES.indexOf(t)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((t,e)=>{this.hasOwnProperty(e)&&(this._$Ei.set(e,this[e]),delete this[e])}))}createRenderRoot(){var i;const s=null!==(i=this.shadowRoot)&&void 0!==i?i:this.attachShadow(this.constructor.shadowRootOptions);return((i,s)=>{e?i.adoptedStyleSheets=s.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):s.forEach((e=>{const s=document.createElement("style"),r=t.litNonce;void 0!==r&&s.setAttribute("nonce",r),s.textContent=e.cssText,i.appendChild(s)}))})(s,this.constructor.elementStyles),s}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostConnected)||void 0===e?void 0:e.call(t)}))}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostDisconnected)||void 0===e?void 0:e.call(t)}))}attributeChangedCallback(t,e,i){this._$AK(t,i)}_$EO(t,e,i=p){var s;const r=this.constructor._$Ep(t,i);if(void 0!==r&&!0===i.reflect){const n=(void 0!==(null===(s=i.converter)||void 0===s?void 0:s.toAttribute)?i.converter:d).toAttribute(e,i.type);this._$El=t,null==n?this.removeAttribute(r):this.setAttribute(r,n),this._$El=null}}_$AK(t,e){var i;const s=this.constructor,r=s._$Ev.get(t);if(void 0!==r&&this._$El!==r){const t=s.getPropertyOptions(r),n="function"==typeof t.converter?{fromAttribute:t.converter}:void 0!==(null===(i=t.converter)||void 0===i?void 0:i.fromAttribute)?t.converter:d;this._$El=r,this[r]=n.fromAttribute(e,t.type),this._$El=null}}requestUpdate(t,e,i){let s=!0;void 0!==t&&(((i=i||this.constructor.getPropertyOptions(t)).hasChanged||u)(this[t],e)?(this._$AL.has(t)||this._$AL.set(t,e),!0===i.reflect&&this._$El!==t&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(t,i))):s=!1),!this.isUpdatePending&&s&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((t,e)=>this[e]=t)),this._$Ei=void 0);let e=!1;const i=this._$AL;try{e=this.shouldUpdate(i),e?(this.willUpdate(i),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostUpdate)||void 0===e?void 0:e.call(t)})),this.update(i)):this._$Ek()}catch(t){throw e=!1,this._$Ek(),t}e&&this._$AE(i)}willUpdate(t){}_$AE(t){var e;null===(e=this._$ES)||void 0===e||e.forEach((t=>{var e;return null===(e=t.hostUpdated)||void 0===e?void 0:e.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(t){return!0}update(t){void 0!==this._$EC&&(this._$EC.forEach(((t,e)=>this._$EO(e,this[e],t))),this._$EC=void 0),this._$Ek()}updated(t){}firstUpdated(t){}}var v;f.finalized=!0,f.elementProperties=new Map,f.elementStyles=[],f.shadowRootOptions={mode:"open"},null==c||c({ReactiveElement:f}),(null!==(o=l.reactiveElementVersions)&&void 0!==o?o:l.reactiveElementVersions=[]).push("1.6.1");const m=window,_=m.trustedTypes,g=_?_.createPolicy("lit-html",{createHTML:t=>t}):void 0,$="$lit$",y=`lit$${(Math.random()+"").slice(9)}$`,E="?"+y,w=`<${E}>`,A=document,b=()=>A.createComment(""),S=t=>null===t||"object"!=typeof t&&"function"!=typeof t,C=Array.isArray,P="[ \t\n\f\r]",R=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,x=/-->/g,U=/>/g,O=RegExp(`>|${P}(?:([^\\s"'>=/]+)(${P}*=${P}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),N=/'/g,k=/"/g,T=/^(?:script|style|textarea|title)$/i,M=t=>(e,...i)=>({_$litType$:t,strings:e,values:i}),H=M(1),D=(M(2),Symbol.for("lit-noChange")),j=Symbol.for("lit-nothing"),I=new WeakMap,z=A.createTreeWalker(A,129,null,!1),L=(t,e)=>{const i=t.length-1,s=[];let r,n=2===e?"<svg>":"",o=R;for(let e=0;e<i;e++){const i=t[e];let l,h,a=-1,c=0;for(;c<i.length&&(o.lastIndex=c,h=o.exec(i),null!==h);)c=o.lastIndex,o===R?"!--"===h[1]?o=x:void 0!==h[1]?o=U:void 0!==h[2]?(T.test(h[2])&&(r=RegExp("</"+h[2],"g")),o=O):void 0!==h[3]&&(o=O):o===O?">"===h[0]?(o=null!=r?r:R,a=-1):void 0===h[1]?a=-2:(a=o.lastIndex-h[2].length,l=h[1],o=void 0===h[3]?O:'"'===h[3]?k:N):o===k||o===N?o=O:o===x||o===U?o=R:(o=O,r=void 0);const d=o===O&&t[e+1].startsWith("/>")?" ":"";n+=o===R?i+w:a>=0?(s.push(l),i.slice(0,a)+$+i.slice(a)+y+d):i+y+(-2===a?(s.push(void 0),e):d)}const l=n+(t[i]||"<?>")+(2===e?"</svg>":"");if(!Array.isArray(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return[void 0!==g?g.createHTML(l):l,s]};class q{constructor({strings:t,_$litType$:e},i){let s;this.parts=[];let r=0,n=0;const o=t.length-1,l=this.parts,[h,a]=L(t,e);if(this.el=q.createElement(h,i),z.currentNode=this.el.content,2===e){const t=this.el.content,e=t.firstChild;e.remove(),t.append(...e.childNodes)}for(;null!==(s=z.nextNode())&&l.length<o;){if(1===s.nodeType){if(s.hasAttributes()){const t=[];for(const e of s.getAttributeNames())if(e.endsWith($)||e.startsWith(y)){const i=a[n++];if(t.push(e),void 0!==i){const t=s.getAttribute(i.toLowerCase()+$).split(y),e=/([.?@])?(.*)/.exec(i);l.push({type:1,index:r,name:e[2],strings:t,ctor:"."===e[1]?W:"?"===e[1]?G:"@"===e[1]?Z:K})}else l.push({type:6,index:r})}for(const e of t)s.removeAttribute(e)}if(T.test(s.tagName)){const t=s.textContent.split(y),e=t.length-1;if(e>0){s.textContent=_?_.emptyScript:"";for(let i=0;i<e;i++)s.append(t[i],b()),z.nextNode(),l.push({type:2,index:++r});s.append(t[e],b())}}}else if(8===s.nodeType)if(s.data===E)l.push({type:2,index:r});else{let t=-1;for(;-1!==(t=s.data.indexOf(y,t+1));)l.push({type:7,index:r}),t+=y.length-1}r++}}static createElement(t,e){const i=A.createElement("template");return i.innerHTML=t,i}}function B(t,e,i=t,s){var r,n,o,l;if(e===D)return e;let h=void 0!==s?null===(r=i._$Co)||void 0===r?void 0:r[s]:i._$Cl;const a=S(e)?void 0:e._$litDirective$;return(null==h?void 0:h.constructor)!==a&&(null===(n=null==h?void 0:h._$AO)||void 0===n||n.call(h,!1),void 0===a?h=void 0:(h=new a(t),h._$AT(t,i,s)),void 0!==s?(null!==(o=(l=i)._$Co)&&void 0!==o?o:l._$Co=[])[s]=h:i._$Cl=h),void 0!==h&&(e=B(t,h._$AS(t,e.values),h,s)),e}class V{constructor(t,e){this._$AV=[],this._$AN=void 0,this._$AD=t,this._$AM=e}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(t){var e;const{el:{content:i},parts:s}=this._$AD,r=(null!==(e=null==t?void 0:t.creationScope)&&void 0!==e?e:A).importNode(i,!0);z.currentNode=r;let n=z.nextNode(),o=0,l=0,h=s[0];for(;void 0!==h;){if(o===h.index){let e;2===h.type?e=new F(n,n.nextSibling,this,t):1===h.type?e=new h.ctor(n,h.name,h.strings,this,t):6===h.type&&(e=new X(n,this,t)),this._$AV.push(e),h=s[++l]}o!==(null==h?void 0:h.index)&&(n=z.nextNode(),o++)}return z.currentNode=A,r}v(t){let e=0;for(const i of this._$AV)void 0!==i&&(void 0!==i.strings?(i._$AI(t,i,e),e+=i.strings.length-2):i._$AI(t[e])),e++}}class F{constructor(t,e,i,s){var r;this.type=2,this._$AH=j,this._$AN=void 0,this._$AA=t,this._$AB=e,this._$AM=i,this.options=s,this._$Cp=null===(r=null==s?void 0:s.isConnected)||void 0===r||r}get _$AU(){var t,e;return null!==(e=null===(t=this._$AM)||void 0===t?void 0:t._$AU)&&void 0!==e?e:this._$Cp}get parentNode(){let t=this._$AA.parentNode;const e=this._$AM;return void 0!==e&&11===(null==t?void 0:t.nodeType)&&(t=e.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,e=this){t=B(this,t,e),S(t)?t===j||null==t||""===t?(this._$AH!==j&&this._$AR(),this._$AH=j):t!==this._$AH&&t!==D&&this._(t):void 0!==t._$litType$?this.g(t):void 0!==t.nodeType?this.$(t):(t=>C(t)||"function"==typeof(null==t?void 0:t[Symbol.iterator]))(t)?this.T(t):this._(t)}k(t){return this._$AA.parentNode.insertBefore(t,this._$AB)}$(t){this._$AH!==t&&(this._$AR(),this._$AH=this.k(t))}_(t){this._$AH!==j&&S(this._$AH)?this._$AA.nextSibling.data=t:this.$(A.createTextNode(t)),this._$AH=t}g(t){var e;const{values:i,_$litType$:s}=t,r="number"==typeof s?this._$AC(t):(void 0===s.el&&(s.el=q.createElement(s.h,this.options)),s);if((null===(e=this._$AH)||void 0===e?void 0:e._$AD)===r)this._$AH.v(i);else{const t=new V(r,this),e=t.u(this.options);t.v(i),this.$(e),this._$AH=t}}_$AC(t){let e=I.get(t.strings);return void 0===e&&I.set(t.strings,e=new q(t)),e}T(t){C(this._$AH)||(this._$AH=[],this._$AR());const e=this._$AH;let i,s=0;for(const r of t)s===e.length?e.push(i=new F(this.k(b()),this.k(b()),this,this.options)):i=e[s],i._$AI(r),s++;s<e.length&&(this._$AR(i&&i._$AB.nextSibling,s),e.length=s)}_$AR(t=this._$AA.nextSibling,e){var i;for(null===(i=this._$AP)||void 0===i||i.call(this,!1,!0,e);t&&t!==this._$AB;){const e=t.nextSibling;t.remove(),t=e}}setConnected(t){var e;void 0===this._$AM&&(this._$Cp=t,null===(e=this._$AP)||void 0===e||e.call(this,t))}}class K{constructor(t,e,i,s,r){this.type=1,this._$AH=j,this._$AN=void 0,this.element=t,this.name=e,this._$AM=s,this.options=r,i.length>2||""!==i[0]||""!==i[1]?(this._$AH=Array(i.length-1).fill(new String),this.strings=i):this._$AH=j}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(t,e=this,i,s){const r=this.strings;let n=!1;if(void 0===r)t=B(this,t,e,0),n=!S(t)||t!==this._$AH&&t!==D,n&&(this._$AH=t);else{const s=t;let o,l;for(t=r[0],o=0;o<r.length-1;o++)l=B(this,s[i+o],e,o),l===D&&(l=this._$AH[o]),n||(n=!S(l)||l!==this._$AH[o]),l===j?t=j:t!==j&&(t+=(null!=l?l:"")+r[o+1]),this._$AH[o]=l}n&&!s&&this.j(t)}j(t){t===j?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=t?t:"")}}class W extends K{constructor(){super(...arguments),this.type=3}j(t){this.element[this.name]=t===j?void 0:t}}const J=_?_.emptyScript:"";class G extends K{constructor(){super(...arguments),this.type=4}j(t){t&&t!==j?this.element.setAttribute(this.name,J):this.element.removeAttribute(this.name)}}class Z extends K{constructor(t,e,i,s,r){super(t,e,i,s,r),this.type=5}_$AI(t,e=this){var i;if((t=null!==(i=B(this,t,e,0))&&void 0!==i?i:j)===D)return;const s=this._$AH,r=t===j&&s!==j||t.capture!==s.capture||t.once!==s.once||t.passive!==s.passive,n=t!==j&&(s===j||r);r&&this.element.removeEventListener(this.name,this,s),n&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){var e,i;"function"==typeof this._$AH?this._$AH.call(null!==(i=null===(e=this.options)||void 0===e?void 0:e.host)&&void 0!==i?i:this.element,t):this._$AH.handleEvent(t)}}class X{constructor(t,e,i){this.element=t,this.type=6,this._$AN=void 0,this._$AM=e,this.options=i}get _$AU(){return this._$AM._$AU}_$AI(t){B(this,t)}}const Q=m.litHtmlPolyfillSupport;null==Q||Q(q,F),(null!==(v=m.litHtmlVersions)&&void 0!==v?v:m.litHtmlVersions=[]).push("2.7.4");const Y=window,tt=Y.ShadowRoot&&(void 0===Y.ShadyCSS||Y.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,et=Symbol(),it=new WeakMap;class st{constructor(t,e,i){if(this._$cssResult$=!0,i!==et)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const e=this.t;if(tt&&void 0===t){const i=void 0!==e&&1===e.length;i&&(t=it.get(e)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),i&&it.set(e,t))}return t}toString(){return this.cssText}}const rt=tt?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const i of t.cssRules)e+=i.cssText;return(t=>new st("string"==typeof t?t:t+"",void 0,et))(e)})(t):t;var nt;const ot=window,lt=ot.trustedTypes,ht=lt?lt.emptyScript:"",at=ot.reactiveElementPolyfillSupport,ct={toAttribute(t,e){switch(e){case Boolean:t=t?ht:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){let i=t;switch(e){case Boolean:i=null!==t;break;case Number:i=null===t?null:Number(t);break;case Object:case Array:try{i=JSON.parse(t)}catch(t){i=null}}return i}},dt=(t,e)=>e!==t&&(e==e||t==t),ut={attribute:!0,type:String,converter:ct,reflect:!1,hasChanged:dt};class pt extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(t){var e;this.finalize(),(null!==(e=this.h)&&void 0!==e?e:this.h=[]).push(t)}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((e,i)=>{const s=this._$Ep(i,e);void 0!==s&&(this._$Ev.set(s,i),t.push(s))})),t}static createProperty(t,e=ut){if(e.state&&(e.attribute=!1),this.finalize(),this.elementProperties.set(t,e),!e.noAccessor&&!this.prototype.hasOwnProperty(t)){const i="symbol"==typeof t?Symbol():"__"+t,s=this.getPropertyDescriptor(t,i,e);void 0!==s&&Object.defineProperty(this.prototype,t,s)}}static getPropertyDescriptor(t,e,i){return{get(){return this[e]},set(s){const r=this[t];this[e]=s,this.requestUpdate(t,r,i)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||ut}static finalize(){if(this.hasOwnProperty("finalized"))return!1;this.finalized=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),void 0!==t.h&&(this.h=[...t.h]),this.elementProperties=new Map(t.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const t=this.properties,e=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const i of e)this.createProperty(i,t[i])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(t){const e=[];if(Array.isArray(t)){const i=new Set(t.flat(1/0).reverse());for(const t of i)e.unshift(rt(t))}else void 0!==t&&e.push(rt(t));return e}static _$Ep(t,e){const i=e.attribute;return!1===i?void 0:"string"==typeof i?i:"string"==typeof t?t.toLowerCase():void 0}u(){var t;this._$E_=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(t=this.constructor.h)||void 0===t||t.forEach((t=>t(this)))}addController(t){var e,i;(null!==(e=this._$ES)&&void 0!==e?e:this._$ES=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(i=t.hostConnected)||void 0===i||i.call(t))}removeController(t){var e;null===(e=this._$ES)||void 0===e||e.splice(this._$ES.indexOf(t)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((t,e)=>{this.hasOwnProperty(e)&&(this._$Ei.set(e,this[e]),delete this[e])}))}createRenderRoot(){var t;const e=null!==(t=this.shadowRoot)&&void 0!==t?t:this.attachShadow(this.constructor.shadowRootOptions);return((t,e)=>{tt?t.adoptedStyleSheets=e.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):e.forEach((e=>{const i=document.createElement("style"),s=Y.litNonce;void 0!==s&&i.setAttribute("nonce",s),i.textContent=e.cssText,t.appendChild(i)}))})(e,this.constructor.elementStyles),e}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostConnected)||void 0===e?void 0:e.call(t)}))}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostDisconnected)||void 0===e?void 0:e.call(t)}))}attributeChangedCallback(t,e,i){this._$AK(t,i)}_$EO(t,e,i=ut){var s;const r=this.constructor._$Ep(t,i);if(void 0!==r&&!0===i.reflect){const n=(void 0!==(null===(s=i.converter)||void 0===s?void 0:s.toAttribute)?i.converter:ct).toAttribute(e,i.type);this._$El=t,null==n?this.removeAttribute(r):this.setAttribute(r,n),this._$El=null}}_$AK(t,e){var i;const s=this.constructor,r=s._$Ev.get(t);if(void 0!==r&&this._$El!==r){const t=s.getPropertyOptions(r),n="function"==typeof t.converter?{fromAttribute:t.converter}:void 0!==(null===(i=t.converter)||void 0===i?void 0:i.fromAttribute)?t.converter:ct;this._$El=r,this[r]=n.fromAttribute(e,t.type),this._$El=null}}requestUpdate(t,e,i){let s=!0;void 0!==t&&(((i=i||this.constructor.getPropertyOptions(t)).hasChanged||dt)(this[t],e)?(this._$AL.has(t)||this._$AL.set(t,e),!0===i.reflect&&this._$El!==t&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(t,i))):s=!1),!this.isUpdatePending&&s&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((t,e)=>this[e]=t)),this._$Ei=void 0);let e=!1;const i=this._$AL;try{e=this.shouldUpdate(i),e?(this.willUpdate(i),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostUpdate)||void 0===e?void 0:e.call(t)})),this.update(i)):this._$Ek()}catch(t){throw e=!1,this._$Ek(),t}e&&this._$AE(i)}willUpdate(t){}_$AE(t){var e;null===(e=this._$ES)||void 0===e||e.forEach((t=>{var e;return null===(e=t.hostUpdated)||void 0===e?void 0:e.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(t){return!0}update(t){void 0!==this._$EC&&(this._$EC.forEach(((t,e)=>this._$EO(e,this[e],t))),this._$EC=void 0),this._$Ek()}updated(t){}firstUpdated(t){}}var ft,vt;pt.finalized=!0,pt.elementProperties=new Map,pt.elementStyles=[],pt.shadowRootOptions={mode:"open"},null==at||at({ReactiveElement:pt}),(null!==(nt=ot.reactiveElementVersions)&&void 0!==nt?nt:ot.reactiveElementVersions=[]).push("1.6.1");class mt extends pt{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var t,e;const i=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=i.firstChild),i}update(t){const e=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=((t,e,i)=>{var s,r;const n=null!==(s=null==i?void 0:i.renderBefore)&&void 0!==s?s:e;let o=n._$litPart$;if(void 0===o){const t=null!==(r=null==i?void 0:i.renderBefore)&&void 0!==r?r:null;n._$litPart$=o=new F(e.insertBefore(b(),t),t,void 0,null!=i?i:{})}return o._$AI(t),o})(e,this.renderRoot,this.renderOptions)}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!0)}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!1)}render(){return D}}mt.finalized=!0,mt._$litElement$=!0,null===(ft=globalThis.litElementHydrateSupport)||void 0===ft||ft.call(globalThis,{LitElement:mt});const _t=globalThis.litElementPolyfillSupport;null==_t||_t({LitElement:mt}),(null!==(vt=globalThis.litElementVersions)&&void 0!==vt?vt:globalThis.litElementVersions=[]).push("3.3.2");const gt=t=>e=>"function"==typeof e?((t,e)=>(customElements.define(t,e),e))(t,e):((t,e)=>{const{kind:i,elements:s}=e;return{kind:i,elements:s,finisher(e){customElements.define(t,e)}}})(t,e),$t=(t,e)=>"method"===e.kind&&e.descriptor&&!("value"in e.descriptor)?{...e,finisher(i){i.createProperty(e.key,t)}}:{kind:"field",key:Symbol(),placement:"own",descriptor:{},originalKey:e.key,initializer(){"function"==typeof e.initializer&&(this[e.key]=e.initializer.call(this))},finisher(i){i.createProperty(e.key,t)}};function yt(t){return(e,i)=>void 0!==i?((t,e,i)=>{e.constructor.createProperty(i,t)})(t,e,i):$t(t,e)}function Et(t){return yt({...t,state:!0})}var wt;null===(wt=window.HTMLSlotElement)||void 0===wt||wt.prototype.assignedElements;var At=1e6,bt="[big.js] ",St=bt+"Invalid ",Ct=St+"decimal places",Pt=St+"rounding mode",Rt=bt+"Division by zero",xt={},Ut=void 0,Ot=/^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;function Nt(t,e,i,s){var r=t.c;if(i===Ut&&(i=t.constructor.RM),0!==i&&1!==i&&2!==i&&3!==i)throw Error(Pt);if(e<1)s=3===i&&(s||!!r[0])||0===e&&(1===i&&r[0]>=5||2===i&&(r[0]>5||5===r[0]&&(s||r[1]!==Ut))),r.length=1,s?(t.e=t.e-e+1,r[0]=1):r[0]=t.e=0;else if(e<r.length){if(s=1===i&&r[e]>=5||2===i&&(r[e]>5||5===r[e]&&(s||r[e+1]!==Ut||1&r[e-1]))||3===i&&(s||!!r[0]),r.length=e,s)for(;++r[--e]>9;)if(r[e]=0,0===e){++t.e,r.unshift(1);break}for(e=r.length;!r[--e];)r.pop()}return t}function kt(t,e,i){var s=t.e,r=t.c.join(""),n=r.length;if(e)r=r.charAt(0)+(n>1?"."+r.slice(1):"")+(s<0?"e":"e+")+s;else if(s<0){for(;++s;)r="0"+r;r="0."+r}else if(s>0)if(++s>n)for(s-=n;s--;)r+="0";else s<n&&(r=r.slice(0,s)+"."+r.slice(s));else n>1&&(r=r.charAt(0)+"."+r.slice(1));return t.s<0&&i?"-"+r:r}xt.abs=function(){var t=new this.constructor(this);return t.s=1,t},xt.cmp=function(t){var e,i=this,s=i.c,r=(t=new i.constructor(t)).c,n=i.s,o=t.s,l=i.e,h=t.e;if(!s[0]||!r[0])return s[0]?n:r[0]?-o:0;if(n!=o)return n;if(e=n<0,l!=h)return l>h^e?1:-1;for(o=(l=s.length)<(h=r.length)?l:h,n=-1;++n<o;)if(s[n]!=r[n])return s[n]>r[n]^e?1:-1;return l==h?0:l>h^e?1:-1},xt.div=function(t){var e=this,i=e.constructor,s=e.c,r=(t=new i(t)).c,n=e.s==t.s?1:-1,o=i.DP;if(o!==~~o||o<0||o>At)throw Error(Ct);if(!r[0])throw Error(Rt);if(!s[0])return t.s=n,t.c=[t.e=0],t;var l,h,a,c,d,u=r.slice(),p=l=r.length,f=s.length,v=s.slice(0,l),m=v.length,_=t,g=_.c=[],$=0,y=o+(_.e=e.e-t.e)+1;for(_.s=n,n=y<0?0:y,u.unshift(0);m++<l;)v.push(0);do{for(a=0;a<10;a++){if(l!=(m=v.length))c=l>m?1:-1;else for(d=-1,c=0;++d<l;)if(r[d]!=v[d]){c=r[d]>v[d]?1:-1;break}if(!(c<0))break;for(h=m==l?r:u;m;){if(v[--m]<h[m]){for(d=m;d&&!v[--d];)v[d]=9;--v[d],v[m]+=10}v[m]-=h[m]}for(;!v[0];)v.shift()}g[$++]=c?a:++a,v[0]&&c?v[m]=s[p]||0:v=[s[p]]}while((p++<f||v[0]!==Ut)&&n--);return g[0]||1==$||(g.shift(),_.e--,y--),$>y&&Nt(_,y,i.RM,v[0]!==Ut),_},xt.eq=function(t){return 0===this.cmp(t)},xt.gt=function(t){return this.cmp(t)>0},xt.gte=function(t){return this.cmp(t)>-1},xt.lt=function(t){return this.cmp(t)<0},xt.lte=function(t){return this.cmp(t)<1},xt.minus=xt.sub=function(t){var e,i,s,r,n=this,o=n.constructor,l=n.s,h=(t=new o(t)).s;if(l!=h)return t.s=-h,n.plus(t);var a=n.c.slice(),c=n.e,d=t.c,u=t.e;if(!a[0]||!d[0])return d[0]?t.s=-h:a[0]?t=new o(n):t.s=1,t;if(l=c-u){for((r=l<0)?(l=-l,s=a):(u=c,s=d),s.reverse(),h=l;h--;)s.push(0);s.reverse()}else for(i=((r=a.length<d.length)?a:d).length,l=h=0;h<i;h++)if(a[h]!=d[h]){r=a[h]<d[h];break}if(r&&(s=a,a=d,d=s,t.s=-t.s),(h=(i=d.length)-(e=a.length))>0)for(;h--;)a[e++]=0;for(h=e;i>l;){if(a[--i]<d[i]){for(e=i;e&&!a[--e];)a[e]=9;--a[e],a[i]+=10}a[i]-=d[i]}for(;0===a[--h];)a.pop();for(;0===a[0];)a.shift(),--u;return a[0]||(t.s=1,a=[u=0]),t.c=a,t.e=u,t},xt.mod=function(t){var e,i=this,s=i.constructor,r=i.s,n=(t=new s(t)).s;if(!t.c[0])throw Error(Rt);return i.s=t.s=1,e=1==t.cmp(i),i.s=r,t.s=n,e?new s(i):(r=s.DP,n=s.RM,s.DP=s.RM=0,i=i.div(t),s.DP=r,s.RM=n,this.minus(i.times(t)))},xt.neg=function(){var t=new this.constructor(this);return t.s=-t.s,t},xt.plus=xt.add=function(t){var e,i,s,r=this,n=r.constructor;if(t=new n(t),r.s!=t.s)return t.s=-t.s,r.minus(t);var o=r.e,l=r.c,h=t.e,a=t.c;if(!l[0]||!a[0])return a[0]||(l[0]?t=new n(r):t.s=r.s),t;if(l=l.slice(),e=o-h){for(e>0?(h=o,s=a):(e=-e,s=l),s.reverse();e--;)s.push(0);s.reverse()}for(l.length-a.length<0&&(s=a,a=l,l=s),e=a.length,i=0;e;l[e]%=10)i=(l[--e]=l[e]+a[e]+i)/10|0;for(i&&(l.unshift(i),++h),e=l.length;0===l[--e];)l.pop();return t.c=l,t.e=h,t},xt.pow=function(t){var e=this,i=new e.constructor("1"),s=i,r=t<0;if(t!==~~t||t<-1e6||t>1e6)throw Error(St+"exponent");for(r&&(t=-t);1&t&&(s=s.times(e)),t>>=1;)e=e.times(e);return r?i.div(s):s},xt.prec=function(t,e){if(t!==~~t||t<1||t>At)throw Error(St+"precision");return Nt(new this.constructor(this),t,e)},xt.round=function(t,e){if(t===Ut)t=0;else if(t!==~~t||t<-At||t>At)throw Error(Ct);return Nt(new this.constructor(this),t+this.e+1,e)},xt.sqrt=function(){var t,e,i,s=this,r=s.constructor,n=s.s,o=s.e,l=new r("0.5");if(!s.c[0])return new r(s);if(n<0)throw Error(bt+"No square root");0===(n=Math.sqrt(s+""))||n===1/0?((e=s.c.join("")).length+o&1||(e+="0"),o=((o+1)/2|0)-(o<0||1&o),t=new r(((n=Math.sqrt(e))==1/0?"5e":(n=n.toExponential()).slice(0,n.indexOf("e")+1))+o)):t=new r(n+""),o=t.e+(r.DP+=4);do{i=t,t=l.times(i.plus(s.div(i)))}while(i.c.slice(0,o).join("")!==t.c.slice(0,o).join(""));return Nt(t,(r.DP-=4)+t.e+1,r.RM)},xt.times=xt.mul=function(t){var e,i=this,s=i.constructor,r=i.c,n=(t=new s(t)).c,o=r.length,l=n.length,h=i.e,a=t.e;if(t.s=i.s==t.s?1:-1,!r[0]||!n[0])return t.c=[t.e=0],t;for(t.e=h+a,o<l&&(e=r,r=n,n=e,a=o,o=l,l=a),e=new Array(a=o+l);a--;)e[a]=0;for(h=l;h--;){for(l=0,a=o+h;a>h;)l=e[a]+n[h]*r[a-h-1]+l,e[a--]=l%10,l=l/10|0;e[a]=l}for(l?++t.e:e.shift(),h=e.length;!e[--h];)e.pop();return t.c=e,t},xt.toExponential=function(t,e){var i=this,s=i.c[0];if(t!==Ut){if(t!==~~t||t<0||t>At)throw Error(Ct);for(i=Nt(new i.constructor(i),++t,e);i.c.length<t;)i.c.push(0)}return kt(i,!0,!!s)},xt.toFixed=function(t,e){var i=this,s=i.c[0];if(t!==Ut){if(t!==~~t||t<0||t>At)throw Error(Ct);for(t=t+(i=Nt(new i.constructor(i),t+i.e+1,e)).e+1;i.c.length<t;)i.c.push(0)}return kt(i,!1,!!s)},xt[Symbol.for("nodejs.util.inspect.custom")]=xt.toJSON=xt.toString=function(){var t=this,e=t.constructor;return kt(t,t.e<=e.NE||t.e>=e.PE,!!t.c[0])},xt.toNumber=function(){var t=Number(kt(this,!0,!0));if(!0===this.constructor.strict&&!this.eq(t.toString()))throw Error(bt+"Imprecise conversion");return t},xt.toPrecision=function(t,e){var i=this,s=i.constructor,r=i.c[0];if(t!==Ut){if(t!==~~t||t<1||t>At)throw Error(St+"precision");for(i=Nt(new s(i),t,e);i.c.length<t;)i.c.push(0)}return kt(i,t<=i.e||i.e<=s.NE||i.e>=s.PE,!!r)},xt.valueOf=function(){var t=this,e=t.constructor;if(!0===e.strict)throw Error(bt+"valueOf disallowed");return kt(t,t.e<=e.NE||t.e>=e.PE,!0)};var Tt=function t(){function e(i){var s=this;if(!(s instanceof e))return i===Ut?t():new e(i);if(i instanceof e)s.s=i.s,s.e=i.e,s.c=i.c.slice();else{if("string"!=typeof i){if(!0===e.strict&&"bigint"!=typeof i)throw TypeError(St+"value");i=0===i&&1/i<0?"-0":String(i)}!function(t,e){var i,s,r;if(!Ot.test(e))throw Error(St+"number");for(t.s="-"==e.charAt(0)?(e=e.slice(1),-1):1,(i=e.indexOf("."))>-1&&(e=e.replace(".","")),(s=e.search(/e/i))>0?(i<0&&(i=s),i+=+e.slice(s+1),e=e.substring(0,s)):i<0&&(i=e.length),r=e.length,s=0;s<r&&"0"==e.charAt(s);)++s;if(s==r)t.c=[t.e=0];else{for(;r>0&&"0"==e.charAt(--r););for(t.e=i-s-1,t.c=[],i=0;s<=r;)t.c[i++]=+e.charAt(s++)}}(s,i)}s.constructor=e}return e.prototype=xt,e.DP=20,e.RM=1,e.NE=-7,e.PE=21,e.strict=!1,e.roundDown=0,e.roundHalfUp=1,e.roundHalfEven=2,e.roundUp=3,e}();const Mt=Tt;class Ht{constructor(){this._inner=[]}push(t){this._inner.push(t)}pop(){return this._inner.pop()}top(){return this._inner.at(-1)}empty(){return 0==this._inner.length}print(){console.log(this._inner)}}class Dt{constructor(){this._inner={},this._head=0,this._tail=0}enqueue(t){this._inner[this._tail]=t,this._tail++}dequeue(){if(this._tail===this._head)return;const t=this._inner[this._head];return delete this._inner[this._head],this._head++,t}peek(){return this._inner[this._head]}empty(){return this._head==this._tail}print(){console.log(this._inner)}}var jt;!function(t){t[t.VARIABLE=0]="VARIABLE",t[t.OPERATOR=1]="OPERATOR",t[t.UNDEF=2]="UNDEF"}(jt||(jt={}));class It{constructor(t){this._trie=new zt,this._trie.insertAll();for(let e of t)this.insert(e[0])}insert(t,e=-1,i=void 0){-1!=e?e!=t.length?(i.getChild(t[e])||null==i||i.addChild(t[e]),this.insert(t,e+1,i.getChild(t[e]))):null==i||i.addChild("\0"):this.insert(t,0,this._trie)}getRecommendation(t){if(t.length<2)return null;let e=[],i=0,s=this._trie;for(;s&&i<t.length;)s=s.getChild(t[i]),i++;return s?(this._traverseAndGet(e,s,t,i),e):null}_traverseAndGet(t,e,i,s,r=""){for(let n of e.children)"\0"==n[0]&&t.push(i+r),this._traverseAndGet(t,n[1],i,s,r+n[0])}}class zt{constructor(){this._children=new Map}get children(){return this._children}insertAll(){for(let t=0;t<26;t++)this._children.set(String.fromCharCode(t+97),new zt)}getChild(t){return this._children.get(t)}addChild(t){this._children.set(t,new zt)}}class Lt{constructor(t,e){this.operatorPrecedence={"^":3,"/":2,"*":2,"+":1,"-":1},this.mappedFormula="",this.variables=t,this.mathematicalExpressions=e,this._recommender=new It(this.variables)}parseInput(t,e=null,i=null){let s=t.split(/([-+(),*/:?\s])/g),r="",n=jt.VARIABLE,o=0,l=0,h={recommendations:null,formattedContent:null,formattedString:null,newCursorPosition:null!=e?e:-1,errorStr:null};console.log(s),s.forEach((t=>{let s=this.variables.has(t)||!Number.isNaN(Number.parseFloat(t)),a=this.mathematicalExpressions.has(t),c=""==t.trim(),d="("==t||")"==t;if(c)return r=`${r}${t}`,void(l+=t.length);l<=e&&l+t.length+1>=e&&!h.recommendations&&(i&&(h.newCursorPosition+=i.length-t.length+1,t=i),h.recommendations=this._recommender.getRecommendation(t),console.log(h.recommendations));let u="";"("==t?(o++,u+=" bracket"):")"==t?(o--,u+=" bracket"):a&&(u+=" operator"),(n==jt.UNDEF||n==jt.VARIABLE&&!s&&!d||n==jt.OPERATOR&&!a||!s&&!a)&&(u+=" error"),h.errorStr||(o<0?(h.errorStr=`Unexpected ')' at pos: ${l}`,n=jt.UNDEF):n!=jt.VARIABLE||s||d?n!=jt.OPERATOR||a||")"==t?s||a||d||(h.errorStr=`Unknown word at pos: ${l}`,n=jt.UNDEF):(h.errorStr=`Expected mathematical operator at pos: ${l}`,n=jt.UNDEF):(h.errorStr=`Expected variable/number at pos: ${l}`,n=jt.UNDEF)),n!=jt.UNDEF&&("("==t||a?(console.log("operator encountered ",t,n),n=jt.VARIABLE):(")"==t||s)&&(n=jt.OPERATOR)),r=`${r}<span class="wysiwygInternals ${u}">${t}</span>${i?" ":""}`,l+=t.length,console.log(t,n)}));const a=(new DOMParser).parseFromString(r,"text/html");return h.formattedContent=a.querySelector("body"),h.formattedString=r,h}buildRPN(t){if(this.parseInput(t).errorStr)return null;let e=t.split(/([-+(),*/:?\s])/g).filter((t=>!/\s+/.test(t)&&""!==t));const i=new Ht,s=new Dt;for(let t of e)if("("==t)i.push("(");else if(")"==t){for(;"("!=i.top();)s.enqueue(i.pop());i.pop()}else if(this.mathematicalExpressions.has(t)){for(;this.mathematicalExpressions.has(i.top())&&this.operatorPrecedence[t]<=this.operatorPrecedence[i.top()];)s.enqueue(i.pop());i.push(t)}else Number.isNaN(t)||""==t||s.enqueue(t);for(;i.top();)s.enqueue(i.pop());return s}addParens(t){const e=this.buildRPN(t);if(!e)return null;let i="";for(;!e.empty();)i+=e.dequeue()+" ";let s=i.split(/\s+/g).filter((t=>!/\s+/.test(t)&&""!==t)),r=new Ht,n=new Ht;if(s.forEach((t=>{let e,i;if(this.variables.has(t)||!isNaN(parseFloat(t))&&isFinite(parseFloat(t)))n.push(t),r.push(null);else{if(!Object.keys(this.operatorPrecedence).includes(t))throw`${t} is not a recognized symbol`;{let[s,o,l,h]=[n.pop(),n.pop(),r.pop(),r.pop()];i=this.operatorPrecedence[h]<=this.operatorPrecedence[t]||this.operatorPrecedence[h]===this.operatorPrecedence[t]&&["/","-"].includes(t)?`(${o})`:`${o}`,e=this.operatorPrecedence[l]<=this.operatorPrecedence[t]||this.operatorPrecedence[l]===this.operatorPrecedence[t]&&["/","-"].includes(t)?`(${s})`:`${s}`,n.push(`${i} ${t} ${e}`),r.push(t)}}})),n.empty())throw`${i} is not a correct RPN`;return n.pop()}calculate(t){var e,i,s;let r=this.buildRPN(t);if(!r)return;let n=new Ht;for(;!r.empty();){const t=r.dequeue();if(this.mathematicalExpressions.has(t)){let e=t,i=n.pop(),s=n.pop();switch(e){case"+":n.push(Mt(s).add(Mt(i)));break;case"-":n.push(Mt(s).sub(Mt(i)));break;case"*":n.push(Mt(s).mul(Mt(i)));break;case"/":n.push(Mt(s).div(Mt(i)))}}else n.push(Mt(Number.parseFloat(null!==(i=null===(e=this.variables.get(t))||void 0===e?void 0:e.toString())&&void 0!==i?i:t)))}return null===(s=n.top())||void 0===s?void 0:s.toNumber()}}class qt{static getCurrentCursorPosition(t){var e,i;let s,r=window.getSelection(),n=-1;if((null==r?void 0:r.focusNode)&&qt._isChildOf(r.focusNode,t))for(s=r.focusNode,n=r.focusOffset;s&&s!==t;)if(s.previousSibling)s=s.previousSibling,n+=null!==(i=null===(e=s.textContent)||void 0===e?void 0:e.length)&&void 0!==i?i:0;else if(s=s.parentNode,null===s)break;return n}static setCurrentCursorPosition(t,e){if(t>=0){var i=window.getSelection();let s=qt._createRange(e,{count:t},void 0);s&&(s.collapse(!1),null==i||i.removeAllRanges(),null==i||i.addRange(s))}}static _createRange(t,e,i){if(i||((i=document.createRange()).selectNode(t),i.setStart(t,0)),0===e.count)i.setEnd(t,e.count);else if(t&&e.count>0)if(t.nodeType===Node.TEXT_NODE)t.textContent.length<e.count?e.count-=t.textContent.length:(i.setEnd(t,e.count),e.count=0);else for(var s=0;s<t.childNodes.length&&(i=qt._createRange(t.childNodes[s],e,i),0!==e.count);s++);return i}static _isChildOf(t,e){for(;null!==t;){if(t===e)return!0;t=t.parentNode}return!1}}var Bt=function(t,e,i,s){var r,n=arguments.length,o=n<3?e:null===s?s=Object.getOwnPropertyDescriptor(e,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,i,s);else for(var l=t.length-1;l>=0;l--)(r=t[l])&&(o=(n<3?r(o):n>3?r(e,i,o):r(e,i))||o);return n>3&&o&&Object.defineProperty(e,i,o),o};let Vt=class extends mt{constructor(){super(...arguments),this.recommendations="",this.onClickRecommendation=t=>{}}handleKeydown(t,e){"Enter"==t.code&&(t.preventDefault(),t.stopPropagation(),this.onClickRecommendation(e))}render(){return H`
      <ul class="wysiwyg-suggestion-menu">
        ${this.recommendations.split(",").map((t=>H`<li
            tabindex="0"
            @click=${e=>this.onClickRecommendation(t)}
            @keydown=${e=>this.handleKeydown(e,t)}
          >
            ${t}
          </li>`))}
      </ul>
    `}};Vt.styles=((t,...e)=>{const i=1===t.length?t[0]:e.reduce(((e,i,s)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if("number"==typeof t)return t;throw Error("Value passed to 'css' function must be a 'css' function result: "+t+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(i)+t[s+1]),t[0]);return new st(i,t,et)})`
    ul {
      border: 1px solid grey;
      box-sizing: border-box;
      width: fit-content;
      list-style-type: none;
      padding: 4px 0px;
      margin: 2px;
    }

    li {
      /* width: fit-content; */
      /* box-size: fit-content; */
      margin: 0px;
      padding: 2px 6px;
    }

    li:focus-visible {
      outline: 1px solid red;
    }
  `,Bt([yt()],Vt.prototype,"recommendations",void 0),Bt([yt()],Vt.prototype,"onClickRecommendation",void 0),Vt=Bt([gt("suggestion-menu")],Vt);var Ft=function(t,e,i,s){var r,n=arguments.length,o=n<3?e:null===s?s=Object.getOwnPropertyDescriptor(e,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,i,s);else for(var l=t.length-1;l>=0;l--)(r=t[l])&&(o=(n<3?r(o):n>3?r(e,i,o):r(e,i))||o);return n>3&&o&&Object.defineProperty(e,i,o),o};let Kt=class extends mt{constructor(){super(),this.content="",this.formattedContent=null,this.recommendations=null,this.errorStr=null,this.calculatedResult=null,this.currentCursorPosition=null,this.variables=new Map([["a",2],["b",3],["c",4],["mohit",0],["mohini",.2],["ravi",7],["ravipandey",8]]),this.mathematicalExpressions=new Set(["+","-","*","/"]),this.styles="\n    #wysiwyg-editor {\n      display: inline-block;\n      border: none;\n      padding: 4px;\n    }\n\n    #wysiwyg-editor:focus {\n      border: none;\n    }\n\n    .wysiwygInternals.error {\n      text-decoration: underline;\n      text-decoration-color: red;\n    }\n\n    .wysiwygInternals.bracket {\n      color: #AA3731;\n    }\n\n    .wysiwygInternals.operator {\n      font-weight: bold;\n      color: #777777;\n    }\n  ",this._parser=new Lt(this.variables,this.mathematicalExpressions)}handleChange(t){this.content=t.target.innerText,this.parseInput(),console.log("handel change called"),t.target.focus()}onClickRecommendation(t){document.getElementById("wysiwyg-editor")&&(this.parseInput(t),this.currentCursorPosition=null)}parseInput(t=null){let e=document.getElementById("wysiwyg-editor");if(!e)return;this.currentCursorPosition=t?this.currentCursorPosition:qt.getCurrentCursorPosition(e);const i=this._parser.parseInput(this.content,this.currentCursorPosition,t);this.recommendations=i.recommendations,this.formattedContent=i.formattedContent,this.errorStr=i.errorStr,e.innerHTML=i.formattedString,this.content=e.innerText,t&&(this.recommendations=null,this.currentCursorPosition=i.newCursorPosition),qt.setCurrentCursorPosition(this.currentCursorPosition,e),null==e||e.focus(),this.requestUpdate()}requestCalculate(){var t;this.calculatedResult=this._parser.calculate(this.content),this.content=null!==(t=this._parser.addParens(this.content))&&void 0!==t?t:this.content,this.parseInput(),this.requestUpdate()}createRenderRoot(){return this}firstUpdated(t){}render(){return H`
      <style>
        ${this.styles}
      </style>
      <div
        contenteditable
        id="wysiwyg-editor"
        style="min-width: 200px; height: 30px; border: 0px solid black; outline: 1px solid black;"
        spellcheck="false"
        @input=${this.handleChange}
      ></div>
      ${this.recommendations?H`<suggestion-menu
            .recommendations=${this.recommendations.join(",")}
            .onClickRecommendation=${t=>this.onClickRecommendation(t)}
          ></suggestion-menu>`:H``}
      <button @click=${this.requestCalculate}>Calculate</button>
      <p style="color: red;">${this.errorStr}</p>
      <p>${this.calculatedResult}</p>
    `}};Ft([Et()],Kt.prototype,"content",void 0),Ft([Et()],Kt.prototype,"formattedContent",void 0),Ft([Et()],Kt.prototype,"recommendations",void 0),Ft([Et()],Kt.prototype,"errorStr",void 0),Ft([Et()],Kt.prototype,"calculatedResult",void 0),Kt=Ft([gt("formula-editor")],Kt)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,